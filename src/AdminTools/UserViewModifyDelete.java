/*
 * Form :UserViewModifyDelete
 * Version :0.1.3
 * Upadted :18-08-2012 at 3.49 PM
 *          18-08-2012 at 3.55 PM
 *          18-08-2012 at 4.02 PM
 *          18-08-2012 at 6.08 PM Delete bug fixed.
 *          18-08-2012 at 6.32 PM current login when deleted.(Login again).
 *          18-08-2012 at 6.46 vlaidateUsername() got changed.
 *          19-08-2012 at 11.26 PM reqst focus after clar.
 *          23-08-2012 at 2.30 AM delete buttone yune and colore
 *          23-08-2012 at 2.55 AM validate username updated
 *          25-08-2012 at 12.57 AM icon
 *          31-08-2012 at 2.45 AM no match found implimented.
 *          3-9-2012 at 2.20 PM killing object.
 */
package adminTools;

import Run.Runner;
import Run.dbConnect;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import main_package.NewOkCancelDialog;
import main_package.authenticationDialog;

/**
 *
 * @author Nawaf
 */
public class UserViewModifyDelete extends javax.swing.JFrame {

    /**
     * Creates new form UserViewModifyDelete
     */
    public UserViewModifyDelete(String userName) {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/main_package/resources/icon.png")).getImage());
        setLocationRelativeTo(null);
        globalUserName = userName;
        findTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fillDataTable();
        disableForm();
        filter();
    }
    String globalUserName;

    public void fillDataTable() {
        try {
            DefaultTableModel model = (DefaultTableModel) findTable.getModel();
            String sql = "Select * from login";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            while (rs.next()) {
                String user = rs.getString("User");
                String password = rs.getString("Pass");
                String UFN = rs.getString("F_UFN");
                if (UFN == null) {
                    UFN = "               --";
                }
                String Privilege = rs.getString("Privilege");
                model.addRow(new Object[]{user, password, UFN, Privilege});
            }
            rs.close();
        } catch (SQLException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userAccountDetailsPanel = new javax.swing.JPanel();
        findPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        findTable = new javax.swing.JTable();
        findTextBox = new javax.swing.JTextField();
        notification = new javax.swing.JLabel();
        userAccountPanel = new javax.swing.JPanel();
        modifyIcon = new javax.swing.JLabel();
        userLabel = new javax.swing.JLabel();
        userTextBox = new javax.swing.JTextField();
        privilegeLabel = new javax.swing.JLabel();
        passLabel = new javax.swing.JLabel();
        passTextBox = new javax.swing.JPasswordField();
        privilegeComboBox = new javax.swing.JComboBox();
        bad1 = new javax.swing.JLabel();
        bad2 = new javax.swing.JLabel();
        ufnLabel = new javax.swing.JLabel();
        ufnTextBox = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        homeButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        modifyButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("User account details");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        userAccountDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("User account details"));

        findPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Find"));

        findTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User", "Password", "UFN", "Privilege"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        findTable.setToolTipText("Click and select user from the table to view the details.");
        findTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        findTable.setGridColor(new java.awt.Color(255, 255, 255));
        findTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                findTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                findTableMouseEntered(evt);
            }
        });
        findTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                findTableFocusGained(evt);
            }
        });
        findTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                findTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                findTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(findTable);
        findTable.getColumnModel().getColumn(1).setMinWidth(0);
        findTable.getColumnModel().getColumn(1).setPreferredWidth(0);
        findTable.getColumnModel().getColumn(1).setMaxWidth(0);

        findTextBox.setToolTipText("Enter text to find user.");
        findTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                findTextBoxMouseEntered(evt);
            }
        });
        findTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findTextBoxActionPerformed(evt);
            }
        });
        findTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                findTextBoxFocusGained(evt);
            }
        });
        findTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                findTextBoxKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                findTextBoxKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout findPanelLayout = new javax.swing.GroupLayout(findPanel);
        findPanel.setLayout(findPanelLayout);
        findPanelLayout.setHorizontalGroup(
            findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                    .addComponent(findTextBox))
                .addContainerGap())
        );
        findPanelLayout.setVerticalGroup(
            findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findPanelLayout.createSequentialGroup()
                .addComponent(findTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        notification.setForeground(new java.awt.Color(51, 51, 251));
        notification.setText(" ");

        userAccountPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("User account"));

        modifyIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/user_edit.png"))); // NOI18N

        userLabel.setText("Username *:");
        userLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                userLabelMouseEntered(evt);
            }
        });

        userTextBox.setToolTipText("Username.");
        userTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                userTextBoxMouseEntered(evt);
            }
        });
        userTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTextBoxActionPerformed(evt);
            }
        });
        userTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                userTextBoxFocusGained(evt);
            }
        });
        userTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userTextBoxKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                userTextBoxKeyReleased(evt);
            }
        });

        privilegeLabel.setText("Privilege :");
        privilegeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                privilegeLabelMouseEntered(evt);
            }
        });

        passLabel.setText("Password  *:");
        passLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                passLabelMouseEntered(evt);
            }
        });

        passTextBox.setToolTipText("Password");
        passTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                passTextBoxMouseEntered(evt);
            }
        });
        passTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passTextBoxFocusGained(evt);
            }
        });
        passTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passTextBoxKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passTextBoxKeyReleased(evt);
            }
        });

        privilegeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Admin", "Temp admin", "Other" }));
        privilegeComboBox.setToolTipText("<html>\nPrivilege -<b> Admin</b><br>\nAdmin have all privilege to to add, modify and  view.<br>\nPrivilege -<b>  Temp admin</b><br>\nMainly for data entry persons.<br>\nPrivilege -<b> Othe</b>r<br>\nOnly view permission.\n</html>");
        privilegeComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                privilegeComboBoxMouseEntered(evt);
            }
        });
        privilegeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privilegeComboBoxActionPerformed(evt);
            }
        });
        privilegeComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                privilegeComboBoxFocusGained(evt);
            }
        });
        privilegeComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                privilegeComboBoxKeyPressed(evt);
            }
        });

        bad1.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad1.setForeground(new java.awt.Color(255, 0, 0));
        bad1.setText(" ");

        bad2.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad2.setForeground(new java.awt.Color(255, 0, 0));
        bad2.setText(" ");

        ufnLabel.setText("UFN :");
        ufnLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ufnLabelMouseEntered(evt);
            }
        });

        ufnTextBox.setBackground(new java.awt.Color(204, 204, 204));
        ufnTextBox.setEditable(false);
        ufnTextBox.setToolTipText("Selected user's UFN.");
        ufnTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ufnTextBoxMouseEntered(evt);
            }
        });
        ufnTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ufnTextBoxFocusGained(evt);
            }
        });
        ufnTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ufnTextBoxKeyPressed(evt);
            }
        });

        homeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/home-icon-small.png"))); // NOI18N
        homeButton.setText("Home");
        homeButton.setToolTipText("Click home button to go back to home.");
        homeButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 2, 2, 1));
        homeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        homeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                homeButtonMouseEntered(evt);
            }
        });
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });
        homeButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                homeButtonFocusGained(evt);
            }
        });
        homeButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                homeButtonKeyPressed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Actions-edit-delete-icon.png"))); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.setToolTipText("<html>\nStep 1, Select user from the table.<br>\nStep 2, Click delete button to delete the selected user.\n</html>");
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteButtonMouseEntered(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        deleteButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deleteButtonFocusGained(evt);
            }
        });
        deleteButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deleteButtonKeyPressed(evt);
            }
        });

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main_package/resources/Button-cancel-icon.png"))); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.setToolTipText("Click on cancel button to cancel the modification.");
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancelButtonMouseEntered(evt);
            }
        });
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        cancelButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cancelButtonFocusGained(evt);
            }
        });
        cancelButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelButtonKeyPressed(evt);
            }
        });

        modifyButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        modifyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Text-Edit-icon.png"))); // NOI18N
        modifyButton.setText("Modify");
        modifyButton.setToolTipText("<html>\nStep 1, Select user from the table.<br>\nStep 2, Click modify button to modify the details.<br>\nStep 3, After completing modification click on the save button.\n</html>");
        modifyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                modifyButtonMouseEntered(evt);
            }
        });
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });
        modifyButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                modifyButtonFocusGained(evt);
            }
        });
        modifyButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                modifyButtonKeyPressed(evt);
            }
        });

        clearButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Actions-edit-clear-icon.png"))); // NOI18N
        clearButton.setText("Clear");
        clearButton.setToolTipText("Click clear button to clear the form fields.");
        clearButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                clearButtonMouseEntered(evt);
            }
        });
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        clearButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearButtonFocusGained(evt);
            }
        });
        clearButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                clearButtonKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(modifyButton)
                        .addGap(64, 64, 64)
                        .addComponent(cancelButton))
                    .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64)
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, clearButton, deleteButton, homeButton, modifyButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(modifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cancelButton, clearButton, deleteButton, homeButton, modifyButton});

        javax.swing.GroupLayout userAccountPanelLayout = new javax.swing.GroupLayout(userAccountPanel);
        userAccountPanel.setLayout(userAccountPanelLayout);
        userAccountPanelLayout.setHorizontalGroup(
            userAccountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userAccountPanelLayout.createSequentialGroup()
                .addGroup(userAccountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userAccountPanelLayout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(modifyIcon))
                    .addGroup(userAccountPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(userAccountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(userAccountPanelLayout.createSequentialGroup()
                                .addGroup(userAccountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(userLabel)
                                    .addComponent(passLabel)
                                    .addComponent(privilegeLabel))
                                .addGap(34, 34, 34)
                                .addGroup(userAccountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(privilegeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(passTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(userTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ufnTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(userAccountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bad1)
                                    .addComponent(bad2)))
                            .addComponent(ufnLabel))))
                .addGap(6, 6, 6))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userAccountPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );

        userAccountPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {passTextBox, privilegeComboBox, ufnTextBox, userTextBox});

        userAccountPanelLayout.setVerticalGroup(
            userAccountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userAccountPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(modifyIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(userAccountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userLabel)
                    .addComponent(bad1))
                .addGap(18, 18, 18)
                .addGroup(userAccountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passLabel)
                    .addComponent(passTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bad2))
                .addGap(18, 18, 18)
                .addGroup(userAccountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userAccountPanelLayout.createSequentialGroup()
                        .addComponent(privilegeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ufnTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(userAccountPanelLayout.createSequentialGroup()
                        .addComponent(privilegeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ufnLabel)))
                .addGap(22, 22, 22)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE))
        );

        userAccountPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {passTextBox, privilegeComboBox, ufnTextBox, userTextBox});

        javax.swing.GroupLayout userAccountDetailsPanelLayout = new javax.swing.GroupLayout(userAccountDetailsPanel);
        userAccountDetailsPanel.setLayout(userAccountDetailsPanelLayout);
        userAccountDetailsPanelLayout.setHorizontalGroup(
            userAccountDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userAccountDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userAccountDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(findPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(notification, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userAccountPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(8, 8, 8))
        );
        userAccountDetailsPanelLayout.setVerticalGroup(
            userAccountDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userAccountDetailsPanelLayout.createSequentialGroup()
                .addGroup(userAccountDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(findPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(userAccountPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notification))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userAccountDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userAccountDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void findTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findTableMouseClicked
        if (findTable.isEnabled()) {
            if (findTable.getRowCount() > 0) {
                fillForm();
            }
        }
    }//GEN-LAST:event_findTableMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        homeButton.doClick();
    }//GEN-LAST:event_formWindowClosing

    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        if (findTable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a user from the table.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (findTable.isEnabled()) {
            if (findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString() == null ? userTextBox.getText() != null : !findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString().equals(userTextBox.getText())) {
                JOptionPane.showMessageDialog(null, "Please make sure your selection.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            enableForm();
        } else {
            if ("".equals(userTextBox.getText())) {
                JOptionPane.showMessageDialog(null, "Username field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                userTextBox.requestFocus();
                return;
            }
            if ("!".equals(bad1.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate username.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                userTextBox.requestFocus();
                return;
            }

            if (findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString() == null ? userTextBox.getText() != null : !findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString().equals(userTextBox.getText())) {
                if (validateUserName(userTextBox.getText()) == false) {
                    JOptionPane.showMessageDialog(null, "Username alrady used. Please try other.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                    userTextBox.requestFocus();
                    return;
                }
            }
            if ("".equals(passTextBox.getText())) {
                JOptionPane.showMessageDialog(null, "Password field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                passTextBox.requestFocus();
                return;
            }
            if ("!".equals(bad2.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate password.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                passTextBox.requestFocus();
                return;
            }
            if ("admin".equals(findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 3).toString())) {
                if (findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 3).toString() == null ? privilegeComboBox.getSelectedItem().toString().toLowerCase() != null : !findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 3).toString().equals(privilegeComboBox.getSelectedItem().toString().toLowerCase())) {
                    if (validteOnlyOneAdmin()) {
                        Toolkit.getDefaultToolkit().beep();
                        JOptionPane.showMessageDialog(null, "Sorry can't modify \"" + userTextBox.getText() + "\"'s privilege.\nBecause you are the only admin to handle the system.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                        privilegeComboBox.setSelectedIndex(0);
                        return;
                    }
                }
            }
            String sql;
            int successful = 0;
            if (privilegeComboBox.isVisible()) {
                sql = "Update login set User=\"" + userTextBox.getText() + "\" , Pass=\"" + passTextBox.getText() + "\" , Privilege=\"" + converPrivilegeToSql(privilegeComboBox.getSelectedItem().toString()) + "\" where User=\"" + findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString() + "\"";
            } else {
                sql = "Update login set User=\"" + userTextBox.getText() + "\" , Pass=\"" + passTextBox.getText() + "\" where User=\"" + findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString() + "\"";
            }
            try {
                successful = dbConnect.getCon().createStatement().executeUpdate(sql);
            } catch (SQLException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            if (successful == 1) {
                JOptionPane.showMessageDialog(null, "User details successfully modified.", "Success", JOptionPane.INFORMATION_MESSAGE);
                if ((globalUserName == null ? findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString() == null : globalUserName.equals(findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString())) && "admin".equals(findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 3).toString())) {
                    if (findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 3).toString() == null ? privilegeComboBox.getSelectedItem().toString().toLowerCase() != null : !findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 3).toString().equals(privilegeComboBox.getSelectedItem().toString().toLowerCase())) {
                        Toolkit.getDefaultToolkit().beep();
                        JOptionPane.showMessageDialog(null, "You don't have admin privilege.\nPlease login again.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                        Runner.RunnerObj.LoginUIObj.setVisible(true);
                        Runner.RunnerObj.MainUIObj.dispose();
                        this.dispose();
                    }
                }
                if ((globalUserName == null ? findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString() == null : globalUserName.equals(findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString()))) {
                    globalUserName = userTextBox.getText();
                    Run.Runner.RunnerObj.MainUIObj.setUsername(globalUserName);
                }
                refillForm();
                disableForm();
            } else {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, "User details modification not successful.", "Failed", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_modifyButtonActionPerformed

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        Run.Runner.RunnerObj.MainUIObj.show();
        this.dispose();
        Run.Runner.RunnerObj.MainUIObj.UserViewModifyDeleteObj=null;
    }//GEN-LAST:event_homeButtonActionPerformed

    private void userTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userTextBoxActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clear();
        userTextBox.requestFocus();
    }//GEN-LAST:event_clearButtonActionPerformed
    private void clear() {
        userTextBox.setText("");
        passTextBox.setText("");
        bad1.setText(" ");
        bad2.setText(" ");
        privilegeComboBox.setSelectedIndex(0);
    }
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        if (findTable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a user from the table.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString() == null ? userTextBox.getText() != null : !findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString().equals(userTextBox.getText())) {
            JOptionPane.showMessageDialog(null, "Please make sure your selection.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if ("admin".equals(findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 3).toString())) {
            if (validteOnlyOneAdmin()) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, "Sorry can't delete \"" + userTextBox.getText() + "\".\nBecause you are the only admin to handle the system.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                privilegeComboBox.setSelectedIndex(0);
                return;
            }
        }
        findTable.setSelectionBackground(new java.awt.Color(255, 0, 0));
        String deleteUserQuery;
        int returnStatus;
        if (privilegeComboBox.isVisible()) {
            NewOkCancelDialog dialog = new NewOkCancelDialog(new javax.swing.JFrame(), true);
            dialog.setTitle("Delete ? ");
            dialog.setVisible(true);
            returnStatus = dialog.returnStatus;
            dialog.dispose();
            deleteUserQuery = "delete from login where User=\"" + userTextBox.getText() + "\"";
        } else {
            authenticationDialog dialog = new authenticationDialog(new javax.swing.JFrame(), true, "<html>Note : if you delete this user then faculty details and<br>subject handling of this user also will get deleted.</html>");
            dialog.setTitle("Delete ?");
            dialog.setVisible(true);
            returnStatus = dialog.returnStatus;
            dialog.dispose();
            deleteUserQuery = "delete from faculty where UFN=\"" + ufnTextBox.getText() + "\"";
        }
        if (returnStatus == 1) {
            int deleteSuccessful = 0;
            try {
                deleteSuccessful = dbConnect.getCon().createStatement().executeUpdate(deleteUserQuery);
            } catch (SQLException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

            if (deleteSuccessful == 1) {
                JOptionPane.showMessageDialog(this, "User \"" + userTextBox.getText() + "\" succeessfully deleted.", "Information", JOptionPane.INFORMATION_MESSAGE);
                if (globalUserName.equals(userTextBox.getText())) {
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null, "You don't have admin privilege.\nPlease login again.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                    Runner.RunnerObj.LoginUIObj.setVisible(true);
                    Runner.RunnerObj.MainUIObj.dispose();
                    this.dispose();
                }
                removeSelectedRows(findTable);
                filter();
            } else {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, "User \"" + userTextBox.getText() + "\" deletetion not successful.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        findTable.setSelectionBackground(new java.awt.Color(0, 102, 153));
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void privilegeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privilegeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_privilegeComboBoxActionPerformed

    private void findTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_findTableFocusGained
        notification.setText("To select a user.");
    }//GEN-LAST:event_findTableFocusGained

    private void findTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_findTextBoxActionPerformed

    private void findTextBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findTextBoxKeyReleased
        filter();
    }//GEN-LAST:event_findTextBoxKeyReleased

    private void userTextBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userTextBoxKeyReleased
        if (userTextBox.getText().length() > 50) {
            Toolkit.getDefaultToolkit().beep();
            userTextBox.setText(userTextBox.getText().substring(0, 50));
        }
        if (!userTextBox.getText().matches("[a-zA-Z0-9][_a-zA-Z0-9]*")) {
            bad1.setText("!");
        } else {
            bad1.setText(" ");
        }
    }//GEN-LAST:event_userTextBoxKeyReleased

    private void passTextBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passTextBoxKeyReleased
        if (passTextBox.getText().length() > 50) {
            Toolkit.getDefaultToolkit().beep();
            passTextBox.setText(passTextBox.getText().substring(0, 50));
        }
        if (!passTextBox.getText().matches("[^ ][^ ]*")) {
            bad2.setText("!");
        } else {
            bad2.setText(" ");
        }
    }//GEN-LAST:event_passTextBoxKeyReleased

    private void findTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findTableKeyReleased
        if (findTable.isEnabled()) {
            if (findTable.getRowCount() > 0) {
                fillForm();
            }
        }
    }//GEN-LAST:event_findTableKeyReleased

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        fillForm();
        disableForm();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void findTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findTextBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            findTable.requestFocus();
        }
    }//GEN-LAST:event_findTextBoxKeyPressed

    private void findTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findTableKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            findTextBox.requestFocus();
        }
    }//GEN-LAST:event_findTableKeyPressed

    private void userTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userTextBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modifyButton.requestFocus();
        }
    }//GEN-LAST:event_userTextBoxKeyPressed

    private void passTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passTextBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modifyButton.requestFocus();
        }
    }//GEN-LAST:event_passTextBoxKeyPressed

    private void privilegeComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_privilegeComboBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modifyButton.requestFocus();
        }
    }//GEN-LAST:event_privilegeComboBoxKeyPressed

    private void ufnTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ufnTextBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modifyButton.requestFocus();
        }
    }//GEN-LAST:event_ufnTextBoxKeyPressed

    private void modifyButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_modifyButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modifyButton.doClick();
        }
    }//GEN-LAST:event_modifyButtonKeyPressed

    private void deleteButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deleteButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            deleteButton.doClick();
        }
    }//GEN-LAST:event_deleteButtonKeyPressed

    private void cancelButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cancelButton.doClick();
        }
    }//GEN-LAST:event_cancelButtonKeyPressed

    private void clearButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clearButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            clearButton.doClick();
        }
    }//GEN-LAST:event_clearButtonKeyPressed

    private void homeButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_homeButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            homeButton.doClick();
        }
    }//GEN-LAST:event_homeButtonKeyPressed

    private void userLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userLabelMouseEntered
        notification.setText("Username.");
    }//GEN-LAST:event_userLabelMouseEntered

    private void passLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passLabelMouseEntered
        notification.setText("Password.");
    }//GEN-LAST:event_passLabelMouseEntered

    private void privilegeLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_privilegeLabelMouseEntered
        notification.setText("Privilege.");
    }//GEN-LAST:event_privilegeLabelMouseEntered

    private void ufnLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ufnLabelMouseEntered
        notification.setText("University faculty number (UFN).");
    }//GEN-LAST:event_ufnLabelMouseEntered

    private void userTextBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userTextBoxMouseEntered
        notification.setText("Selected user's username.");
    }//GEN-LAST:event_userTextBoxMouseEntered

    private void userTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_userTextBoxFocusGained
        notification.setText("Selected user's username.");
    }//GEN-LAST:event_userTextBoxFocusGained

    private void passTextBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passTextBoxMouseEntered
        notification.setText("Selected user's password.");
    }//GEN-LAST:event_passTextBoxMouseEntered

    private void passTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passTextBoxFocusGained
        notification.setText("Selected user's password.");
    }//GEN-LAST:event_passTextBoxFocusGained

    private void privilegeComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_privilegeComboBoxMouseEntered
        notification.setText("Selected user's privilege.");
    }//GEN-LAST:event_privilegeComboBoxMouseEntered

    private void privilegeComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_privilegeComboBoxFocusGained
        notification.setText("Selected user's privilege.");
    }//GEN-LAST:event_privilegeComboBoxFocusGained

    private void ufnTextBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ufnTextBoxMouseEntered
        notification.setText("Selected user's UFN.");
    }//GEN-LAST:event_ufnTextBoxMouseEntered

    private void ufnTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ufnTextBoxFocusGained
        notification.setText("Selected user's UFN.");
    }//GEN-LAST:event_ufnTextBoxFocusGained

    private void modifyButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modifyButtonMouseEntered
        notification.setText("To modify the faculty details.");
    }//GEN-LAST:event_modifyButtonMouseEntered

    private void modifyButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_modifyButtonFocusGained
        notification.setText("To modify the faculty details.");
    }//GEN-LAST:event_modifyButtonFocusGained

    private void cancelButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseEntered
        notification.setText("To cancel modification.");
    }//GEN-LAST:event_cancelButtonMouseEntered

    private void cancelButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cancelButtonFocusGained
        notification.setText("To cancel modification.");
    }//GEN-LAST:event_cancelButtonFocusGained

    private void deleteButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseEntered
        notification.setText("To delete user.");
    }//GEN-LAST:event_deleteButtonMouseEntered

    private void deleteButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deleteButtonFocusGained
        notification.setText("To delete user.");
    }//GEN-LAST:event_deleteButtonFocusGained

    private void clearButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_clearButtonFocusGained
        notification.setText("To clear the form feilds.");
    }//GEN-LAST:event_clearButtonFocusGained

    private void clearButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearButtonMouseEntered
        notification.setText("To clear the form feilds.");
    }//GEN-LAST:event_clearButtonMouseEntered

    private void homeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeButtonMouseEntered
        notification.setText("Go back to home.");
    }//GEN-LAST:event_homeButtonMouseEntered

    private void homeButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_homeButtonFocusGained
        notification.setText("Go back to home.");
    }//GEN-LAST:event_homeButtonFocusGained

    private void findTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findTableMouseEntered
        notification.setText("To select a user.");
    }//GEN-LAST:event_findTableMouseEntered

    private void findTextBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findTextBoxMouseEntered
        notification.setText("Enter text to find users.");
    }//GEN-LAST:event_findTextBoxMouseEntered

    private void findTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_findTextBoxFocusGained
        notification.setText("Enter text to find users.");
    }//GEN-LAST:event_findTextBoxFocusGained
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bad1;
    private javax.swing.JLabel bad2;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel findPanel;
    private javax.swing.JTable findTable;
    private javax.swing.JTextField findTextBox;
    private javax.swing.JButton homeButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modifyButton;
    private javax.swing.JLabel modifyIcon;
    private javax.swing.JLabel notification;
    private javax.swing.JLabel passLabel;
    private javax.swing.JPasswordField passTextBox;
    private javax.swing.JComboBox privilegeComboBox;
    private javax.swing.JLabel privilegeLabel;
    private javax.swing.JLabel ufnLabel;
    private javax.swing.JTextField ufnTextBox;
    private javax.swing.JPanel userAccountDetailsPanel;
    private javax.swing.JPanel userAccountPanel;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTextField userTextBox;
    // End of variables declaration//GEN-END:variables

    private void filter() {
        String searchText = findTextBox.getText();

        ArrayList<RowFilter<Object, Object>> andFilters = new ArrayList<RowFilter<Object, Object>>();
        andFilters.add(RowFilter.regexFilter("(?i)" + searchText, 0, 2, 3));
        DefaultTableModel model = (DefaultTableModel) findTable.getModel();
        final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
        sorter.setRowFilter(RowFilter.andFilter(andFilters));
        findTable.setRowSorter(sorter);

        if (findTable.getRowCount() > 0) {
            findTable.getSelectionModel().setSelectionInterval(0, 0);
            userTextBox.setForeground(Color.black);
            fillForm();
        } else {
            clear();
            Toolkit.getDefaultToolkit().beep();
            userTextBox.setForeground(Color.red);
            userTextBox.setText("No match found.");
        }
    }

    private void fillForm() {
        int row = findTable.convertRowIndexToModel(findTable.getSelectedRow());
        userTextBox.setText(findTable.getModel().getValueAt(row, 0).toString());
        passTextBox.setText(findTable.getModel().getValueAt(row, 1).toString());
        if (!"hod".equals(findTable.getModel().getValueAt(row, 3).toString()) && !"faculty".equals(findTable.getModel().getValueAt(row, 3).toString())) {
            privilegeLabel.setVisible(true);
            privilegeComboBox.setVisible(true);
            ufnLabel.setVisible(false);
            ufnTextBox.setVisible(false);
            privilegeComboBox.setSelectedItem(converPrivilegeTableToForm(findTable.getModel().getValueAt(row, 3).toString()));
        } else {
            privilegeLabel.setVisible(false);
            privilegeComboBox.setVisible(false);
            ufnLabel.setVisible(true);
            ufnTextBox.setVisible(true);
            ufnTextBox.setText(findTable.getModel().getValueAt(row, 2).toString());
        }
    }

    private String converPrivilegeToSql(String TempPrivilage) {
        if ("Admin".equals(TempPrivilage)) {
            return "admin";
        }
        if ("Temp admin".equals(TempPrivilage)) {
            return "tempAdmin";
        }
        return "other";
    }

    private String converPrivilegeTableToForm(String TempPrivilage) {
        if ("admin".equals(TempPrivilage)) {
            return "Admin";
        }
        if ("tempAdmin".equals(TempPrivilage)) {
            return "Temp admin";
        }
        return "Other";
    }

    private void disableForm() {
        modifyButton.setText("Modify");
        deleteButton.setEnabled(true);
        findTable.setEnabled(true);
        findTextBox.setEnabled(true);
        userTextBox.setEditable(false);
        passTextBox.setEditable(false);
        clearButton.setEnabled(false);
        cancelButton.setEnabled(false);
        privilegeComboBox.setEnabled(false);
        findTextBox.requestFocus();
    }

    private void enableForm() {
        modifyButton.setText("Save");
        deleteButton.setEnabled(false);
        findTable.setEnabled(false);
        findTextBox.setEnabled(false);
        userTextBox.setEditable(true);
        passTextBox.setEditable(true);
        clearButton.setEnabled(true);
        cancelButton.setEnabled(true);
        privilegeComboBox.setEnabled(true);
        userTextBox.requestFocus();
    }

    private boolean validateUserName(String userName) {
        try {
            String sql = "Select count(*) from login where User=\"" + userName + "\"";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            if (rs.next()) {
                int count = rs.getInt("count(*)");
                if (count == 0) {
                    return true;
                }
            }
            rs.close();
        } catch (SQLException ex) {
            return false;
        }
        return false;
    }

    private boolean validteOnlyOneAdmin() {
        try {
            String sql = "Select count(*) from login where Privilege=\"" + "admin" + "\"";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            while (rs.next()) {
                if (rs.getInt("count(*)") > 1) {
                    return false;
                }
            }
            rs.close();
        } catch (SQLException ex) {
            return true;
        }
        return true;
    }

    private void refillForm() {
        removeSelectedRows(findTable);
        try {
            DefaultTableModel model = (DefaultTableModel) findTable.getModel();
            String sql = "Select * from login where User=\"" + userTextBox.getText() + "\"";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            while (rs.next()) {
                String user = rs.getString("User");
                String password = rs.getString("Pass");
                String UFN = rs.getString("F_UFN");
                if (UFN == null) {
                    UFN = "               --";
                }
                String Privilege = rs.getString("Privilege");

                model.addRow(new Object[]{user, password, UFN, Privilege});
            }
            rs.close();
        } catch (SQLException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        if (findTable.getRowCount() > 0) {
            findTable.getSelectionModel().setSelectionInterval(findTable.getRowCount() - 1, findTable.getRowCount() - 1);
            fillForm();
        } else {
            clear();
            findTextBox.requestFocus();
        }
    }

    public void removeSelectedRows(JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int[] rows = table.getSelectedRows();
        for (int i = 0; i < rows.length; i++) {
            model.removeRow(table.convertRowIndexToModel(rows[i]) - i);
        }
    }
}
