/*
 * Form : ViewFaculty
 * Version : 0.0.4
 * Updated : 31-08-2012 at 11.48 PM
 * 1-09-2012 at 12.43 AM hirchy imlimented.
 * 1-09-2012 at 11.32 PM showDialog function changed.
 * 3-9-2012 at 2.25 pm kill object
 */
package Faculty;

import Misc.MyImageFilter;
import Run.Runner;
import Run.dbConnect;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.*;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import main_package.authenticationDialog;

/**
 *
 * @author V4 Creations
 */
public class ViewFaculty extends javax.swing.JFrame {

    /**
     * Creates new form ViewFaculty
     */
    public ViewFaculty() {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/main_package/resources/icon.png")).getImage());
        setLocationRelativeTo(null);
        findTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fillFindTable();
        fillFindDepartmentcomboBox();
        fillDeptCode();
        newDisable();
        filter();
        hierarchy();
    }
    private static File myFile = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        facultyDetailsMainPanel = new javax.swing.JPanel();
        findPanel = new javax.swing.JPanel();
        findDeptCodeComboBox = new javax.swing.JComboBox();
        findDeptCodeLabel = new javax.swing.JLabel();
        findTextBox = new javax.swing.JTextField();
        findCurrentStatusComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        findTable = new javax.swing.JTable();
        findCurrentStatusLabel = new javax.swing.JLabel();
        facultyDetailsPanel = new javax.swing.JPanel();
        deptCodeLabel = new javax.swing.JLabel();
        deptCodeCombo = new javax.swing.JComboBox();
        yearOfBirthSpinner = new com.toedter.calendar.JYearChooser();
        DOJLabel = new javax.swing.JLabel();
        dayOfjoinSpinner = new javax.swing.JSpinner();
        AddressLabel = new javax.swing.JLabel();
        dayOfBirthSpinner = new javax.swing.JSpinner();
        qualificationText = new javax.swing.JTextField();
        monthOfBirthCombo = new javax.swing.JComboBox();
        DOBLabel = new javax.swing.JLabel();
        genderLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        addressTextArea = new javax.swing.JTextPane();
        qualificationLabel = new javax.swing.JLabel();
        monthOfjoinCombo = new javax.swing.JComboBox();
        fNameText = new javax.swing.JTextField();
        yearOfJoinSpinner = new com.toedter.calendar.JYearChooser();
        lNameText = new javax.swing.JTextField();
        phoneLabel = new javax.swing.JLabel();
        ufnLabel = new javax.swing.JLabel();
        bad1 = new javax.swing.JLabel();
        hostelText = new javax.swing.JTextField();
        fnameLabel = new javax.swing.JLabel();
        bad2 = new javax.swing.JLabel();
        genderComboBox = new javax.swing.JComboBox();
        ufnText = new javax.swing.JTextField();
        bad3 = new javax.swing.JLabel();
        hostelliteCheckBox = new javax.swing.JCheckBox();
        bad4 = new javax.swing.JLabel();
        lNameLabel = new javax.swing.JLabel();
        bad5 = new javax.swing.JLabel();
        phoneText = new javax.swing.JTextField();
        bad6 = new javax.swing.JLabel();
        emailIDLabel = new javax.swing.JLabel();
        bad7 = new javax.swing.JLabel();
        emailIDText = new javax.swing.JTextField();
        hostelComboBox = new javax.swing.JComboBox();
        modifyButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        homeButton = new javax.swing.JButton();
        facultyPhotoPanel = new javax.swing.JPanel();
        photoLabel = new javax.swing.JLabel();
        currentStatusLabel = new javax.swing.JLabel();
        currentStatusComboBox = new javax.swing.JComboBox();
        deleteButton = new javax.swing.JButton();
        notification = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Faculty details");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        facultyDetailsMainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Faculty details"));

        findPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Find"));

        findDeptCodeComboBox.setToolTipText("Click and select department code.");
        findDeptCodeComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                findDeptCodeComboBoxMouseEntered(evt);
            }
        });
        findDeptCodeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findDeptCodeComboBoxActionPerformed(evt);
            }
        });
        findDeptCodeComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                findDeptCodeComboBoxFocusGained(evt);
            }
        });

        findDeptCodeLabel.setText("Dept. code :");
        findDeptCodeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                findDeptCodeLabelMouseEntered(evt);
            }
        });

        findTextBox.setToolTipText("Enter the text to filter the faculty.");
        findTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                findTextBoxMouseEntered(evt);
            }
        });
        findTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                findTextBoxFocusGained(evt);
            }
        });
        findTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                findTextBoxKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                findTextBoxKeyReleased(evt);
            }
        });

        findCurrentStatusComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Available", "On leave", "Left" }));
        findCurrentStatusComboBox.setToolTipText("Click and select current status.");
        findCurrentStatusComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                findCurrentStatusComboBoxMouseEntered(evt);
            }
        });
        findCurrentStatusComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findCurrentStatusComboBoxActionPerformed(evt);
            }
        });
        findCurrentStatusComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                findCurrentStatusComboBoxFocusGained(evt);
            }
        });

        findTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UFN", "Faculty name", "Dept. code", "Current status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        findTable.setToolTipText("Select a faculty.");
        findTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                findTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                findTableMouseEntered(evt);
            }
        });
        findTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                findTableFocusGained(evt);
            }
        });
        findTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                findTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                findTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(findTable);
        findTable.getColumnModel().getColumn(0).setMinWidth(100);
        findTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        findTable.getColumnModel().getColumn(0).setMaxWidth(100);
        findTable.getColumnModel().getColumn(2).setMinWidth(0);
        findTable.getColumnModel().getColumn(2).setPreferredWidth(0);
        findTable.getColumnModel().getColumn(2).setMaxWidth(0);
        findTable.getColumnModel().getColumn(3).setMinWidth(0);
        findTable.getColumnModel().getColumn(3).setPreferredWidth(0);
        findTable.getColumnModel().getColumn(3).setMaxWidth(0);

        findCurrentStatusLabel.setText("Current status :");
        findCurrentStatusLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                findCurrentStatusLabelMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout findPanelLayout = new javax.swing.GroupLayout(findPanel);
        findPanel.setLayout(findPanelLayout);
        findPanelLayout.setHorizontalGroup(
            findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(findTextBox)
                    .addGroup(findPanelLayout.createSequentialGroup()
                        .addComponent(findDeptCodeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(findDeptCodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(findCurrentStatusLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(findCurrentStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        findPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {findCurrentStatusComboBox, findDeptCodeComboBox});

        findPanelLayout.setVerticalGroup(
            findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findDeptCodeLabel)
                    .addComponent(findDeptCodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findCurrentStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findCurrentStatusLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(findTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        findPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {findCurrentStatusComboBox, findDeptCodeComboBox});

        facultyDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Faculty details"));

        deptCodeLabel.setText("Dept. code *:");
        deptCodeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deptCodeLabelMouseEntered(evt);
            }
        });

        deptCodeCombo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        deptCodeCombo.setToolTipText("Click and select department code.");
        deptCodeCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deptCodeComboMouseEntered(evt);
            }
        });
        deptCodeCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deptCodeComboFocusGained(evt);
            }
        });

        yearOfBirthSpinner.setToolTipText("Select year.");
        yearOfBirthSpinner.setValue(1970);
        yearOfBirthSpinner.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                yearOfBirthSpinnerMouseEntered(evt);
            }
        });
        yearOfBirthSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                yearOfBirthSpinnerFocusGained(evt);
            }
        });
        yearOfBirthSpinner.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                yearOfBirthSpinnerKeyPressed(evt);
            }
        });

        DOJLabel.setText("DOJ :");
        DOJLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                DOJLabelMouseEntered(evt);
            }
        });

        dayOfjoinSpinner.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dayOfjoinSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 31, 1));
        dayOfjoinSpinner.setToolTipText("Select day.");
        dayOfjoinSpinner.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dayOfjoinSpinnerMouseEntered(evt);
            }
        });
        dayOfjoinSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dayOfjoinSpinnerFocusGained(evt);
            }
        });
        dayOfjoinSpinner.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dayOfjoinSpinnerKeyPressed(evt);
            }
        });

        AddressLabel.setText("Address :");
        AddressLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                AddressLabelMouseEntered(evt);
            }
        });

        dayOfBirthSpinner.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dayOfBirthSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 31, 1));
        dayOfBirthSpinner.setToolTipText("Select day.");
        dayOfBirthSpinner.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dayOfBirthSpinnerMouseEntered(evt);
            }
        });
        dayOfBirthSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dayOfBirthSpinnerFocusGained(evt);
            }
        });
        dayOfBirthSpinner.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dayOfBirthSpinnerKeyPressed(evt);
            }
        });

        qualificationText.setToolTipText("Qualification.");
        qualificationText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                qualificationTextMouseEntered(evt);
            }
        });
        qualificationText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                qualificationTextFocusGained(evt);
            }
        });
        qualificationText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                qualificationTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                qualificationTextKeyReleased(evt);
            }
        });

        monthOfBirthCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sep", "Oct", "Nov", "Dec" }));
        monthOfBirthCombo.setToolTipText("Select month.");
        monthOfBirthCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                monthOfBirthComboMouseEntered(evt);
            }
        });
        monthOfBirthCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                monthOfBirthComboFocusGained(evt);
            }
        });

        DOBLabel.setText("DOB :");
        DOBLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                DOBLabelMouseEntered(evt);
            }
        });

        genderLabel.setText("Gender *:");
        genderLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                genderLabelMouseEntered(evt);
            }
        });

        addressTextArea.setToolTipText("Address.");
        addressTextArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addressTextAreaMouseEntered(evt);
            }
        });
        addressTextArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addressTextAreaFocusGained(evt);
            }
        });
        addressTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addressTextAreaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                addressTextAreaKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(addressTextArea);

        qualificationLabel.setText("Qualification :");
        qualificationLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                qualificationLabelMouseEntered(evt);
            }
        });

        monthOfjoinCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sep", "Oct", "Nov", "Dec" }));
        monthOfjoinCombo.setToolTipText("Select month.");
        monthOfjoinCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                monthOfjoinComboMouseEntered(evt);
            }
        });
        monthOfjoinCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                monthOfjoinComboFocusGained(evt);
            }
        });

        fNameText.setToolTipText("First name.");
        fNameText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fNameTextMouseEntered(evt);
            }
        });
        fNameText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fNameTextFocusGained(evt);
            }
        });
        fNameText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fNameTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fNameTextKeyReleased(evt);
            }
        });

        yearOfJoinSpinner.setToolTipText("Select year.");
        yearOfJoinSpinner.setValue(2002);
        yearOfJoinSpinner.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                yearOfJoinSpinnerMouseEntered(evt);
            }
        });
        yearOfJoinSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                yearOfJoinSpinnerFocusGained(evt);
            }
        });
        yearOfJoinSpinner.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                yearOfJoinSpinnerKeyPressed(evt);
            }
        });

        lNameText.setToolTipText("Last name.");
        lNameText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lNameTextMouseEntered(evt);
            }
        });
        lNameText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lNameTextFocusGained(evt);
            }
        });
        lNameText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lNameTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lNameTextKeyReleased(evt);
            }
        });

        phoneLabel.setText("Phone number :");
        phoneLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                phoneLabelMouseEntered(evt);
            }
        });

        ufnLabel.setText("University faculty No. * :");
        ufnLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ufnLabelMouseEntered(evt);
            }
        });

        bad1.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad1.setForeground(new java.awt.Color(255, 0, 0));
        bad1.setText(" ");

        hostelText.setToolTipText("Room number.");
        hostelText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                hostelTextMouseEntered(evt);
            }
        });
        hostelText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                hostelTextFocusGained(evt);
            }
        });
        hostelText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hostelTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                hostelTextKeyReleased(evt);
            }
        });

        fnameLabel.setText("First name *:");
        fnameLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fnameLabelMouseEntered(evt);
            }
        });

        bad2.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad2.setForeground(new java.awt.Color(255, 0, 0));
        bad2.setText(" ");

        genderComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Male", "Female" }));
        genderComboBox.setToolTipText("Click and select gender of faculty.");
        genderComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                genderComboBoxMouseEntered(evt);
            }
        });
        genderComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                genderComboBoxFocusGained(evt);
            }
        });

        ufnText.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ufnText.setToolTipText("University faculty number.");
        ufnText.setMinimumSize(new java.awt.Dimension(6, 23));
        ufnText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ufnTextMouseEntered(evt);
            }
        });
        ufnText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ufnTextFocusGained(evt);
            }
        });
        ufnText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ufnTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ufnTextKeyReleased(evt);
            }
        });

        bad3.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad3.setForeground(new java.awt.Color(255, 0, 0));
        bad3.setText(" ");

        hostelliteCheckBox.setText("Hostelite");
        hostelliteCheckBox.setToolTipText("Select it for hostel faculty.");
        hostelliteCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                hostelliteCheckBoxMouseEntered(evt);
            }
        });
        hostelliteCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostelliteCheckBoxActionPerformed(evt);
            }
        });
        hostelliteCheckBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                hostelliteCheckBoxFocusGained(evt);
            }
        });

        bad4.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad4.setForeground(new java.awt.Color(255, 0, 0));
        bad4.setText(" ");

        lNameLabel.setText("Last name :");
        lNameLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lNameLabelMouseEntered(evt);
            }
        });

        bad5.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad5.setForeground(new java.awt.Color(255, 0, 0));
        bad5.setText(" ");

        phoneText.setToolTipText("Phone number.");
        phoneText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                phoneTextMouseEntered(evt);
            }
        });
        phoneText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                phoneTextFocusGained(evt);
            }
        });
        phoneText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                phoneTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                phoneTextKeyReleased(evt);
            }
        });

        bad6.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad6.setForeground(new java.awt.Color(255, 0, 0));
        bad6.setText(" ");

        emailIDLabel.setText("Email ID :");
        emailIDLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                emailIDLabelMouseEntered(evt);
            }
        });

        bad7.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad7.setForeground(new java.awt.Color(255, 0, 0));
        bad7.setText(" ");

        emailIDText.setToolTipText("Email ID.");
        emailIDText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                emailIDTextMouseEntered(evt);
            }
        });
        emailIDText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                emailIDTextFocusGained(evt);
            }
        });
        emailIDText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                emailIDTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                emailIDTextKeyReleased(evt);
            }
        });

        hostelComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "JBH", "SBH", "GH" }));
        hostelComboBox.setToolTipText("Hostel.");
        hostelComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                hostelComboBoxMouseEntered(evt);
            }
        });
        hostelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostelComboBoxActionPerformed(evt);
            }
        });
        hostelComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                hostelComboBoxFocusGained(evt);
            }
        });

        modifyButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        modifyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main_package/resources/Text-Edit-icon.png"))); // NOI18N
        modifyButton.setText("Modify");
        modifyButton.setToolTipText("<html>\nStep 1, Select a faculty.<br>\nStep 2, Click modify button.<br>\nStep 3, Modify the faculty details.<br>\nStep 4, Click save button.\n</html>");
        modifyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                modifyButtonMouseEntered(evt);
            }
        });
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });
        modifyButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                modifyButtonFocusGained(evt);
            }
        });
        modifyButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                modifyButtonKeyPressed(evt);
            }
        });

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main_package/resources/Button-cancel-icon.png"))); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.setToolTipText("Click to cancel modification.");
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancelButtonMouseEntered(evt);
            }
        });
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        cancelButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cancelButtonFocusGained(evt);
            }
        });
        cancelButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelButtonKeyPressed(evt);
            }
        });

        clearButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main_package/resources/Actions-edit-clear-icon.png"))); // NOI18N
        clearButton.setText("Clear");
        clearButton.setToolTipText("Click to clear the form feilds.");
        clearButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                clearButtonMouseEntered(evt);
            }
        });
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        clearButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearButtonFocusGained(evt);
            }
        });
        clearButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                clearButtonKeyPressed(evt);
            }
        });

        homeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main_package/resources/home-icon-small.png"))); // NOI18N
        homeButton.setText("Home");
        homeButton.setToolTipText("Click home button to go back to home.");
        homeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                homeButtonMouseEntered(evt);
            }
        });
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });
        homeButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                homeButtonFocusGained(evt);
            }
        });
        homeButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                homeButtonKeyPressed(evt);
            }
        });

        facultyPhotoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        facultyPhotoPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                facultyPhotoPanelMouseEntered(evt);
            }
        });

        photoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/defaultPhoto(3.5x4.5).jpg"))); // NOI18N
        photoLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        photoLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        photoLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                photoLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout facultyPhotoPanelLayout = new javax.swing.GroupLayout(facultyPhotoPanel);
        facultyPhotoPanel.setLayout(facultyPhotoPanelLayout);
        facultyPhotoPanelLayout.setHorizontalGroup(
            facultyPhotoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(facultyPhotoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(photoLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        facultyPhotoPanelLayout.setVerticalGroup(
            facultyPhotoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(facultyPhotoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(photoLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        currentStatusLabel.setText("Current status :");
        currentStatusLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                currentStatusLabelMouseEntered(evt);
            }
        });

        currentStatusComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Available", "On leave", "Left" }));
        currentStatusComboBox.setToolTipText("Click and select current status.");
        currentStatusComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                currentStatusComboBoxMouseEntered(evt);
            }
        });
        currentStatusComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                currentStatusComboBoxFocusGained(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main_package/resources/Actions-edit-delete-icon.png"))); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.setToolTipText("<html>\nStep 1, Select a faculty.<br>\nStep 2, Click delete button to delete the faculty.\n</html>");
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteButtonMouseEntered(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        deleteButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deleteButtonFocusGained(evt);
            }
        });
        deleteButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deleteButtonKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout facultyDetailsPanelLayout = new javax.swing.GroupLayout(facultyDetailsPanel);
        facultyDetailsPanel.setLayout(facultyDetailsPanelLayout);
        facultyDetailsPanelLayout.setHorizontalGroup(
            facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(facultyDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fnameLabel)
                    .addComponent(ufnLabel)
                    .addComponent(phoneLabel)
                    .addComponent(emailIDLabel)
                    .addComponent(qualificationLabel)
                    .addComponent(genderLabel)
                    .addComponent(lNameLabel)
                    .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(DOBLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deptCodeLabel, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(DOJLabel)
                    .addGroup(facultyDetailsPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(modifyButton)))
                .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(facultyDetailsPanelLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(facultyDetailsPanelLayout.createSequentialGroup()
                                .addComponent(dayOfjoinSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(monthOfjoinCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(yearOfJoinSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(facultyDetailsPanelLayout.createSequentialGroup()
                                .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(qualificationText, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(genderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ufnText, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bad2)
                                    .addComponent(bad3)
                                    .addComponent(bad1)
                                    .addComponent(bad4)))
                            .addGroup(facultyDetailsPanelLayout.createSequentialGroup()
                                .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(phoneText, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(facultyDetailsPanelLayout.createSequentialGroup()
                                        .addComponent(dayOfBirthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(monthOfBirthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(yearOfBirthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(emailIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(bad6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bad7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(deptCodeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(facultyDetailsPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(facultyDetailsPanelLayout.createSequentialGroup()
                                        .addComponent(hostelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(hostelText, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bad5))
                                    .addComponent(hostelliteCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AddressLabel)
                                    .addGroup(facultyDetailsPanelLayout.createSequentialGroup()
                                        .addComponent(currentStatusLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(currentStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(facultyDetailsPanelLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(facultyPhotoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(facultyDetailsPanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(cancelButton)
                        .addGap(18, 18, 18)
                        .addComponent(clearButton)
                        .addGap(18, 18, 18)
                        .addComponent(deleteButton)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(homeButton)
                        .addGap(0, 0, 0)))
                .addContainerGap())
        );

        facultyDetailsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deptCodeCombo, emailIDText, fNameText, genderComboBox, lNameText, phoneText, qualificationText, ufnText});

        facultyDetailsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, clearButton, deleteButton, homeButton, modifyButton});

        facultyDetailsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {monthOfBirthCombo, monthOfjoinCombo});

        facultyDetailsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dayOfBirthSpinner, dayOfjoinSpinner});

        facultyDetailsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {yearOfBirthSpinner, yearOfJoinSpinner});

        facultyDetailsPanelLayout.setVerticalGroup(
            facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(facultyDetailsPanelLayout.createSequentialGroup()
                .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(facultyDetailsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ufnText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bad1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ufnLabel))
                        .addGap(18, 18, 18)
                        .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bad2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fnameLabel))
                        .addGap(18, 18, 18)
                        .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bad3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lNameLabel))
                        .addGap(18, 18, 18)
                        .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(genderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(genderLabel))
                        .addGap(18, 18, 18)
                        .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(qualificationText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bad4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(qualificationLabel))
                        .addGap(18, 18, 18)
                        .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deptCodeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deptCodeLabel))
                        .addGap(18, 18, 18)
                        .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(yearOfBirthSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(dayOfBirthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(DOBLabel))
                            .addComponent(monthOfBirthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(yearOfJoinSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(dayOfjoinSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(monthOfjoinCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(DOJLabel))))
                    .addGroup(facultyDetailsPanelLayout.createSequentialGroup()
                        .addComponent(facultyPhotoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(currentStatusLabel)
                            .addComponent(currentStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(hostelliteCheckBox)
                        .addGap(18, 18, 18)
                        .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hostelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hostelText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bad5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AddressLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, facultyDetailsPanelLayout.createSequentialGroup()
                        .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(phoneText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bad6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(phoneLabel))
                        .addGap(17, 17, 17)
                        .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emailIDText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bad7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emailIDLabel))))
                .addGap(42, 42, 42)
                .addGroup(facultyDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(modifyButton)
                    .addComponent(cancelButton)
                    .addComponent(clearButton)
                    .addComponent(deleteButton)
                    .addComponent(homeButton))
                .addGap(26, 26, 26))
        );

        facultyDetailsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {deptCodeCombo, emailIDText, fNameText, genderComboBox, lNameText, phoneText, qualificationText, ufnText});

        facultyDetailsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cancelButton, clearButton, deleteButton, homeButton, modifyButton});

        facultyDetailsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {monthOfBirthCombo, monthOfjoinCombo});

        facultyDetailsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {dayOfBirthSpinner, dayOfjoinSpinner});

        facultyDetailsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {yearOfBirthSpinner, yearOfJoinSpinner});

        notification.setForeground(new java.awt.Color(51, 51, 251));
        notification.setText(" ");

        javax.swing.GroupLayout facultyDetailsMainPanelLayout = new javax.swing.GroupLayout(facultyDetailsMainPanel);
        facultyDetailsMainPanel.setLayout(facultyDetailsMainPanelLayout);
        facultyDetailsMainPanelLayout.setHorizontalGroup(
            facultyDetailsMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(facultyDetailsMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(facultyDetailsMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(facultyDetailsMainPanelLayout.createSequentialGroup()
                        .addComponent(findPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(facultyDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(facultyDetailsMainPanelLayout.createSequentialGroup()
                        .addComponent(notification, javax.swing.GroupLayout.PREFERRED_SIZE, 787, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        facultyDetailsMainPanelLayout.setVerticalGroup(
            facultyDetailsMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(facultyDetailsMainPanelLayout.createSequentialGroup()
                .addGroup(facultyDetailsMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(findPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(facultyDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notification))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(facultyDetailsMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(facultyDetailsMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void findDeptCodeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findDeptCodeComboBoxActionPerformed
        filter();
   }//GEN-LAST:event_findDeptCodeComboBoxActionPerformed

    private void findTextBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findTextBoxKeyReleased
        filter();
   }//GEN-LAST:event_findTextBoxKeyReleased

    private void deptCodeLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deptCodeLabelMouseEntered
        notification.setText("Department code.");
    }//GEN-LAST:event_deptCodeLabelMouseEntered

    private void deptCodeComboMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deptCodeComboMouseEntered
        notification.setText("Select department code.");
    }//GEN-LAST:event_deptCodeComboMouseEntered

    private void deptCodeComboFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deptCodeComboFocusGained
        notification.setText("Select department code.");
    }//GEN-LAST:event_deptCodeComboFocusGained

    private void DOJLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DOJLabelMouseEntered
        notification.setText("Date of join(DOJ).");
    }//GEN-LAST:event_DOJLabelMouseEntered

    private void dayOfjoinSpinnerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dayOfjoinSpinnerMouseEntered
        notification.setText("Select day of DOJ.");
    }//GEN-LAST:event_dayOfjoinSpinnerMouseEntered

    private void dayOfjoinSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dayOfjoinSpinnerFocusGained
        notification.setText("Select day of DOJ.");
    }//GEN-LAST:event_dayOfjoinSpinnerFocusGained

    private void dayOfjoinSpinnerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dayOfjoinSpinnerKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modifyButton.requestFocus();
        }
    }//GEN-LAST:event_dayOfjoinSpinnerKeyPressed

    private void AddressLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddressLabelMouseEntered
        notification.setText("Address.");
    }//GEN-LAST:event_AddressLabelMouseEntered

    private void dayOfBirthSpinnerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dayOfBirthSpinnerMouseEntered
        notification.setText("Select day of DOB.");
    }//GEN-LAST:event_dayOfBirthSpinnerMouseEntered

    private void dayOfBirthSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dayOfBirthSpinnerFocusGained
        notification.setText("Select day of DOB.");
    }//GEN-LAST:event_dayOfBirthSpinnerFocusGained

    private void dayOfBirthSpinnerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dayOfBirthSpinnerKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modifyButton.requestFocus();
        }
    }//GEN-LAST:event_dayOfBirthSpinnerKeyPressed

    private void qualificationTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_qualificationTextMouseEntered
        notification.setText("Enter qualification.");
    }//GEN-LAST:event_qualificationTextMouseEntered

    private void qualificationTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_qualificationTextFocusGained
        notification.setText("Enter qualification.");
    }//GEN-LAST:event_qualificationTextFocusGained

    private void qualificationTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qualificationTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modifyButton.requestFocus();
        }
    }//GEN-LAST:event_qualificationTextKeyPressed

    private void qualificationTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qualificationTextKeyReleased
        if (qualificationText.getText().length() > 50) {
            Toolkit.getDefaultToolkit().beep();
            qualificationText.setText(qualificationText.getText().substring(0, 50));
        }
        if (!qualificationText.getText().matches("[ -.(),a-zA-Z]*")) {
            bad4.setText("!");
        } else {
            bad4.setText(" ");
        }
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_SPACE) {
            return;
        }
    }//GEN-LAST:event_qualificationTextKeyReleased

    private void monthOfBirthComboMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_monthOfBirthComboMouseEntered
        notification.setText("Select month of DOB.");
    }//GEN-LAST:event_monthOfBirthComboMouseEntered

    private void monthOfBirthComboFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_monthOfBirthComboFocusGained
        notification.setText("Select month of DOB.");
    }//GEN-LAST:event_monthOfBirthComboFocusGained

    private void DOBLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DOBLabelMouseEntered
        notification.setText("Date of birth(DOB).");
    }//GEN-LAST:event_DOBLabelMouseEntered

    private void genderLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_genderLabelMouseEntered
        notification.setText("Gender.");
    }//GEN-LAST:event_genderLabelMouseEntered

    private void addressTextAreaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addressTextAreaMouseEntered
        notification.setText("Enter address.");
    }//GEN-LAST:event_addressTextAreaMouseEntered

    private void addressTextAreaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addressTextAreaFocusGained
        notification.setText("Enter adderss.");
    }//GEN-LAST:event_addressTextAreaFocusGained

    private void addressTextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addressTextAreaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addressTextArea.setText(addressTextArea.getText() + " ");
            evt.setKeyCode(KeyEvent.VK_BACK_SPACE);
        }
    }//GEN-LAST:event_addressTextAreaKeyPressed

    private void addressTextAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addressTextAreaKeyReleased
        if (addressTextArea.getText().length() > 500) {
            Toolkit.getDefaultToolkit().beep();
            addressTextArea.setText(addressTextArea.getText().substring(0, 500));
        }
    }//GEN-LAST:event_addressTextAreaKeyReleased

    private void qualificationLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_qualificationLabelMouseEntered
        notification.setText("Qualification.");
    }//GEN-LAST:event_qualificationLabelMouseEntered

    private void monthOfjoinComboMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_monthOfjoinComboMouseEntered
        notification.setText("Select month of DOJ.");
    }//GEN-LAST:event_monthOfjoinComboMouseEntered

    private void monthOfjoinComboFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_monthOfjoinComboFocusGained
        notification.setText("Select month of DOJ.");
    }//GEN-LAST:event_monthOfjoinComboFocusGained

    private void fNameTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fNameTextMouseEntered
        notification.setText("Enter first name.");
    }//GEN-LAST:event_fNameTextMouseEntered

    private void fNameTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fNameTextFocusGained
        notification.setText("Enter first name.");
    }//GEN-LAST:event_fNameTextFocusGained

    private void fNameTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fNameTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modifyButton.requestFocus();
        }
    }//GEN-LAST:event_fNameTextKeyPressed

    private void fNameTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fNameTextKeyReleased
        if (fNameText.getText().length() > 50) {
            Toolkit.getDefaultToolkit().beep();
            fNameText.setText(fNameText.getText().substring(0, 50));
        }
        if (!fNameText.getText().matches("[a-zA-Z][ .a-zA-Z]*")) {
            bad2.setText("!");
        } else {
            bad2.setText(" ");
        }
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_SPACE) {
            return;
        }
        fNameText.setText(toFullNameFormate(fNameText.getText()));
    }//GEN-LAST:event_fNameTextKeyReleased

    private void yearOfJoinSpinnerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yearOfJoinSpinnerMouseEntered
        notification.setText("Select year of DOJ.");
    }//GEN-LAST:event_yearOfJoinSpinnerMouseEntered

    private void yearOfJoinSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_yearOfJoinSpinnerFocusGained
        notification.setText("Select year of DOJ.");
    }//GEN-LAST:event_yearOfJoinSpinnerFocusGained

    private void yearOfJoinSpinnerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yearOfJoinSpinnerKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modifyButton.requestFocus();
        }
    }//GEN-LAST:event_yearOfJoinSpinnerKeyPressed

    private void lNameTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lNameTextMouseEntered
        notification.setText("Enter last name.");
    }//GEN-LAST:event_lNameTextMouseEntered

    private void lNameTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lNameTextFocusGained
        notification.setText("Enter last name.");
    }//GEN-LAST:event_lNameTextFocusGained

    private void lNameTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lNameTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modifyButton.requestFocus();
        }
    }//GEN-LAST:event_lNameTextKeyPressed

    private void lNameTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lNameTextKeyReleased
        if (lNameText.getText().length() > 50) {
            Toolkit.getDefaultToolkit().beep();
            lNameText.setText(lNameText.getText().substring(0, 50));
        }
        if (!lNameText.getText().matches("[ .a-zA-Z]*")) {
            bad3.setText("!");
        } else {
            bad3.setText(" ");
        }
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_SPACE) {
            return;
        }
        lNameText.setText(toFullNameFormate(lNameText.getText()));
    }//GEN-LAST:event_lNameTextKeyReleased

    private void phoneLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_phoneLabelMouseEntered
        notification.setText("Phone number.");
    }//GEN-LAST:event_phoneLabelMouseEntered

    private void ufnLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ufnLabelMouseEntered
        notification.setText("University faculty number (UFN).");
    }//GEN-LAST:event_ufnLabelMouseEntered

    private void hostelTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hostelTextMouseEntered
        notification.setText("Enter hostel room  number.");
    }//GEN-LAST:event_hostelTextMouseEntered

    private void hostelTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hostelTextFocusGained
        notification.setText("Enter hostel room  number.");
    }//GEN-LAST:event_hostelTextFocusGained

    private void hostelTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hostelTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modifyButton.requestFocus();
        }
    }//GEN-LAST:event_hostelTextKeyPressed

    private void hostelTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hostelTextKeyReleased
        if (hostelText.getText().length() > 7) {
            Toolkit.getDefaultToolkit().beep();
            hostelText.setText(hostelText.getText().substring(0, 7));
        }
        if (!hostelText.getText().matches("[-a-zA-Z0-9]*")) {
            bad5.setText("!");
        } else {
            bad5.setText(" ");
        }
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_LEFT) {
            return;
        }
        hostelText.setText(hostelText.getText().toUpperCase());
    }//GEN-LAST:event_hostelTextKeyReleased

    private void fnameLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fnameLabelMouseEntered
        notification.setText("First name.");
    }//GEN-LAST:event_fnameLabelMouseEntered

    private void genderComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_genderComboBoxMouseEntered
        notification.setText("Select gender.");
    }//GEN-LAST:event_genderComboBoxMouseEntered

    private void genderComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_genderComboBoxFocusGained
        notification.setText("Select gender.");
    }//GEN-LAST:event_genderComboBoxFocusGained

    private void ufnTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ufnTextMouseEntered
        notification.setText("Enter university faculty number.");
    }//GEN-LAST:event_ufnTextMouseEntered

    private void ufnTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ufnTextFocusGained
        notification.setText("Enter university faculty number.");
    }//GEN-LAST:event_ufnTextFocusGained

    private void ufnTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ufnTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modifyButton.requestFocus();
        }
    }//GEN-LAST:event_ufnTextKeyPressed

    private void ufnTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ufnTextKeyReleased
        if (ufnText.getText().length() > 15) {
            Toolkit.getDefaultToolkit().beep();
            ufnText.setText(ufnText.getText().substring(0, 15));
        }
        if (!ufnText.getText().matches("[a-zA-Z0-9][a-zA-Z0-9]*")) {
            bad1.setText("!");
        } else {
            bad1.setText(" ");
        }
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_LEFT) {
            return;
        }
        ufnText.setText(ufnText.getText().toUpperCase());
    }//GEN-LAST:event_ufnTextKeyReleased

    private void hostelliteCheckBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hostelliteCheckBoxMouseEntered
        notification.setText("Select if faculty is hostelite.");
    }//GEN-LAST:event_hostelliteCheckBoxMouseEntered

    private void hostelliteCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostelliteCheckBoxActionPerformed
        if (hostelliteCheckBox.isSelected()) {
            hostelComboBox.setEnabled(true);
            hostelText.setEnabled(true);
            hostelText.requestFocus();
            hostelComboBox.requestFocus();
        } else {
            hostelComboBox.setEnabled(false);
            hostelliteCheckBox.requestFocus();
            hostelText.setText(null);
            hostelText.setEnabled(false);
            bad5.setText(" ");
        }
    }//GEN-LAST:event_hostelliteCheckBoxActionPerformed

    private void hostelliteCheckBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hostelliteCheckBoxFocusGained
        notification.setText("Select if faculty is hostelite.");
    }//GEN-LAST:event_hostelliteCheckBoxFocusGained

    private void lNameLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lNameLabelMouseEntered
        notification.setText("Last name.");
    }//GEN-LAST:event_lNameLabelMouseEntered

    private void phoneTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_phoneTextMouseEntered
        notification.setText("Enter phone number.");
    }//GEN-LAST:event_phoneTextMouseEntered

    private void phoneTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_phoneTextFocusGained
        notification.setText("Enter phone number.");
    }//GEN-LAST:event_phoneTextFocusGained

    private void phoneTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modifyButton.requestFocus();
        }
    }//GEN-LAST:event_phoneTextKeyPressed

    private void phoneTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneTextKeyReleased
        if (phoneText.getText().length() > 15) {
            Toolkit.getDefaultToolkit().beep();
            phoneText.setText(phoneText.getText().substring(0, 15));
        }
        if (!phoneText.getText().matches("[+]?[0-9]+(-[0-9][0-9]*)*[0-9]*")) {
            bad6.setText("!");
        } else {
            bad6.setText(" ");
        }
        if ("".equals(phoneText.getText())) {
            bad6.setText(" ");
        }
    }//GEN-LAST:event_phoneTextKeyReleased

    private void emailIDLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emailIDLabelMouseEntered
        notification.setText("Email ID.");
    }//GEN-LAST:event_emailIDLabelMouseEntered

    private void emailIDTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emailIDTextMouseEntered
        notification.setText("Enter email id.");
    }//GEN-LAST:event_emailIDTextMouseEntered

    private void emailIDTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailIDTextFocusGained
        notification.setText("Enter email id.");
    }//GEN-LAST:event_emailIDTextFocusGained

    private void emailIDTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailIDTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modifyButton.requestFocus();
        }
    }//GEN-LAST:event_emailIDTextKeyPressed

    private void emailIDTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailIDTextKeyReleased
        if (emailIDText.getText().length() > 50) {
            Toolkit.getDefaultToolkit().beep();
            emailIDText.setText(emailIDText.getText().substring(0, 50));
        }
        if (!emailIDText.getText().matches("^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$")) {
            bad7.setText("!");
        } else {
            bad7.setText(" ");
        }
        if ("".equals(emailIDText.getText())) {
            bad7.setText(" ");
        }
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_LEFT) {
            return;
        }
        emailIDText.setText(emailIDText.getText().toLowerCase());
    }//GEN-LAST:event_emailIDTextKeyReleased

    private void hostelComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hostelComboBoxMouseEntered
        notification.setText("Select hostel.");
    }//GEN-LAST:event_hostelComboBoxMouseEntered

    private void hostelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostelComboBoxActionPerformed
        hostelText.requestFocus();
    }//GEN-LAST:event_hostelComboBoxActionPerformed

    private void hostelComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hostelComboBoxFocusGained
        notification.setText("Select hostel.");
    }//GEN-LAST:event_hostelComboBoxFocusGained

    private void photoLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_photoLabelMouseClicked
        if (ufnText.isEditable()) {
            showDialog();
        }
    }//GEN-LAST:event_photoLabelMouseClicked

    private void facultyPhotoPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_facultyPhotoPanelMouseEntered
    }//GEN-LAST:event_facultyPhotoPanelMouseEntered

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        Run.Runner.RunnerObj.MainUIObj.show();
        this.dispose();
        Run.Runner.RunnerObj.MainUIObj.ViewFacultyObj = null;
    }//GEN-LAST:event_homeButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        homeButton.doClick();
    }//GEN-LAST:event_formWindowClosing

    private void findCurrentStatusComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findCurrentStatusComboBoxActionPerformed
        filter();
    }//GEN-LAST:event_findCurrentStatusComboBoxActionPerformed

    private void findTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findTableMouseClicked
        if (findTable.isEnabled()) {
            if (findTable.getRowCount() > 0) {
                fillFormFeild();
            }
        }
    }//GEN-LAST:event_findTableMouseClicked

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clear();
        ufnText.requestFocus();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void yearOfBirthSpinnerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yearOfBirthSpinnerKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modifyButton.requestFocus();
        }
    }//GEN-LAST:event_yearOfBirthSpinnerKeyPressed

    private void yearOfBirthSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_yearOfBirthSpinnerFocusGained
        notification.setText("Select year of DOB.");
    }//GEN-LAST:event_yearOfBirthSpinnerFocusGained

    private void yearOfBirthSpinnerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yearOfBirthSpinnerMouseEntered
        notification.setText("Select year of DOB.");
    }//GEN-LAST:event_yearOfBirthSpinnerMouseEntered

    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        if (findTable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a faculty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if ("Modify".equals(modifyButton.getText())) {
            if (!findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString().equals(ufnText.getText())) {
                JOptionPane.showMessageDialog(null, "Please make sure your selection.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            newEnable();
        } else {
            if ("".equals(ufnText.getText())) {
                JOptionPane.showMessageDialog(null, "University faculty No. field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                ufnText.requestFocus();
                return;
            }
            if ("!".equals(bad1.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate UFN.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                ufnText.requestFocus();
                return;
            }
            if ("".equals(fNameText.getText())) {
                JOptionPane.showMessageDialog(null, "First name field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                fNameText.requestFocus();
                return;
            }
            if ("!".equals(bad2.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate first name.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                fNameText.requestFocus();
                return;
            }
            if ("!".equals(bad3.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate last name.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                lNameText.requestFocus();
                return;
            }
            if ("!".equals(bad4.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate qualification.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                qualificationText.requestFocus();
                return;
            }
            if (hostelliteCheckBox.isSelected()) {
                if ("!".equals(bad5.getText())) {
                    JOptionPane.showMessageDialog(null, "Please validate hostal room number.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                    hostelText.requestFocus();
                    return;
                }
            }
            if ("!".equals(bad6.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate phone number.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                phoneText.requestFocus();
                return;
            }
            if ("!".equals(bad7.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate email id.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                emailIDText.requestFocus();
                return;
            }

            String ufn = ufnText.getText();
            String fname = fNameText.getText();
            String lname = lNameText.getText();
            String sex1 = (String) genderComboBox.getSelectedItem();
            String sex = "M";
            if (sex1.equals("Female")) {
                sex = "F";
            }
            String qualification = qualificationText.getText();
            String DOB = yearOfBirthSpinner.getValue() + "-" + Integer.toString(monthOfBirthCombo.getSelectedIndex() + 1) + "-" + dayOfBirthSpinner.getValue().toString();
            if (isValidDateStr(DOB) == false) {
                JOptionPane.showMessageDialog(null, "Please validate DOB.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                dayOfBirthSpinner.requestFocus();
                return;
            }
            String DOJ = yearOfJoinSpinner.getValue() + "-" + Integer.toString(monthOfjoinCombo.getSelectedIndex() + 1) + "-" + dayOfjoinSpinner.getValue().toString();
            if (isValidDateStr(DOJ) == false) {
                JOptionPane.showMessageDialog(null, "Please validate DOJ.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                dayOfjoinSpinner.requestFocus();
                return;
            }
            String address = addressTextArea.getText();
            String d_deptCode = (String) deptCodeCombo.getSelectedItem();
            String phone = phoneText.getText();
            String emailID = emailIDText.getText();
            String currentStatus = currentStatusComboBox.getSelectedItem().toString();
            String hostellite = null;
            if (hostelliteCheckBox.isSelected()) {
                hostellite = (String) hostelComboBox.getSelectedItem() + hostelText.getText();
            } else {
                hostellite = "";
            }
            String sql = "update faculty set UFN=\"" + (ufn) + "\",FName=\"" + (fname) + "\",LName=\"" + (lname) + "\",Sex=\"" + (sex) + "\",Qualification=\"" + (qualification) + "\",DOB=\"" + (DOB) + "\",DOJ=\"" + (DOJ) + "\",Address=\"" + (address) + "\",D_DeptCode=\"" + (d_deptCode) + "\",PhoneNum=\"" + (phone) + "\" , Image=(?) , EmainID=\"" + emailID + "\",Availability=\"" + (currentStatus) + "\",Hostelite=\"" + (hostellite) + "\" where UFN=\"" + ((String) findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0) + "\"");
            PreparedStatement psmnt = null;
            try {
                psmnt = dbConnect.getCon().prepareStatement(sql);
            } catch (SQLException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            FileInputStream fis = null;
            try {
                if (myFile != null) {
                    fis = new FileInputStream(myFile);
                    try {
                        psmnt.setBinaryStream(1, (InputStream) fis, (int) (myFile.length()));
                    } catch (SQLException ex) {
                        Toolkit.getDefaultToolkit().beep();
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    try {
                        psmnt.setBytes(1, bytes);
                    } catch (SQLException ex) {
                        Toolkit.getDefaultToolkit().beep();
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (FileNotFoundException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            int updateSuccessful = 0;

            try {
                updateSuccessful = psmnt.executeUpdate();
            } catch (SQLException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            if (updateSuccessful == 1) {
                refillForm();
                newDisable();
                JOptionPane.showMessageDialog(null, "Faculty details successfully modified.", "Information", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Faculty details modification not successful.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_modifyButtonActionPerformed

    private void findTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findTableKeyReleased
        if (findTable.isEnabled()) {
            if (findTable.getRowCount() > 0) {
                fillFormFeild();
            }
        }
    }//GEN-LAST:event_findTableKeyReleased

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        fillFormFeild();
        newDisable();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (findTable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a department.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (!findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString().equals(ufnText.getText())) {
            JOptionPane.showMessageDialog(null, "Please make sure your selection.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        findTable.setSelectionBackground(new java.awt.Color(255, 0, 0));
        authenticationDialog dialog = new authenticationDialog(new javax.swing.JFrame(), true, "<html>Note : If you delete this faculty all subject handling also<br>will get deleted.</html>");
        dialog.setTitle("Delete ?");
        dialog.setVisible(true);
        int returnStatus = dialog.returnStatus;
        dialog.dispose();
        if (returnStatus == 1) {
            int successful = 0;
            String ufn = findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString();
            String sql = "delete from faculty where UFN=\"" + ufn + "\"";

            try {
                successful = dbConnect.getCon().createStatement().executeUpdate(sql);
            } catch (SQLException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

            if (successful == 1) {
                removeSelectedRows(findTable);
                filter();
                JOptionPane.showMessageDialog(null, "Faculty with UFN=\"" + ufn + "\" is succeessfully deleted.", "Information", JOptionPane.INFORMATION_MESSAGE);
            } else {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, "Faculty with UFN=\"" + ufn + "\" is not deleted.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            clearButton.doClick();
        }
        findTable.setSelectionBackground(new java.awt.Color(0, 102, 153));
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void findDeptCodeLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findDeptCodeLabelMouseEntered
        notification.setText("Department code.");
    }//GEN-LAST:event_findDeptCodeLabelMouseEntered

    private void findCurrentStatusLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findCurrentStatusLabelMouseEntered
        notification.setText("Current status.");
    }//GEN-LAST:event_findCurrentStatusLabelMouseEntered

    private void findDeptCodeComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findDeptCodeComboBoxMouseEntered
        notification.setText("Select department code to filter faculty.");
    }//GEN-LAST:event_findDeptCodeComboBoxMouseEntered

    private void findDeptCodeComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_findDeptCodeComboBoxFocusGained
        notification.setText("Select department code to filter faculty.");
    }//GEN-LAST:event_findDeptCodeComboBoxFocusGained

    private void findCurrentStatusComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_findCurrentStatusComboBoxFocusGained
        notification.setText("Select current status to filter faculty.");
    }//GEN-LAST:event_findCurrentStatusComboBoxFocusGained

    private void findCurrentStatusComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findCurrentStatusComboBoxMouseEntered
        notification.setText("Select current status to filter faculty.");
    }//GEN-LAST:event_findCurrentStatusComboBoxMouseEntered

    private void findTextBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findTextBoxMouseEntered
        notification.setText("Enter text to filter faculty.");
    }//GEN-LAST:event_findTextBoxMouseEntered

    private void findTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_findTextBoxFocusGained
        notification.setText("Enter text to filter faculty.");
    }//GEN-LAST:event_findTextBoxFocusGained

    private void findTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findTableMouseEntered
        notification.setText("Select a faculty to view details.");
    }//GEN-LAST:event_findTableMouseEntered

    private void findTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_findTableFocusGained
        notification.setText("Select a faculty to view details.");
    }//GEN-LAST:event_findTableFocusGained

    private void modifyButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modifyButtonMouseEntered
        notification.setText("To modify the faculty details.");
    }//GEN-LAST:event_modifyButtonMouseEntered

    private void modifyButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_modifyButtonFocusGained
        notification.setText("To modify the faculty details.");
    }//GEN-LAST:event_modifyButtonFocusGained

    private void cancelButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseEntered
        notification.setText("To cancel modification.");
    }//GEN-LAST:event_cancelButtonMouseEntered

    private void cancelButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cancelButtonFocusGained
        notification.setText("To cancel modification.");
    }//GEN-LAST:event_cancelButtonFocusGained

    private void clearButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_clearButtonFocusGained
        notification.setText("To clear form feilds.");
    }//GEN-LAST:event_clearButtonFocusGained

    private void clearButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearButtonMouseEntered
        notification.setText("To clear form feilds.");
    }//GEN-LAST:event_clearButtonMouseEntered

    private void deleteButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseEntered
        notification.setText("To delete selected faculty.");
    }//GEN-LAST:event_deleteButtonMouseEntered

    private void deleteButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deleteButtonFocusGained
        notification.setText("To delete selected faculty.");
    }//GEN-LAST:event_deleteButtonFocusGained

    private void homeButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_homeButtonFocusGained
        notification.setText("Go back to home.");
    }//GEN-LAST:event_homeButtonFocusGained

    private void homeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeButtonMouseEntered
        notification.setText("Go back to home.");
    }//GEN-LAST:event_homeButtonMouseEntered

    private void findTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findTextBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            findTable.requestFocus();
        }
    }//GEN-LAST:event_findTextBoxKeyPressed

    private void findTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findTableKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            findTextBox.requestFocus();
        }
    }//GEN-LAST:event_findTableKeyPressed

    private void modifyButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_modifyButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modifyButton.doClick();
        }
    }//GEN-LAST:event_modifyButtonKeyPressed

    private void cancelButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cancelButton.doClick();
        }
    }//GEN-LAST:event_cancelButtonKeyPressed

    private void clearButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clearButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            clearButton.doClick();
        }
    }//GEN-LAST:event_clearButtonKeyPressed

    private void deleteButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deleteButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            deleteButton.doClick();
        }
    }//GEN-LAST:event_deleteButtonKeyPressed

    private void homeButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_homeButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            homeButton.doClick();
        }
    }//GEN-LAST:event_homeButtonKeyPressed

    private void currentStatusLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentStatusLabelMouseEntered
        notification.setText("Current status.");
    }//GEN-LAST:event_currentStatusLabelMouseEntered

    private void currentStatusComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentStatusComboBoxMouseEntered
        notification.setText("Select current status.");
    }//GEN-LAST:event_currentStatusComboBoxMouseEntered

    private void currentStatusComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_currentStatusComboBoxFocusGained
        notification.setText("Select current status.");
    }//GEN-LAST:event_currentStatusComboBoxFocusGained
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AddressLabel;
    private javax.swing.JLabel DOBLabel;
    private javax.swing.JLabel DOJLabel;
    private javax.swing.JTextPane addressTextArea;
    private javax.swing.JLabel bad1;
    private javax.swing.JLabel bad2;
    private javax.swing.JLabel bad3;
    private javax.swing.JLabel bad4;
    private javax.swing.JLabel bad5;
    private javax.swing.JLabel bad6;
    private javax.swing.JLabel bad7;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JComboBox currentStatusComboBox;
    private javax.swing.JLabel currentStatusLabel;
    public static javax.swing.JSpinner dayOfBirthSpinner;
    public static javax.swing.JSpinner dayOfjoinSpinner;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox deptCodeCombo;
    private javax.swing.JLabel deptCodeLabel;
    private javax.swing.JLabel emailIDLabel;
    private javax.swing.JTextField emailIDText;
    private javax.swing.JTextField fNameText;
    private javax.swing.JPanel facultyDetailsMainPanel;
    private javax.swing.JPanel facultyDetailsPanel;
    private javax.swing.JPanel facultyPhotoPanel;
    private javax.swing.JComboBox findCurrentStatusComboBox;
    private javax.swing.JLabel findCurrentStatusLabel;
    private javax.swing.JComboBox findDeptCodeComboBox;
    private javax.swing.JLabel findDeptCodeLabel;
    private javax.swing.JPanel findPanel;
    private javax.swing.JTable findTable;
    private javax.swing.JTextField findTextBox;
    private javax.swing.JLabel fnameLabel;
    private javax.swing.JComboBox genderComboBox;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JButton homeButton;
    private javax.swing.JComboBox hostelComboBox;
    private javax.swing.JTextField hostelText;
    private javax.swing.JCheckBox hostelliteCheckBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lNameLabel;
    private javax.swing.JTextField lNameText;
    private javax.swing.JButton modifyButton;
    public static javax.swing.JComboBox monthOfBirthCombo;
    public static javax.swing.JComboBox monthOfjoinCombo;
    private javax.swing.JLabel notification;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JTextField phoneText;
    private javax.swing.JLabel photoLabel;
    private javax.swing.JLabel qualificationLabel;
    private javax.swing.JTextField qualificationText;
    private javax.swing.JLabel ufnLabel;
    private javax.swing.JTextField ufnText;
    public static com.toedter.calendar.JYearChooser yearOfBirthSpinner;
    public static com.toedter.calendar.JYearChooser yearOfJoinSpinner;
    // End of variables declaration//GEN-END:variables

    private void showDialog() {
        BufferedImage image = null, scaledImage = null;
        JFileChooser imageChooser;

        if (Run.Runner.RunnerObj.prevDirectory == null) {
            imageChooser = new JFileChooser();
        } else {
            imageChooser = new JFileChooser(Run.Runner.RunnerObj.prevDirectory);
        }

        imageChooser.setAcceptAllFileFilterUsed(false);
        imageChooser.addChoosableFileFilter(new MyImageFilter());

        int retVal = imageChooser.showOpenDialog(this);
        if (retVal == JFileChooser.APPROVE_OPTION) {
            myFile = imageChooser.getSelectedFile();
            //find out the file type
            String fileName = myFile.getName();
            File file = imageChooser.getSelectedFile();
            Run.Runner.RunnerObj.prevDirectory = file.getParent();
            int dotPos = fileName.lastIndexOf(".") + 1;
            String extension = fileName.substring(dotPos);
            try {
                image = ImageIO.read(myFile);
                scaledImage = main_package.MainUI.getScaledImageObj.getScaledImage(image);
                myFile = new File(getClass().getResource("/main_package/resources/temp.jpg").getFile());
                ImageIO.write(scaledImage, extension, myFile);
                photoLabel.setIcon(new ImageIcon(scaledImage));
            } catch (IOException e) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private String toNameFormate(String name, int lower) {
        if ("".equals(name)) {
            return name;
        }
        if (lower == 1) {
            name = name.toLowerCase();
        }
        name = name.replaceFirst(Character.toString(name.charAt(0)), Character.toString(name.toUpperCase().charAt(0)));
        return name;
    }

    private String toFullNameFormate(String name) {
        name = name.toLowerCase();
        String tempText[] = name.split("\\ ");
        name = "";
        for (int i = 0; i < tempText.length; i++) {
            name += toNameFormate(tempText[i], 1) + " ";
        }
        String tempText2[] = name.split("\\.");
        name = "";
        for (int i = 0; i < tempText2.length; i++) {
            name += toNameFormate(tempText2[i], 0) + ".";
        }
        name = name.substring(0, name.length() - 2);
        return name;
    }

    private void fillDeptCode() {
        DefaultComboBoxModel modelComboBox = new DefaultComboBoxModel();
        deptCodeCombo.setModel(modelComboBox);

        String sql = "Select DeptCode from department order by DeptName";
        try {
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            while (rs.next()) {
                modelComboBox.addElement(rs.getString("DeptCode"));
            }
            rs.close();
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void fillFindDepartmentcomboBox() {
        DefaultComboBoxModel modelComboBox = new DefaultComboBoxModel();
        findDeptCodeComboBox.setModel(modelComboBox);
        modelComboBox.addElement("All");

        String sql = "Select DeptCode from department order by DeptName";
        try {
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            while (rs.next()) {
                modelComboBox.addElement(rs.getString("DeptCode"));
            }
            rs.close();
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void fillFindTable() {
        try {
            DefaultTableModel model = (DefaultTableModel) findTable.getModel();
            model.getDataVector().removeAllElements();
            String sql = "Select UFN,FName,LName,D_DeptCode,Availability from faculty order by FName,LName";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            while (rs.next()) {
                String ufn = rs.getString("UFN");
                String name = rs.getString("LName") == null ? rs.getString("FName") : rs.getString("FName") + " " + rs.getString("LName");
                String deptCode = rs.getString("D_DeptCode");
                String status = rs.getString("Availability");
                model.addRow(new Object[]{ufn, name, deptCode, status});
            }
            rs.close();
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void filter() {
        String deptCode = findDeptCodeComboBox.getSelectedItem().toString();
        String currentStatus = findCurrentStatusComboBox.getSelectedItem().toString();
        String userText = findTextBox.getText();

        if ("All".equals(deptCode)) {
            deptCode = "";
        }
        if ("All".equals(currentStatus)) {
            currentStatus = "";
        }

        ArrayList<RowFilter<Object, Object>> andFilters = new ArrayList<RowFilter<Object, Object>>();
        andFilters.add(RowFilter.regexFilter("(?i)" + userText, 0, 1));
        andFilters.add(RowFilter.regexFilter("(?i)" + deptCode, 2));
        andFilters.add(RowFilter.regexFilter("(?i)" + currentStatus, 3));

        DefaultTableModel model = (DefaultTableModel) findTable.getModel();
        final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
        sorter.setRowFilter(RowFilter.andFilter(andFilters));
        findTable.setRowSorter(sorter);

        if (findTable.getRowCount() > 0) {
            findTable.getSelectionModel().setSelectionInterval(0, 0);
            ufnText.setForeground(Color.black);
            fillFormFeild();
            findTextBox.requestFocus();
        } else {
            clear();
            Toolkit.getDefaultToolkit().beep();
            ufnText.setForeground(Color.red);
            ufnText.setText("No match found.");
            findTextBox.requestFocus();
        }
    }
    private byte[] bytes = null;

    private void fillFormFeild() {
        try {
            String sql = "select * from faculty where UFN=\"" + findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString() + "\"";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            Image facultyPhoto = null;
            while (rs.next()) {
                ufnText.setText(rs.getString("UFN"));
                fNameText.setText(rs.getString("FName"));
                lNameText.setText(rs.getString("LName"));
                genderComboBox.setSelectedItem("M".equals(rs.getString("Sex")) ? "Male" : "Female");
                qualificationText.setText(rs.getString("Qualification"));
                String DOB[] = rs.getString("DOB").split("\\-");
                dayOfBirthSpinner.setValue(Integer.parseInt(DOB[2]));
                monthOfBirthCombo.setSelectedIndex(Integer.parseInt(DOB[1]) - 1);
                yearOfBirthSpinner.setValue(Integer.parseInt(DOB[0]));
                String DOJ[] = rs.getString("DOJ").split("\\-");
                dayOfjoinSpinner.setValue(Integer.parseInt(DOJ[2]));
                monthOfjoinCombo.setSelectedIndex(Integer.parseInt(DOJ[1]) - 1);
                yearOfJoinSpinner.setValue(Integer.parseInt(DOJ[0]));
                addressTextArea.setText(rs.getString("Address"));
                deptCodeCombo.setSelectedItem(rs.getString("D_DeptCode"));
                phoneText.setText(rs.getString("PhoneNum"));
                bytes = rs.getBytes("Image");
                if (bytes != null) {
                    facultyPhoto = this.getToolkit().createImage(bytes);
                    ImageIcon icon = new ImageIcon(facultyPhoto);
                    photoLabel.setIcon(icon);
                } else {
                    photoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/defaultPhoto(3.5x4.5).jpg")));
                }
                emailIDText.setText(rs.getString("EmainID"));
                currentStatusComboBox.setSelectedItem(rs.getString("Availability"));
                String hostel = rs.getString("Hostelite");

                if ("".equals(hostel)) {
                    hostelliteCheckBox.setSelected(false);
                    hostelComboBox.setSelectedIndex(0);
                    hostelText.setText(null);
                } else {
                    hostelliteCheckBox.setSelected(true);
                    hostelComboBox.setSelectedItem(hostel.substring(0, 3));
                    hostelText.setText(hostel.substring(3));
                }
            }
            rs.close();
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void newDisable() {
        ufnText.setEditable(false);
        fNameText.setEditable(false);
        lNameText.setEditable(false);
        qualificationText.setEditable(false);
        phoneText.setEditable(false);
        emailIDText.setEditable(false);
        addressTextArea.setEditable(false);
        genderComboBox.setEnabled(false);
        deptCodeCombo.setEnabled(false);
        dayOfBirthSpinner.setEnabled(false);
        monthOfBirthCombo.setEnabled(false);
        yearOfBirthSpinner.setEnabled(false);
        dayOfjoinSpinner.setEnabled(false);
        monthOfjoinCombo.setEnabled(false);
        yearOfJoinSpinner.setEnabled(false);
        currentStatusComboBox.setEnabled(false);
        hostelliteCheckBox.setEnabled(false);
        hostelComboBox.setEnabled(false);
        hostelText.setEnabled(false);
        facultyPhotoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        photoLabel.setCursor(Cursor.getPredefinedCursor(DEFAULT_CURSOR));
        photoLabel.setToolTipText(null);
        cancelButton.setEnabled(false);
        clearButton.setEnabled(false);
        deleteButton.setEnabled(true);
        modifyButton.setText("Modify");
        findTextBox.setEditable(true);
        findTable.setEnabled(true);
        findCurrentStatusComboBox.setEnabled(true);
        findDeptCodeComboBox.setEnabled(true);
        findTextBox.requestFocus();
    }

    private void newEnable() {
        ufnText.setEditable(true);
        fNameText.setEditable(true);
        lNameText.setEditable(true);
        qualificationText.setEditable(true);
        phoneText.setEditable(true);
        emailIDText.setEditable(true);
        addressTextArea.setEditable(true);
        genderComboBox.setEnabled(true);
        deptCodeCombo.setEnabled(true);
        dayOfBirthSpinner.setEnabled(true);
        monthOfBirthCombo.setEnabled(true);
        yearOfBirthSpinner.setEnabled(true);
        dayOfjoinSpinner.setEnabled(true);
        monthOfjoinCombo.setEnabled(true);
        yearOfJoinSpinner.setEnabled(true);
        currentStatusComboBox.setEnabled(true);
        hostelliteCheckBox.setEnabled(true);
        if (hostelliteCheckBox.isSelected()) {
            hostelComboBox.setEnabled(true);
            hostelText.setEnabled(true);
        }
        facultyPhotoPanel.setBorder(javax.swing.BorderFactory.createLineBorder(Color.yellow, 2));
        photoLabel.setToolTipText("Click here to select a new photo.");
        photoLabel.setCursor(Cursor.getPredefinedCursor(HAND_CURSOR));
        cancelButton.setEnabled(true);
        clearButton.setEnabled(true);
        deleteButton.setEnabled(false);
        modifyButton.setText("Save");
        findTextBox.setEditable(false);
        findTable.setEnabled(false);
        findCurrentStatusComboBox.setEnabled(false);
        findDeptCodeComboBox.setEnabled(false);
        ufnText.requestFocus();
    }

    public void removeSelectedRows(JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int[] rows = table.getSelectedRows();
        for (int i = 0; i < rows.length; i++) {
            model.removeRow(table.convertRowIndexToModel(rows[i]) - i);
        }
    }

    private void refillForm() {
        removeSelectedRows(findTable);
        try {
            DefaultTableModel model = (DefaultTableModel) findTable.getModel();
            String sql = "Select UFN,FName,LName,D_DeptCode,Availability from faculty where UFN=\"" + ufnText.getText() + "\" order by FName,LName";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            while (rs.next()) {
                String ufn = rs.getString("UFN");
                String name = rs.getString("LName") == null ? rs.getString("FName") : rs.getString("FName") + " " + rs.getString("LName");
                String deptCode = rs.getString("D_DeptCode");
                String status = rs.getString("Availability");
                model.addRow(new Object[]{ufn, name, deptCode, status});
            }
            rs.close();
        } catch (SQLException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        if (findTable.getRowCount() > 0) {
            findTable.getSelectionModel().setSelectionInterval(findTable.getRowCount() - 1, findTable.getRowCount() - 1);
            fillFormFeild();
        } else {
            clear();
            findTextBox.requestFocus();
        }
    }

    private boolean isValidDateStr(String date) {
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.setLenient(false);
            sdf.parse(date);
        } catch (ParseException e) {
            return false;
        } catch (IllegalArgumentException e) {
            return false;
        }
        return true;
    }

    private void clear() {
        ufnText.setText(null);
        fNameText.setText(null);
        lNameText.setText(null);
        genderComboBox.setSelectedIndex(0);
        qualificationText.setText(null);
        deptCodeCombo.setSelectedIndex(0);
        phoneText.setText(null);
        emailIDText.setText(null);
        hostelliteCheckBox.setSelected(false);
        hostelComboBox.setSelectedIndex(0);
        hostelText.setText(null);
        hostelComboBox.setEnabled(false);
        hostelText.setEnabled(false);
        addressTextArea.setText(null);
        dayOfBirthSpinner.setValue(1);
        monthOfBirthCombo.setSelectedIndex(0);
        yearOfBirthSpinner.setValue(1970);
        dayOfjoinSpinner.setValue(1);
        monthOfjoinCombo.setSelectedIndex(0);
        yearOfJoinSpinner.setValue(2002);
        currentStatusComboBox.setSelectedIndex(0);
        photoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/defaultPhoto(3.5x4.5).jpg")));
        bad1.setText(" ");
        bad2.setText(" ");
        bad3.setText(" ");
        bad4.setText(" ");
        bad5.setText(" ");
        bad6.setText(" ");
        bad7.setText(" ");
    }

    private void hierarchy() {
        String privilege = Runner.RunnerObj.MainUIObj.getPrivilege();
        if (!"admin".equalsIgnoreCase(privilege)) {
            modifyButton.hide();
            deleteButton.hide();
            cancelButton.hide();
            clearButton.hide();
        }
    }
}
