/*
 * Form :StudentViewAndModification
 * version=0.4.1
 * Updated: 9-08-2012 at 11.26 PM
 *          12.08-2012 6.09
 *          14-08-2012 10.35 PM
 *          14-08-2012 11.26 PM (Table selection control ang rowcount).
 *          15-08-2012 1.06 AM Modify button name.
 *          15-08-2012 6.02 NameLabel resizing problem solved.
 *          16-08-2012 12.33 USN regular expresion modified.
 * 16-08-2012
 * 17-08-2012 at 10.04 find table click and key release
 * 18-08-2012 at 1.42 PM delete button refilling bug fixed.
 * 18-08-2012 at 9.47 PM make sure selection
 * 23-08-2012 at 2.02 AM delete tune added.
 * 22-08-12  at 3.30
 * 23-08-2012 at 2.43 AM delete buttone color
 * 24-08-2012 at 2.19 AM Fullty updated bug fixed....(hierarchy)
 * 25-08-2012 at 1.13 AM icon
 * 27-08-2012 at 12.52 AM find table query updated
 * 1-09-2012 at 12.49 Am littile change in interface
 * 1-09-2012 11.36 PM showDialog
 * 2-09-2012 at 12.01 am littile change in interface
 * 3-9-2012 at 2.55 pm kill object.
 */
package studentDetails;

import Misc.MyImageFilter;
import Run.Runner;
import Run.dbConnect;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.*;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import main_package.NewOkCancelDialog;

/**
 *
 * @author V4 Creations
 */
public class StudentViewAndModification extends javax.swing.JFrame {

    /**
     * Creates new form StudentViewAndModification
     */
    List<TableCellEditor> editors = new ArrayList<TableCellEditor>(7);
    public static StudentViewAndModification studViewPointer;

    public StudentViewAndModification() {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/main_package/resources/icon.png")).getImage());
        hierarchy();
        setLocationRelativeTo(null);
        studViewPointer = this;
        detailsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        findTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        findPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        findTable = new javax.swing.JTable();
        departmentComboBox = new javax.swing.JComboBox();
        semCoboBox = new javax.swing.JComboBox();
        findText = new javax.swing.JTextField();
        semesterComboBoxLabel = new javax.swing.JLabel();
        semesterComboBoxLabel1 = new javax.swing.JLabel();
        currentStatusComboBox = new javax.swing.JComboBox();
        studentStambLabel = new javax.swing.JPanel();
        studentPhotoNamePanel = new javax.swing.JPanel();
        photoLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        semesterLabel = new javax.swing.JLabel();
        dobLabel = new javax.swing.JLabel();
        classLabel = new javax.swing.JLabel();
        departmentLabel = new javax.swing.JLabel();
        usnLabel = new javax.swing.JLabel();
        currentStatusLabel = new javax.swing.JLabel();
        phoneLabel = new javax.swing.JLabel();
        departmentText = new javax.swing.JTextField();
        usnText = new javax.swing.JTextField();
        dobText = new javax.swing.JTextField();
        semesterText = new javax.swing.JTextField();
        classText = new javax.swing.JTextField();
        currentStatusText = new javax.swing.JTextField();
        phoneText = new javax.swing.JTextField();
        fullDetailsPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        detailsTable = new javax.swing.JTable(){
            public TableCellEditor getCellEditor(int row, int column)
            {
                int modelColumn = convertColumnIndexToModel( column );
                if(modelColumn==1){
                    switch(row){
                        case  3:
                        return editors.get(0);
                        case 7:
                        return editors.get(1);
                        case 8:
                        return editors.get(2);
                        case 9:
                        return editors.get(3);
                        case 10:
                        return editors.get(4);
                        case 18:
                        return editors.get(5);
                        case 24:
                        return editors.get(6);
                    }
                }
                //                  return (TableCellEditor)editors.get(row);
                return super.getCellEditor(row, column);

            }
        };
        modifyButton = new javax.swing.JButton();
        homeButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        viewMarkButton = new javax.swing.JButton();
        notification = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Student details");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Student details"));

        findPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Find"));

        findTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "USN", "Name", "sem", "deptcode", "status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        findTable.setToolTipText("Select a student from here to see details.");
        findTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                findTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                findTableMouseEntered(evt);
            }
        });
        findTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                findTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                findTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(findTable);
        findTable.getColumnModel().getColumn(0).setMinWidth(100);
        findTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        findTable.getColumnModel().getColumn(0).setMaxWidth(100);
        findTable.getColumnModel().getColumn(2).setMinWidth(0);
        findTable.getColumnModel().getColumn(2).setPreferredWidth(0);
        findTable.getColumnModel().getColumn(2).setMaxWidth(0);
        findTable.getColumnModel().getColumn(3).setMinWidth(0);
        findTable.getColumnModel().getColumn(3).setPreferredWidth(0);
        findTable.getColumnModel().getColumn(3).setMaxWidth(0);
        findTable.getColumnModel().getColumn(4).setMinWidth(0);
        findTable.getColumnModel().getColumn(4).setPreferredWidth(0);
        findTable.getColumnModel().getColumn(4).setMaxWidth(0);

        departmentComboBox.setToolTipText("Click and select department name.");
        departmentComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                departmentComboBoxMouseEntered(evt);
            }
        });
        departmentComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departmentComboBoxActionPerformed(evt);
            }
        });

        semCoboBox.setToolTipText("Click and select semester number.");
        semCoboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                semCoboBoxMouseEntered(evt);
            }
        });
        semCoboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semCoboBoxActionPerformed(evt);
            }
        });

        findText.setToolTipText("Enter USN or Name to filter the students.");
        findText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                findTextMouseEntered(evt);
            }
        });
        findText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                findTextFocusGained(evt);
            }
        });
        findText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                findTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                findTextKeyReleased(evt);
            }
        });

        semesterComboBoxLabel.setText("Semester :");

        semesterComboBoxLabel1.setText("Student status :");

        currentStatusComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Current", "Passed Out", "Year Out", "TC", "NFT" }));
        currentStatusComboBox.setToolTipText("Click and select student status.");
        currentStatusComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                currentStatusComboBoxMouseEntered(evt);
            }
        });
        currentStatusComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentStatusComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout findPanelLayout = new javax.swing.GroupLayout(findPanel);
        findPanel.setLayout(findPanelLayout);
        findPanelLayout.setHorizontalGroup(
            findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(departmentComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(findText)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, findPanelLayout.createSequentialGroup()
                        .addComponent(semesterComboBoxLabel)
                        .addGap(26, 26, 26)
                        .addComponent(semCoboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(semesterComboBoxLabel1)
                        .addGap(27, 27, 27)
                        .addComponent(currentStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        findPanelLayout.setVerticalGroup(
            findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, findPanelLayout.createSequentialGroup()
                .addComponent(departmentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(currentStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(semesterComboBoxLabel1))
                    .addGroup(findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(semCoboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(semesterComboBoxLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(findText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110))
        );

        findPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {currentStatusComboBox, semCoboBox});

        studentStambLabel.setBorder(javax.swing.BorderFactory.createTitledBorder("Basic details"));

        studentPhotoNamePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        studentPhotoNamePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                studentPhotoNamePanelMouseEntered(evt);
            }
        });

        photoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/defaultPhoto(3.5x4.5).jpg"))); // NOI18N
        photoLabel.setLabelFor(phoneText);
        photoLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        photoLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        photoLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                photoLabelMouseClicked(evt);
            }
        });

        nameLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nameLabel.setText(" ");

        javax.swing.GroupLayout studentPhotoNamePanelLayout = new javax.swing.GroupLayout(studentPhotoNamePanel);
        studentPhotoNamePanel.setLayout(studentPhotoNamePanelLayout);
        studentPhotoNamePanelLayout.setHorizontalGroup(
            studentPhotoNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentPhotoNamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studentPhotoNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(photoLabel)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        studentPhotoNamePanelLayout.setVerticalGroup(
            studentPhotoNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentPhotoNamePanelLayout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addComponent(photoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        semesterLabel.setLabelFor(semesterText);
        semesterLabel.setText("Semester :");
        semesterLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                semesterLabelMouseEntered(evt);
            }
        });

        dobLabel.setLabelFor(dobText);
        dobLabel.setText("DOB :");
        dobLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dobLabelMouseEntered(evt);
            }
        });

        classLabel.setLabelFor(classText);
        classLabel.setText("Class :");
        classLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                classLabelMouseEntered(evt);
            }
        });

        departmentLabel.setLabelFor(departmentText);
        departmentLabel.setText("Department :");
        departmentLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                departmentLabelMouseEntered(evt);
            }
        });

        usnLabel.setLabelFor(usnText);
        usnLabel.setText("USN :");
        usnLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                usnLabelMouseEntered(evt);
            }
        });

        currentStatusLabel.setLabelFor(currentStatusText);
        currentStatusLabel.setText("Current status :");
        currentStatusLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                currentStatusLabelMouseEntered(evt);
            }
        });

        phoneLabel.setLabelFor(phoneText);
        phoneLabel.setText("Phone :");
        phoneLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                phoneLabelMouseEntered(evt);
            }
        });

        departmentText.setBackground(new java.awt.Color(204, 204, 204));
        departmentText.setEditable(false);
        departmentText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        departmentText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                departmentTextMouseEntered(evt);
            }
        });

        usnText.setBackground(new java.awt.Color(204, 204, 204));
        usnText.setEditable(false);
        usnText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        usnText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                usnTextMouseEntered(evt);
            }
        });

        dobText.setBackground(new java.awt.Color(204, 204, 204));
        dobText.setEditable(false);
        dobText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dobText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dobTextMouseEntered(evt);
            }
        });

        semesterText.setBackground(new java.awt.Color(204, 204, 204));
        semesterText.setEditable(false);
        semesterText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        semesterText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                semesterTextMouseEntered(evt);
            }
        });

        classText.setBackground(new java.awt.Color(204, 204, 204));
        classText.setEditable(false);
        classText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        classText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                classTextMouseEntered(evt);
            }
        });

        currentStatusText.setBackground(new java.awt.Color(204, 204, 204));
        currentStatusText.setEditable(false);
        currentStatusText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        currentStatusText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                currentStatusTextMouseEntered(evt);
            }
        });

        phoneText.setBackground(new java.awt.Color(204, 204, 204));
        phoneText.setEditable(false);
        phoneText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        phoneText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                phoneTextMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout studentStambLabelLayout = new javax.swing.GroupLayout(studentStambLabel);
        studentStambLabel.setLayout(studentStambLabelLayout);
        studentStambLabelLayout.setHorizontalGroup(
            studentStambLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentStambLabelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studentStambLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(studentStambLabelLayout.createSequentialGroup()
                        .addComponent(usnLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usnText, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(studentPhotoNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(studentStambLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(studentStambLabelLayout.createSequentialGroup()
                        .addComponent(dobLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dobText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(studentStambLabelLayout.createSequentialGroup()
                        .addComponent(semesterLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(semesterText, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentStambLabelLayout.createSequentialGroup()
                        .addComponent(classLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(classText, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentStambLabelLayout.createSequentialGroup()
                        .addComponent(currentStatusLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(currentStatusText, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(studentStambLabelLayout.createSequentialGroup()
                        .addComponent(departmentLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(departmentText, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentStambLabelLayout.createSequentialGroup()
                        .addComponent(phoneLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(phoneText, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        studentStambLabelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {classText, currentStatusText, departmentText, dobText, phoneText, semesterText});

        studentStambLabelLayout.setVerticalGroup(
            studentStambLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentStambLabelLayout.createSequentialGroup()
                .addComponent(studentPhotoNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(studentStambLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usnLabel)
                    .addComponent(usnText))
                .addGap(70, 70, 70))
            .addGroup(studentStambLabelLayout.createSequentialGroup()
                .addGroup(studentStambLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dobLabel)
                    .addComponent(dobText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(studentStambLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(departmentLabel)
                    .addComponent(departmentText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(studentStambLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(semesterLabel)
                    .addComponent(semesterText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(studentStambLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classLabel)
                    .addComponent(classText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(studentStambLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentStatusLabel)
                    .addComponent(currentStatusText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(studentStambLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneLabel)
                    .addComponent(phoneText))
                .addGap(121, 121, 121))
        );

        studentStambLabelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {departmentText, dobText, semesterText});

        fullDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Full details"));

        detailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Content", "Details"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        detailsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                detailsTableMouseEntered(evt);
            }
        });
        jScrollPane2.setViewportView(detailsTable);
        detailsTable.getColumnModel().getColumn(0).setPreferredWidth(130);
        detailsTable.getColumnModel().getColumn(0).setMaxWidth(200);

        modifyButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        modifyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Text-Edit-icon.png"))); // NOI18N
        modifyButton.setText("Modify");
        modifyButton.setToolTipText("<html>\nStep 1, Select a student from the table.<br>\nStep 2, Click modify button.<br>\nStep 3, Double click on the table cell which you want to modify.<br>\nStep 4, To complete your editing. Click any where on the table.<br>\nStep 5, Click on the photo to choose a new photo.<br>\nStep 6, Click save button to save your modification.<br>\n</html>");
        modifyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                modifyButtonMouseEntered(evt);
            }
        });
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });
        modifyButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                modifyButtonFocusGained(evt);
            }
        });

        homeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/home-icon-small.png"))); // NOI18N
        homeButton.setText("Home");
        homeButton.setToolTipText("Click home button to go back to home.");
        homeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                homeButtonMouseEntered(evt);
            }
        });
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });
        homeButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                homeButtonFocusGained(evt);
            }
        });

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Button-cancel-icon.png"))); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.setToolTipText("Click cancel button to cancel your modification.");
        cancelButton.setEnabled(false);
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancelButtonMouseEntered(evt);
            }
        });
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        cancelButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cancelButtonFocusGained(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Actions-edit-delete-icon.png"))); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.setToolTipText("<html>\nStep 1, Select a student from the table.<br>\nStep 2, Click on delete button.<br>\nStep 3, Confirm your deletion.\n</html>");
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteButtonMouseEntered(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        deleteButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deleteButtonFocusGained(evt);
            }
        });

        viewMarkButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        viewMarkButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/makSmall.png"))); // NOI18N
        viewMarkButton.setText("Marks");
        viewMarkButton.setToolTipText("Click mark button to see the marks of selected student.");
        viewMarkButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                viewMarkButtonMouseEntered(evt);
            }
        });
        viewMarkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMarkButtonActionPerformed(evt);
            }
        });
        viewMarkButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                viewMarkButtonFocusGained(evt);
            }
        });

        javax.swing.GroupLayout fullDetailsPanelLayout = new javax.swing.GroupLayout(fullDetailsPanel);
        fullDetailsPanel.setLayout(fullDetailsPanelLayout);
        fullDetailsPanelLayout.setHorizontalGroup(
            fullDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fullDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fullDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(homeButton)
                    .addGroup(fullDetailsPanelLayout.createSequentialGroup()
                        .addComponent(modifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewMarkButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fullDetailsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, deleteButton, homeButton, modifyButton, viewMarkButton});

        fullDetailsPanelLayout.setVerticalGroup(
            fullDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fullDetailsPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fullDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(modifyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteButton)
                    .addComponent(viewMarkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        fullDetailsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cancelButton, deleteButton, homeButton, modifyButton, viewMarkButton});

        notification.setForeground(new java.awt.Color(51, 51, 251));
        notification.setText(" ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(findPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(studentStambLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fullDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(notification, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fullDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(studentStambLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(findPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notification))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    String classDivisionString[] = {"No Division", "1st  Batch", "2nd  Batch", "3rd  Batch",
        "4th  Batch", "5th  Batch", "6th  Batch", "7th  Batch", "8th  Batch",
        "9th  Batch", "10th Batch", "11th Batch", "12th Batch"};
    JComboBox classDivisionComboBox = new JComboBox(classDivisionString);

    private void allocateComboBox() {
        String sex[] = {"Male", "Female"};
        JComboBox sexComboBox = new JComboBox(sex);
        DefaultCellEditor combo1 = new DefaultCellEditor(sexComboBox);
        editors.add(combo1);
        String tempDeptCode[] = collectionOfDeptCode.split("DeptCode ");
        String deptCode[] = tempDeptCode[1].split("\\ ");
        JComboBox deptCodeComboBox = new JComboBox(deptCode);
        DefaultCellEditor combo2 = new DefaultCellEditor(deptCodeComboBox);
        editors.add(combo2);
        String semester[] = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"};
        JComboBox semesterComboBox = new JComboBox(semester);
        DefaultCellEditor combo3 = new DefaultCellEditor(semesterComboBox);
        editors.add(combo3);
        DefaultCellEditor combo4 = new DefaultCellEditor(classDivisionComboBox);
        editors.add(combo4);
        String currentStatus[] = {"Current", "Passed Out", "Year Out", "TC", "NFT"};
        JComboBox currentStatusTableComboBox = new JComboBox(currentStatus);
        DefaultCellEditor combo5 = new DefaultCellEditor(currentStatusTableComboBox);
        editors.add(combo5);
        String syllabusScheme[] = {"2002", "2006", "2010", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030"};
        JComboBox syllabusSchemeComboBox = new JComboBox(syllabusScheme);
        DefaultCellEditor combo6 = new DefaultCellEditor(syllabusSchemeComboBox);
        editors.add(combo6);
        String cycle[] = {"Chemistry", "Physics", "Diploma"};
        JComboBox cycleComboBox = new JComboBox(cycle);
        DefaultCellEditor combo7 = new DefaultCellEditor(cycleComboBox);
        editors.add(combo7);
    }
    private byte[] bytes = null;

    private void fillStudentDetails() {
        DefaultTableModel model = (DefaultTableModel) detailsTable.getModel();
        model.setRowCount(0);

        if (findTable.getSelectionModel().isSelectionEmpty()) {
            return;
        }
        try {
            String sql = "Select * from student where USN=\"" + findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString() + "\"";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            Image hodPhoto = null;
            if (rs.next()) {
                model.addRow(new Object[]{"<html><b/>USN</html>", rs.getString(1)});
                usnText.setText(rs.getString(1));
                model.addRow(new Object[]{"<html><b/>First name</html>", rs.getString(2)});
                model.addRow(new Object[]{"<html><b/>Last name</html>", rs.getString(3)});
                model.addRow(new Object[]{"<html><b/>Gender</html>", "M".equals(rs.getString(7)) ? "Male" : "Female"});
                nameLabel.setText(rs.getString(3) == null ? rs.getString(2) : rs.getString(2) + " " + rs.getString(3));
                model.addRow(new Object[]{"<html><b/>Date of birth</html>", rs.getString(6)});
                dobText.setText(rs.getString(6));
                String temp = rs.getString(19);
                if (temp == null) {
                    temp = "";
                }

                model.addRow(new Object[]{"<html><b/>Student Ph.no.</html>", temp});
                phoneText.setText(temp);
                temp = rs.getString(20);
                if (temp == null) {
                    temp = "";
                }
                model.addRow(new Object[]{"<html><b/>Student email</html>", temp});
                model.addRow(new Object[]{"<html><b/>Department</html>", rs.getString(5)});
                departmentText.setText(rs.getString(5));
                model.addRow(new Object[]{"<html><b/>Semester</html>", rs.getString(4)});
                semesterText.setText(rs.getString(4));
                String classDivision = null;
                switch (Integer.parseInt(rs.getString(13))) {
                    case 0:
                        classDivision = "No Division";
                        classDivisionComboBox.setSelectedIndex(0);
                        break;
                    case 1:
                        classDivision = "1st Batch";
                        classDivisionComboBox.setSelectedIndex(1);
                        break;
                    case 2:
                        classDivision = "2nd Batch";
                        classDivisionComboBox.setSelectedIndex(2);
                        break;
                    case 3:
                        classDivision = "3rd Batch";
                        classDivisionComboBox.setSelectedIndex(3);
                        break;
                    case 4:
                        classDivision = "4th Batch";
                        classDivisionComboBox.setSelectedIndex(4);
                        break;
                    case 5:
                        classDivision = "5th Batch";
                        classDivisionComboBox.setSelectedIndex(5);
                        break;
                    case 6:
                        classDivision = "6th Batch";
                        classDivisionComboBox.setSelectedIndex(6);
                        break;
                    case 7:
                        classDivision = "7th Batch";
                        classDivisionComboBox.setSelectedIndex(7);
                        break;
                    case 8:
                        classDivision = "8th Batch";
                        classDivisionComboBox.setSelectedIndex(8);
                        break;
                    case 9:
                        classDivision = "9th Batch";
                        classDivisionComboBox.setSelectedIndex(9);
                        break;
                    case 10:
                        classDivision = "10th Batch";
                        classDivisionComboBox.setSelectedIndex(10);
                        break;
                    case 11:
                        classDivision = "11th Batch";
                        classDivisionComboBox.setSelectedIndex(11);
                        break;
                    case 12:
                        classDivision = "12th Batch";
                        classDivisionComboBox.setSelectedIndex(12);
                        break;
                }
                model.addRow(new Object[]{"<html><b/>Class division</html>", classDivision});
                classText.setText(classDivision);

                model.addRow(new Object[]{"<html><b/>Current status</html>", rs.getString(10)});
                currentStatusText.setText(rs.getString(10));
                temp = rs.getString(21);
                if (temp == null) {
                    temp = "";
                }
                model.addRow(new Object[]{"<html><b/>Parent name</html>", temp});
                temp = rs.getString(22);
                if (temp == null) {
                    temp = "";
                }
                model.addRow(new Object[]{"<html><b/>Parent Ph.no.</html>", temp});
                temp = rs.getString(24);
                if (temp == null) {
                    temp = "";
                }
                model.addRow(new Object[]{"<html><b/>Parent email</html>", temp});
                temp = rs.getString(26);
                if (temp == null) {
                    temp = "";
                }
                model.addRow(new Object[]{"<html><b/>Religion</html>", temp});
                temp = rs.getString(27);
                if (temp == null) {
                    temp = "";
                }
                model.addRow(new Object[]{"<html><b/>Caste</html>", temp});
                temp = rs.getString(28);
                if (temp == null) {
                    temp = "";
                }
                model.addRow(new Object[]{"<html><b/>Category</html>", temp});
                temp = rs.getString(8);
                if (temp == null) {
                    temp = "";
                }
                model.addRow(new Object[]{"<html><b/>Date of admission</html>", temp});
                model.addRow(new Object[]{"<html><b/>Syllabus scheme</html>", rs.getString(9)});
                temp = rs.getString(11);
                if (temp == null) {
                    temp = "";
                }
                model.addRow(new Object[]{"<html><b/>Hostelite</html>", temp});
                temp = rs.getString(12);
                if (temp == null) {
                    temp = "";
                }
                model.addRow(new Object[]{"<html><b/>Bus facility</html>", temp});
                temp = rs.getString(14);
                if (Integer.parseInt(temp) == -1) {
                    temp = "";
                }
                model.addRow(new Object[]{"<html><b/>Percent in PUC</html>", temp});
                temp = rs.getString(15);
                if (Integer.parseInt(temp) == -1) {
                    temp = "";
                }
                model.addRow(new Object[]{"<html><b/>Percent in 10th</html>", temp});
                temp = rs.getString(16);
                if (Integer.parseInt(temp) == -1) {
                    temp = "";
                }
                model.addRow(new Object[]{"<html><b/>CET rank</html>", temp});
                String cycle = "Chemistry";
                if ("P".equals(rs.getString(17))) {
                    cycle = "Physics";
                }
                if ("D".equals(rs.getString(17))) {
                    cycle = "Diploma";
                }
                model.addRow(new Object[]{"<html><b/>1st sem cycle</html>", cycle});
                String address1 = null;
                String address2 = null;
                String address3 = null;
                if (rs.getString(18) != null) {
                    if (rs.getString(18).length() > 36) {
                        address1 = rs.getString(18).substring(0, 36);
                    } else {
                        address1 = rs.getString(18);
                    }
                    if (rs.getString(18).length() > 72) {
                        address2 = rs.getString(18).substring(36, 72);
                    } else {
                        address2 = "";
                    }
                    if (rs.getString(18).length() > 72) {
                        address3 = rs.getString(18).substring(72);
                    } else {
                        address3 = "";
                    }
                } else {
                    address1 = "";
                    address2 = "";
                    address3 = "";
                }
                model.addRow(new Object[]{"<html><b/>Current address</html>", address1});
                model.addRow(new Object[]{"", address2});
                model.addRow(new Object[]{"", address3});
                if (rs.getString(23) != null) {
                    if (rs.getString(18).length() > 36) {
                        address1 = rs.getString(23).substring(0, 36);
                    } else {
                        address1 = rs.getString(23);
                    }
                    if (rs.getString(23).length() > 72) {
                        address2 = rs.getString(23).substring(36, 72);
                    } else {
                        address2 = "";
                    }
                    if (rs.getString(23).length() > 72) {
                        address3 = rs.getString(23).substring(72);
                    } else {
                        address3 = "";
                    }
                } else {
                    address1 = "";
                    address2 = "";
                    address3 = "";
                }
                model.addRow(new Object[]{"<html><b/>Permenent address</html>", address1});
                model.addRow(new Object[]{"", address2});
                model.addRow(new Object[]{"", address3});
                bytes = rs.getBytes(25);
                if (bytes != null) {
                    hodPhoto = this.getToolkit().createImage(bytes);
                    ImageIcon icon = new ImageIcon(hodPhoto);
                    photoLabel.setIcon(icon);
                } else {
                    photoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/defaultPhoto(3.5x4.5).jpg")));
                }
            }
            rs.close();
            allocateComboBox();
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        hierarchy();
    }

    private void fillFindTable() {
        try {
            DefaultTableModel model = (DefaultTableModel) findTable.getModel();
            model.getDataVector().removeAllElements();
            String sql = "Select USN,FName,LName,Sem,D_DeptCode,CurrentStatus from student order by FName,LName";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            while (rs.next()) {
                String usn = rs.getString("USN");
                String name = rs.getString("LName") == null ? rs.getString("FName") : rs.getString("FName") + " " + rs.getString("LName");
                String sem = rs.getString("Sem");
                String deptCode = rs.getString("D_DeptCode");
                String status = rs.getString("CurrentStatus");
                model.addRow(new Object[]{usn, name, sem, deptCode, status});
            }
            rs.close();
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private String collectionOfDeptCode;

    private void fillDepartmentcomboBox() {
        DefaultComboBoxModel modelComboBox = new DefaultComboBoxModel();
        departmentComboBox.setModel(modelComboBox);
        collectionOfDeptCode = "DeptCode";
        modelComboBox.addElement("All");

        String sql = "Select DeptCode,DeptName from department order by DeptName";
        try {
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            while (rs.next()) {
                collectionOfDeptCode += " " + rs.getString("DeptCode");
                modelComboBox.addElement(rs.getString("DeptName"));
            }
            rs.close();
            if (departmentComboBox.getModel().getSize() > 0) {
                departmentComboBox.setSelectedIndex(0);
            }
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void fillSemesterComboBox() {
        if (departmentComboBox.getModel().getSize() == 0) {
            return;
        }
        DefaultComboBoxModel modelComboBox = new DefaultComboBoxModel();
        semCoboBox.setModel(modelComboBox);
        modelComboBox.addElement("All");
        String tempCollectionOfDeptCode[] = collectionOfDeptCode.split("\\ ");
        String numberOfSemester = null;
        if (departmentComboBox.getSelectedIndex() == 0) {
            numberOfSemester = "10";
        } else {
            String sql = "Select NumOfSems from department where DeptCode=\"" + tempCollectionOfDeptCode[departmentComboBox.getSelectedIndex()] + "\"";
            try {
                ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
                while (rs.next()) {
                    numberOfSemester = rs.getString("NumOfSems");
                }
                rs.close();
            } catch (Exception e) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        for (int i = 0; i < Integer.parseInt(numberOfSemester); i++) {
            modelComboBox.addElement(Integer.toString(i + 1));
        }
    }
    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        Run.Runner.RunnerObj.MainUIObj.show();
        this.dispose();
        Run.Runner.RunnerObj.MainUIObj.StudentViewAndModificationObj = null;
    }//GEN-LAST:event_homeButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        homeButton.doClick();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        detailsTable.setEnabled(false);
        fillFindTable();
        fillDepartmentcomboBox();
        findText.requestFocus();
    }//GEN-LAST:event_formWindowOpened

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (findTable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a student.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString() == null ? detailsTable.getValueAt(0, 1).toString() != null : !findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString().equals(detailsTable.getValueAt(0, 1).toString())) {
            JOptionPane.showMessageDialog(null, "Please make sure your selection.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        findTable.setSelectionBackground(new java.awt.Color(255, 0, 0));
        NewOkCancelDialog dialog = new NewOkCancelDialog(new javax.swing.JFrame(), true);
        dialog.setVisible(true);
        if (dialog.returnStatus == 1) {
            int successful = 0;
            String studentUsnToDelete = (String) findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0);
            String sql = "delete from student where USN=\"" + studentUsnToDelete + "\"";

            try {
                successful = dbConnect.getCon().createStatement().executeUpdate(sql);
            } catch (SQLException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

            if (successful == 1) {
                JOptionPane.showMessageDialog(null, "Student with USN \"" + studentUsnToDelete + "\" deleted succeessfully.", "Information", JOptionPane.INFORMATION_MESSAGE);
                removeSelectedRows(findTable);
                filter();
            } else {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, "Student with USN \"" + studentUsnToDelete + "\" not deleted.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        findTable.setSelectionBackground(new java.awt.Color(0, 102, 153));
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void departmentComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentComboBoxActionPerformed
        fillSemesterComboBox();
    }//GEN-LAST:event_departmentComboBoxActionPerformed
    private int controler = 0;
    private void semCoboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_semCoboBoxActionPerformed
        if (controler++ > 0) {
            filter();
        }
    }//GEN-LAST:event_semCoboBoxActionPerformed

    private void findTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findTableMouseClicked
        if (findTable.isEnabled()) {
            if (findTable.getRowCount() > 0) {
                fillStudentDetails();
            }
        }
    }//GEN-LAST:event_findTableMouseClicked

    private void findTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findTableKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            findText.requestFocus();
        }
    }//GEN-LAST:event_findTableKeyPressed

    private void findTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findTextKeyReleased
        filter();
    }//GEN-LAST:event_findTextKeyReleased

    private void findTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            findTable.requestFocus();
        }
    }//GEN-LAST:event_findTextKeyPressed

    private void filter() {
        String tempCollectionOfDeptCode[] = collectionOfDeptCode.split("\\ ");
        String deptCode = tempCollectionOfDeptCode[departmentComboBox.getSelectedIndex()];
        String sem = semCoboBox.getSelectedItem().toString();
        String currentStatus = currentStatusComboBox.getSelectedItem().toString();
        String userText = findText.getText();

        if ("DeptCode".equals(deptCode)) {
            deptCode = "";
        }
        if ("All".equals(sem)) {
            sem = "";
        }
        if ("All".equals(currentStatus)) {
            currentStatus = "";
        }

        ArrayList<RowFilter<Object, Object>> andFilters = new ArrayList<RowFilter<Object, Object>>();
        andFilters.add(RowFilter.regexFilter("(?i)" + userText, 0, 1));
        andFilters.add(RowFilter.regexFilter("(?i)" + deptCode, 3));
        andFilters.add(RowFilter.regexFilter("(?i)" + sem, 2));
        andFilters.add(RowFilter.regexFilter("(?i)" + currentStatus, 4));

        DefaultTableModel model = (DefaultTableModel) findTable.getModel();
        final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
        sorter.setRowFilter(RowFilter.andFilter(andFilters));
        findTable.setRowSorter(sorter);

        if (findTable.getRowCount() > 0) {
            findTable.getSelectionModel().setSelectionInterval(0, 0);
            nameLabel.setForeground(Color.black);
            fillStudentDetails();
        } else {
            DefaultTableModel modelDetails = (DefaultTableModel) detailsTable.getModel();
            modelDetails.setRowCount(0);
            clearBasicDetails();
        }
    }

    private void currentStatusComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentStatusComboBoxActionPerformed
        filter();
    }//GEN-LAST:event_currentStatusComboBoxActionPerformed
    private static File myFile = null;

    private void showDialog() {
        BufferedImage image = null, scaledImage = null;
        JFileChooser imageChooser;

        if (Run.Runner.RunnerObj.prevDirectory == null) {
            imageChooser = new JFileChooser();
        } else {
            imageChooser = new JFileChooser(Run.Runner.RunnerObj.prevDirectory);
        }

        imageChooser.setAcceptAllFileFilterUsed(false);
        imageChooser.addChoosableFileFilter(new MyImageFilter());

        int retVal = imageChooser.showOpenDialog(this);
        if (retVal == JFileChooser.APPROVE_OPTION) {
            myFile = imageChooser.getSelectedFile();
            //find out the file type
            String fileName = myFile.getName();
            File file = imageChooser.getSelectedFile();
            Run.Runner.RunnerObj.prevDirectory = file.getParent();
            int dotPos = fileName.lastIndexOf(".") + 1;
            String extension = fileName.substring(dotPos);
            try {
                image = ImageIO.read(myFile);
                scaledImage = main_package.MainUI.getScaledImageObj.getScaledImage(image);
                myFile = new File(getClass().getResource("/main_package/resources/temp.jpg").getFile());
                ImageIO.write(scaledImage, extension, myFile);
                photoLabel.setIcon(new ImageIcon(scaledImage));
            } catch (IOException e) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void photoLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_photoLabelMouseClicked
        if (detailsTable.isEnabled() == true && !"hod".equals(Runner.RunnerObj.MainUIObj.getPrivilege())) {
            showDialog();
        }
    }//GEN-LAST:event_photoLabelMouseClicked
    private String tempUSN = null;

    public void removeSelectedRows(JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int[] rows = table.getSelectedRows();
        for (int i = 0; i < rows.length; i++) {
            model.removeRow(table.convertRowIndexToModel(rows[i]) - i);
        }
    }

    private void refillForm() {
        removeSelectedRows(findTable);
        try {
            DefaultTableModel model = (DefaultTableModel) findTable.getModel();
            String sql = "Select * from student  where USN=\"" + tempUSN + "\"order by FName,LName";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            while (rs.next()) {
                String usn = rs.getString(1);
                String name = rs.getString(3) == null ? rs.getString(2) : rs.getString(2) + " " + rs.getString(3);
                String sem = rs.getString(4);
                String deptCode = rs.getString(5);
                String status = rs.getString(10);
                model.addRow(new Object[]{usn, name, sem, deptCode, status});
            }
            rs.close();
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        if (findTable.getRowCount() > 0) {
            findTable.getSelectionModel().setSelectionInterval(findTable.getRowCount() - 1, findTable.getRowCount() - 1);
            fillStudentDetails();
        } else {
            DefaultTableModel modelDetails = (DefaultTableModel) detailsTable.getModel();
            modelDetails.setRowCount(0);
        }
    }

    private boolean isValidDateStr(String date) {
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.setLenient(false);
            sdf.parse(date);
        } catch (ParseException e) {
            return false;
        } catch (IllegalArgumentException e) {
            return false;
        }
        return true;
    }

    private String toNameFormate(String name, int lower) {
        if ("".equals(name)) {
            return name;
        }
        if (lower == 1) {
            name = name.toLowerCase();
        }
        name = name.replaceFirst(Character.toString(name.charAt(0)), Character.toString(name.toUpperCase().charAt(0)));
        return name;
    }

    private String toFullNameFormate(String name) {
        name = name.toLowerCase();
        String tempText[] = name.split("\\ ");
        name = "";
        for (int i = 0; i < tempText.length; i++) {
            name += toNameFormate(tempText[i], 1) + " ";
        }
        String tempText2[] = name.split("\\.");
        name = "";
        for (int i = 0; i < tempText2.length; i++) {
            name += toNameFormate(tempText2[i], 0) + ".";
        }
        name = name.substring(0, name.length() - 2);
        return name;
    }

    private boolean makeUpdate() throws IOException, SQLException {
        if (detailsTable.isEditing()) {
            JOptionPane.showMessageDialog(null, "Please complete your editings.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }

        String USN = detailsTable.getValueAt(0, 1).toString().toUpperCase();
        tempUSN = USN;
        if (USN.length() != 10) {
            JOptionPane.showMessageDialog(null, "USN length should be 10.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        if (!USN.matches("[1-4][A-Z][A-Z][0-9][0-9][A-Z][A-Z][0-9][0-9][0-9]")) {
            JOptionPane.showMessageDialog(null, "Please validate the syntax of USN.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        String FName = detailsTable.getValueAt(1, 1).toString();
        if (FName.length() > 50) {
            JOptionPane.showMessageDialog(null, "First name length should be less than 51.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        if (!FName.matches("[a-zA-Z][ .a-zA-Z]*")) {
            JOptionPane.showMessageDialog(null, "Please check first name.\nSpecial character detected.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        FName = toFullNameFormate(FName);
        String LName = detailsTable.getValueAt(2, 1).toString();
        if (!"".equals(LName)) {
            if (LName.length() > 50) {
                JOptionPane.showMessageDialog(null, "Last name length should be less than 51.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (!LName.matches("[ .a-zA-Z]*")) {
                JOptionPane.showMessageDialog(null, "Please check last name.\nSpecial character detected.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            LName = toFullNameFormate(LName);
        } else {
            LName = "";
        }
        String sex = "Male".equals(detailsTable.getValueAt(3, 1).toString()) ? "M" : "F";
        String DOB = detailsTable.getValueAt(4, 1).toString();
        if (isValidDateStr(DOB) == false || DOB.length() > 10) {
            JOptionPane.showMessageDialog(null, "Please validate DOB.\nDate should be in this format(YYYY-MM-DD).", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        String studentPhone = detailsTable.getValueAt(5, 1).toString();

        if (!"".equals(studentPhone)) {
            if (studentPhone.length() > 25) {
                JOptionPane.showMessageDialog(null, "Student phone number length should be less than 26.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (!studentPhone.matches("[+]?[0-9]+(-[0-9][0-9]*)*[0-9]*")) {
                JOptionPane.showMessageDialog(null, "Please validate student phone number.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
        } else {
            studentPhone = "";
        }
        String studentEmail = detailsTable.getValueAt(6, 1).toString();
        if (!"".equals(studentEmail)) {
            if (studentEmail.length() > 50) {
                JOptionPane.showMessageDialog(null, "Student email length should be less than 51.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (!studentEmail.matches("^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$")) {
                JOptionPane.showMessageDialog(null, "Please validate student email id.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
        } else {
            studentEmail = "";
        }
        String deptCode = detailsTable.getValueAt(7, 1).toString();
        String semester = detailsTable.getValueAt(8, 1).toString();
        if (validateSemester(semester, deptCode) == false) {
            JOptionPane.showMessageDialog(null, "Please validate semester.\nSemester should not exceed selected department's number of semester.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        String classDivision = Integer.toString(classDivisionComboBox.getSelectedIndex());
        String current = detailsTable.getValueAt(10, 1).toString();

        String parentName = detailsTable.getValueAt(11, 1).toString();
        if (!"".equals(parentName)) {
            if (parentName.length() > 50) {
                JOptionPane.showMessageDialog(null, "Parent name length should be less than 51.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (!parentName.matches("[ a-zA-Z][ .a-zA-z]*")) {
                JOptionPane.showMessageDialog(null, "Please validate parent name.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            parentName = toFullNameFormate(parentName);
        } else {
            parentName = "";
        }

        String parentPhone = detailsTable.getValueAt(12, 1).toString();
        if (!"".equals(parentPhone)) {
            if (parentPhone.length() > 25) {
                JOptionPane.showMessageDialog(null, "Parent phone number length should be less than 26.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (!parentPhone.matches("[+]?[0-9]+(-[0-9][0-9]*)*[0-9]*")) {
                JOptionPane.showMessageDialog(null, "Please validate parent phone number.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
        } else {
            parentPhone = "";
        }
        String parentEmail = detailsTable.getValueAt(13, 1).toString();
        if (!"".equals(parentEmail)) {
            if (parentEmail.length() > 50) {
                JOptionPane.showMessageDialog(null, "Parent email length should be less than 51.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (!parentEmail.matches("^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$")) {
                JOptionPane.showMessageDialog(null, "Please validate parent email id.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
        } else {
            parentEmail = "";
        }

        String religion = detailsTable.getValueAt(14, 1).toString();
        if (!"".equals(religion)) {
            if (religion.length() > 20) {
                JOptionPane.showMessageDialog(null, "Religion length should be less than 21.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (!religion.matches("[a-zA-z]*")) {
                JOptionPane.showMessageDialog(null, "Please validate religion.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            religion = toFullNameFormate(religion);
        } else {
            religion = "";
        }
        String cast = detailsTable.getValueAt(15, 1).toString();
        if (!"".equals(cast)) {
            if (cast.length() > 30) {
                JOptionPane.showMessageDialog(null, "Cast length should be less than 31.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (!cast.matches("[a-zA-z]*")) {
                JOptionPane.showMessageDialog(null, "Please validate cast.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            cast = toFullNameFormate(cast);
        } else {
            cast = "";
        }
        String category = detailsTable.getValueAt(16, 1).toString();
        if (!"".equals(category)) {
            if (category.length() > 10) {
                JOptionPane.showMessageDialog(null, "Category length should be less than 11.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (!category.matches("[-/a-zA-z]*")) {
                JOptionPane.showMessageDialog(null, "Please validate category.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            category = toFullNameFormate(category);
        } else {
            category = "";
        }

        String dateAdmision = detailsTable.getValueAt(17, 1).toString();
        if (!"".equals(dateAdmision)) {
            if (isValidDateStr(dateAdmision) == false || dateAdmision.length() > 10) {
                JOptionPane.showMessageDialog(null, "Please validate date of admission.\nDate should be in this format(YYYY-MM-DD).", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
        } else {
            dateAdmision = "2000-1-1";
        }
        String syllabusScheme = detailsTable.getValueAt(18, 1).toString();
        String hostelite = detailsTable.getValueAt(19, 1).toString();
        if (!"".equals(hostelite)) {
            if (hostelite.length() > 10) {
                JOptionPane.showMessageDialog(null, "Hostal details length should be less than 11.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (!hostelite.matches("[-a-zA-z0-9]*")) {
                JOptionPane.showMessageDialog(null, "Please validate hostal details.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            hostelite = hostelite.toUpperCase();
        } else {
            hostelite = "";
        }
        String bus = detailsTable.getValueAt(20, 1).toString();
        if (!"".equals(bus)) {
            if (bus.length() > 5) {
                JOptionPane.showMessageDialog(null, "Bus root number length should be less than 6.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (!bus.matches("[-a-zA-z0-9]*")) {
                JOptionPane.showMessageDialog(null, "Please validate bus root number.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            bus = toFullNameFormate(bus);
        } else {
            bus = "";
        }
        String percentInPUC = detailsTable.getValueAt(21, 1).toString();
        if (!"".equals(percentInPUC)) {
            if (percentInPUC.length() > 3) {
                JOptionPane.showMessageDialog(null, "PUC percent length should be less than 4.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (!percentInPUC.matches("[.0-9]*")) {
                JOptionPane.showMessageDialog(null, "Please validate PUC percent.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
        } else {
            percentInPUC = "-1";
        }
        String percentIn10th = detailsTable.getValueAt(22, 1).toString();
        if (!"".equals(percentIn10th)) {
            if (percentIn10th.length() > 3) {
                JOptionPane.showMessageDialog(null, "10th percent length should be less than 4.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (!percentIn10th.matches("[.0-9]*")) {
                JOptionPane.showMessageDialog(null, "Please validate 10th percent.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
        } else {
            percentIn10th = "-1";
        }
        String cetRank = detailsTable.getValueAt(23, 1).toString();
        if (!"".equals(cetRank)) {
            if (cetRank.length() > 10) {
                JOptionPane.showMessageDialog(null, "CET rank length should be less than 11.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (!cetRank.matches("[0-9]*")) {
                JOptionPane.showMessageDialog(null, "Please validate CET rank.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
        } else {
            cetRank = "-1";
        }
        String cycle = "C";
        if ("Physics".equals(detailsTable.getValueAt(24, 1).toString())) {
            cycle = "P";
        }
        if ("Diploma".equals(detailsTable.getValueAt(24, 1).toString())) {
            cycle = "D";
        }
        String currentAddress = detailsTable.getValueAt(25, 1).toString() + detailsTable.getValueAt(26, 1).toString() + detailsTable.getValueAt(27, 1).toString();
        if (!"".equals(currentAddress)) {
            if (currentAddress.length() > 500) {
                JOptionPane.showMessageDialog(null, "Current address length should be less than 501.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
        } else {
            currentAddress = "";
        }
        String permenentAddress = detailsTable.getValueAt(28, 1).toString() + detailsTable.getValueAt(29, 1).toString() + detailsTable.getValueAt(30, 1).toString();
        if (!"".equals(permenentAddress)) {
            if (permenentAddress.length() > 500) {
                JOptionPane.showMessageDialog(null, "Permenent address length should be less than 501.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
        } else {
            permenentAddress = "";
        }
        String sql = "Update student set USN=\"" + USN + "\" ,FName=\"" + FName + "\" ,LName=\"" + LName
                + "\" , Sem=\"" + semester + "\" , D_DeptCode=\"" + deptCode
                + "\" , DOB=\"" + DOB + "\" , Sex=\"" + sex + "\" , DateOfAdmission=\"" + dateAdmision
                + "\" , SyllabusScheme=\"" + syllabusScheme + "\" , CurrentStatus=\"" + current
                + "\" , Hostelite=\"" + hostelite + "\" , BusFacility=\"" + bus + "\" , ClassDivision=\"" + classDivision
                + "\" , percentInPUC=\"" + percentInPUC + "\" , PercentInXth=\"" + percentIn10th
                + "\" , CETranking=\"" + cetRank + "\" , FirstSemCycle=\"" + cycle
                + "\" , CurrentAddress=\"" + currentAddress + "\" , StudentPhoneNum=\"" + studentPhone
                + "\" , StudentMailID=\"" + studentEmail + "\" , ParentName=\"" + parentName
                + "\" , ParentPhoneNum=\"" + parentPhone + "\" , PermanentAddress=\"" + permenentAddress
                + "\" , ParentMailId=\"" + parentEmail + "\" , Image=(?) , Religion=\"" + religion + "\" , Cast=\"" + cast + "\" , Category=\"" + category
                + "\" where USN=\"" + findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString() + "\"";

        //insert image
        PreparedStatement psmnt = null;
        psmnt = dbConnect.getCon().prepareStatement(sql);
        FileInputStream fis;
        try {
            if (myFile != null) {
                fis = new FileInputStream(myFile);
                psmnt.setBinaryStream(1, (InputStream) fis, (int) (myFile.length()));
            } else {
                psmnt.setBytes(1, bytes);
            }
        } catch (FileNotFoundException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        int successful = 0;

        try {
            successful = psmnt.executeUpdate();
        } catch (SQLException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        if (successful == 1) {
            JOptionPane.showMessageDialog(null, "Student details successfully modified.", "Success", JOptionPane.INFORMATION_MESSAGE);
            return true;
        } else {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Student details modification not successful.", "Failed", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        if (findTable.getSelectionModel().isSelectionEmpty() || detailsTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Please select a student.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (detailsTable.isEnabled() == false) {
            if (findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString() == null ? detailsTable.getValueAt(0, 1).toString() != null : !findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString().equals(detailsTable.getValueAt(0, 1).toString())) {
                JOptionPane.showMessageDialog(null, "Please make sure your selection.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            modifyButton.setText("Save");
            detailsTable.setEnabled(true);
            departmentComboBox.setEnabled(false);
            semCoboBox.setEnabled(false);
            currentStatusComboBox.setEnabled(false);
            findText.setEnabled(false);
            findTable.setEnabled(false);
            deleteButton.setEnabled(false);
            viewMarkButton.setEnabled(false);
            cancelButton.setEnabled(true);
            detailsTable.getSelectionModel().setSelectionInterval(0, 0);
            detailsTable.requestFocus();

            detailsTable.setToolTipText("<html>Step 1, Double click on the table cell which you want to modify.<br>Step 2, To complete your editing. Click any where on the table.</html>");
            if ("hod".equals(Runner.RunnerObj.MainUIObj.getPrivilege())) {
                fillSudentDetailsWRTHod();
            } else {
                studentPhotoNamePanel.setBorder(javax.swing.BorderFactory.createLineBorder(Color.yellow, 2));
                photoLabel.setToolTipText("Click here to select a new photo.");
                photoLabel.setCursor(Cursor.getPredefinedCursor(HAND_CURSOR));
            }
        } else {
            try {
                try {
                    boolean result;
                    if ("hod".equals(Runner.RunnerObj.MainUIObj.getPrivilege())) {
                        result = makeUpdateWRTHod();
                    } else {
                        result = makeUpdate();
                    }
                    if (result) {
                        modifyButton.setText("Modify");
                        detailsTable.setEnabled(false);
                        departmentComboBox.setEnabled(true);
                        semCoboBox.setEnabled(true);
                        currentStatusComboBox.setEnabled(true);
                        findText.setEnabled(true);
                        findTable.setEnabled(true);
                        photoLabel.setCursor(Cursor.getPredefinedCursor(DEFAULT_CURSOR));
                        deleteButton.setEnabled(true);
                        viewMarkButton.setEnabled(true);
                        cancelButton.setEnabled(false);
                        detailsTable.clearSelection();
                        refillForm();
                        studentPhotoNamePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                        detailsTable.setToolTipText(null);
                        photoLabel.setToolTipText(null);
                    }
                } catch (SQLException ex) {
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (IOException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_modifyButtonActionPerformed

    private void viewMarkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMarkButtonActionPerformed
        if (findTable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a student.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString() == null ? detailsTable.getValueAt(0, 1).toString() != null : !findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString().equals(detailsTable.getValueAt(0, 1).toString())) {
            JOptionPane.showMessageDialog(null, "Please make sure your selection.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        StudenDerivedMarks form = new StudenDerivedMarks(usnText.getText(), departmentText.getText(), 1);
        form.setVisible(true);
        studViewPointer.hide();
    }//GEN-LAST:event_viewMarkButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        if (detailsTable.isEditing()) {
            JOptionPane.showMessageDialog(null, "Please complete your editings.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        modifyButton.setText("Modify");
        detailsTable.setEnabled(false);
        departmentComboBox.setEnabled(true);
        semCoboBox.setEnabled(true);
        currentStatusComboBox.setEnabled(true);
        findText.setEnabled(true);
        findTable.setEnabled(true);
        photoLabel.setCursor(Cursor.getPredefinedCursor(DEFAULT_CURSOR));
        deleteButton.setEnabled(true);
        viewMarkButton.setEnabled(true);
        cancelButton.setEnabled(false);
        fillStudentDetails();
        detailsTable.clearSelection();
        studentPhotoNamePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        findTable.requestFocus();
        detailsTable.setToolTipText(null);
        photoLabel.setToolTipText(null);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void studentPhotoNamePanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentPhotoNamePanelMouseEntered
        if (detailsTable.isEnabled() == true) {
            notification.setText("Click here select a new image.");
        } else {
            notification.setText(" ");
        }
    }//GEN-LAST:event_studentPhotoNamePanelMouseEntered

    private void dobTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dobTextMouseEntered
        notification.setText("Date of birth of selected student.");
    }//GEN-LAST:event_dobTextMouseEntered

    private void departmentTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_departmentTextMouseEntered
        notification.setText("Department code of selected student.");
    }//GEN-LAST:event_departmentTextMouseEntered

    private void semesterTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_semesterTextMouseEntered
        notification.setText("Current semester of selected student.");
    }//GEN-LAST:event_semesterTextMouseEntered

    private void classTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classTextMouseEntered
        notification.setText("Class division or batch number of selected student.");
    }//GEN-LAST:event_classTextMouseEntered

    private void currentStatusTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentStatusTextMouseEntered
        notification.setText("Current status of selected student.");
    }//GEN-LAST:event_currentStatusTextMouseEntered

    private void phoneTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_phoneTextMouseEntered
        notification.setText("Phone number of selected student.");
    }//GEN-LAST:event_phoneTextMouseEntered

    private void dobLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dobLabelMouseEntered
        notification.setText("Date of birth.");
    }//GEN-LAST:event_dobLabelMouseEntered

    private void departmentLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_departmentLabelMouseEntered
        notification.setText("Department code.");
    }//GEN-LAST:event_departmentLabelMouseEntered

    private void semesterLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_semesterLabelMouseEntered
        notification.setText("Current semester.");
    }//GEN-LAST:event_semesterLabelMouseEntered

    private void classLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classLabelMouseEntered
        notification.setText("Class division.");
    }//GEN-LAST:event_classLabelMouseEntered

    private void currentStatusLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentStatusLabelMouseEntered
        notification.setText("Current status.");
    }//GEN-LAST:event_currentStatusLabelMouseEntered

    private void phoneLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_phoneLabelMouseEntered
        notification.setText("Phone number.");
    }//GEN-LAST:event_phoneLabelMouseEntered

    private void usnTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usnTextMouseEntered
        notification.setText("USN of selected student.");
    }//GEN-LAST:event_usnTextMouseEntered

    private void usnLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usnLabelMouseEntered
        notification.setText("University seat number(USN).");
    }//GEN-LAST:event_usnLabelMouseEntered

    private void departmentComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_departmentComboBoxMouseEntered
        notification.setText("Select department name from the list to filter selected department students.");
    }//GEN-LAST:event_departmentComboBoxMouseEntered

    private void semCoboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_semCoboBoxMouseEntered
        notification.setText("Select semester number from the list to filter the students w.r.t selected semester.");
    }//GEN-LAST:event_semCoboBoxMouseEntered

    private void currentStatusComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentStatusComboBoxMouseEntered
        notification.setText("Select student status from the list to filter the students w.r.t student status.");
    }//GEN-LAST:event_currentStatusComboBoxMouseEntered

    private void findTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findTextMouseEntered
        notification.setText("Enter USN or Name to filter the students w.r.t enterd USN or Name.");
    }//GEN-LAST:event_findTextMouseEntered

    private void findTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findTableMouseEntered
        notification.setText("Select a student to view details.");
    }//GEN-LAST:event_findTableMouseEntered

    private void modifyButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modifyButtonMouseEntered
        notification.setText("To modify the student details.");

    }//GEN-LAST:event_modifyButtonMouseEntered

    private void modifyButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_modifyButtonFocusGained
        notification.setText("To modify the selected student details.");
    }//GEN-LAST:event_modifyButtonFocusGained

    private void cancelButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseEntered
        notification.setText("To cancel modification.");
    }//GEN-LAST:event_cancelButtonMouseEntered

    private void deleteButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseEntered
        notification.setText("To delete the selected student.");
    }//GEN-LAST:event_deleteButtonMouseEntered

    private void viewMarkButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewMarkButtonMouseEntered
        notification.setText("To view the mark details of selected student.");
    }//GEN-LAST:event_viewMarkButtonMouseEntered

    private void homeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeButtonMouseEntered
        notification.setText("Go back to home.");
    }//GEN-LAST:event_homeButtonMouseEntered

    private void homeButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_homeButtonFocusGained
        notification.setText("Go back to home.");
    }//GEN-LAST:event_homeButtonFocusGained

    private void viewMarkButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_viewMarkButtonFocusGained
        notification.setText("To view the mark details of selected student.");
    }//GEN-LAST:event_viewMarkButtonFocusGained

    private void deleteButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deleteButtonFocusGained
        notification.setText("To delete the selected student.");
    }//GEN-LAST:event_deleteButtonFocusGained

    private void cancelButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cancelButtonFocusGained
        notification.setText("To cancel modification.");
    }//GEN-LAST:event_cancelButtonFocusGained

    private void detailsTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_detailsTableMouseEntered
        notification.setText("Full details selected student.");
    }//GEN-LAST:event_detailsTableMouseEntered

    private void findTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findTableKeyReleased
        if (findTable.isEnabled()) {
            if (findTable.getRowCount() > 0) {
                fillStudentDetails();
            }
        }
    }//GEN-LAST:event_findTableKeyReleased

    private void findTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_findTextFocusGained
        notification.setText("Enter USN or Name to filter the students w.r.t enterd USN or Name.");
    }//GEN-LAST:event_findTextFocusGained
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel classLabel;
    private javax.swing.JTextField classText;
    private javax.swing.JComboBox currentStatusComboBox;
    private javax.swing.JLabel currentStatusLabel;
    private javax.swing.JTextField currentStatusText;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox departmentComboBox;
    private javax.swing.JLabel departmentLabel;
    private javax.swing.JTextField departmentText;
    private javax.swing.JTable detailsTable;
    private javax.swing.JLabel dobLabel;
    private javax.swing.JTextField dobText;
    private javax.swing.JPanel findPanel;
    private javax.swing.JTable findTable;
    private javax.swing.JTextField findText;
    private javax.swing.JPanel fullDetailsPanel;
    private javax.swing.JButton homeButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton modifyButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel notification;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JTextField phoneText;
    private javax.swing.JLabel photoLabel;
    private javax.swing.JComboBox semCoboBox;
    private javax.swing.JLabel semesterComboBoxLabel;
    private javax.swing.JLabel semesterComboBoxLabel1;
    private javax.swing.JLabel semesterLabel;
    private javax.swing.JTextField semesterText;
    private javax.swing.JPanel studentPhotoNamePanel;
    private javax.swing.JPanel studentStambLabel;
    private javax.swing.JLabel usnLabel;
    private javax.swing.JTextField usnText;
    private javax.swing.JButton viewMarkButton;
    // End of variables declaration//GEN-END:variables

    private void hierarchy() {
        String privilege = Runner.RunnerObj.MainUIObj.getPrivilege();
        if ("tempAdmin".equalsIgnoreCase(privilege)) {
            hierachyTempAdmin();
        } else if ("hod".equalsIgnoreCase(privilege)) {
            hierachyHOD();
        } else if ("faculty".equalsIgnoreCase(privilege)) {
            hierachyFaculty();
        } else if ("other".equalsIgnoreCase(privilege)) {
            hierachyOther();
        }
    }

    private void hierachyHOD() {
        deleteButton.hide();
        if (departmentText.getText().equals(Run.Runner.RunnerObj.MainUIObj.getDept())) {
            modifyButton.setEnabled(true);
            deleteButton.setEnabled(true);

        } else {
            modifyButton.setEnabled(false);
            deleteButton.setEnabled(false);
        }
    }

    private void hierachyTempAdmin() {
        ////////////////////////////////
        ////No changes./////
        ////////////////////////////////
    }

    private void hierachyFaculty() {
        modifyButton.hide();
        deleteButton.hide();
        cancelButton.hide();
    }

    private void hierachyOther() {
        modifyButton.hide();
        deleteButton.hide();
        cancelButton.hide();
    }

    private void fillSudentDetailsWRTHod() {
        DefaultTableModel model = (DefaultTableModel) detailsTable.getModel();
        model.setRowCount(0);
        if (findTable.getSelectionModel().isSelectionEmpty()) {
            return;
        }
        try {
            String sql = "Select Sem,ClassDivision,CurrentStatus,SyllabusScheme from student where USN=\"" + findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString() + "\"";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            if (rs.next()) {
                for (int i = 0; i < 8; i++) {
                    model.addRow(new Object[]{"<html><font color=red>Not changeable</html>", "<html><font color=red>--</html>"});
                }
                model.addRow(new Object[]{"<html><b/>Semester</html>", rs.getString("Sem")});
                String classDivision = null;
                switch (Integer.parseInt(rs.getString("ClassDivision"))) {
                    case 0:
                        classDivision = "No Division";
                        classDivisionComboBox.setSelectedIndex(0);
                        break;
                    case 1:
                        classDivision = "1st Batch";
                        classDivisionComboBox.setSelectedIndex(1);
                        break;
                    case 2:
                        classDivision = "2nd Batch";
                        classDivisionComboBox.setSelectedIndex(2);
                        break;
                    case 3:
                        classDivision = "3rd Batch";
                        classDivisionComboBox.setSelectedIndex(3);
                        break;
                    case 4:
                        classDivision = "4th Batch";
                        classDivisionComboBox.setSelectedIndex(4);
                        break;
                    case 5:
                        classDivision = "5th Batch";
                        classDivisionComboBox.setSelectedIndex(5);
                        break;
                    case 6:
                        classDivision = "6th Batch";
                        classDivisionComboBox.setSelectedIndex(6);
                        break;
                    case 7:
                        classDivision = "7th Batch";
                        classDivisionComboBox.setSelectedIndex(7);
                        break;
                    case 8:
                        classDivision = "8th Batch";
                        classDivisionComboBox.setSelectedIndex(8);
                        break;
                    case 9:
                        classDivision = "9th Batch";
                        classDivisionComboBox.setSelectedIndex(9);
                        break;
                    case 10:
                        classDivision = "10th Batch";
                        classDivisionComboBox.setSelectedIndex(10);
                        break;
                    case 11:
                        classDivision = "11th Batch";
                        classDivisionComboBox.setSelectedIndex(11);
                        break;
                    case 12:
                        classDivision = "12th Batch";
                        classDivisionComboBox.setSelectedIndex(12);
                        break;
                }
                model.addRow(new Object[]{"<html><b/>Class division</html>", classDivision});
                model.addRow(new Object[]{"<html><b/>Current status</html>", rs.getString("CurrentStatus")});
                for (int i = 11; i < 18; i++) {
                    model.addRow(new Object[]{"<html><font color=red>Not changeable</html>", "<html><font color=red>--</html>"});
                }
                model.addRow(new Object[]{"<html><b/>Syllabus scheme</html>", rs.getString("SyllabusScheme")});
                for (int i = 19; i < 31; i++) {
                    model.addRow(new Object[]{"<html><font color=red>Not changeable</html>", "<html><font color=red>--</html>"});
                }
            }
            rs.close();
            allocateComboBox();
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private boolean makeUpdateWRTHod() {
        if (detailsTable.isEditing()) {
            JOptionPane.showMessageDialog(null, "Please complete your editings.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        tempUSN = usnText.getText();
        String deptCode = departmentText.getText();
        String semester = detailsTable.getValueAt(8, 1).toString();
        if (validateSemester(semester, deptCode) == false) {
            JOptionPane.showMessageDialog(null, "Please validate semester.\nSemester should not exceed selected department's number of semester.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        String classDivision = Integer.toString(classDivisionComboBox.getSelectedIndex());
        String current = detailsTable.getValueAt(10, 1).toString();
        String syllabusScheme = detailsTable.getValueAt(18, 1).toString();
        String sql = "Update student set Sem=\"" + semester + "\" , SyllabusScheme=\"" + syllabusScheme
                + "\" , CurrentStatus=\"" + current + "\" , ClassDivision=\"" + classDivision
                + "\" where USN=\"" + findTable.getModel().getValueAt(findTable.convertRowIndexToModel(findTable.getSelectedRow()), 0).toString() + "\"";
        int successful = 0;
        try {
            successful = dbConnect.getCon().createStatement().executeUpdate(sql);
        } catch (SQLException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        if (successful == 1) {
            JOptionPane.showMessageDialog(null, "Student details successfully modified.", "Success", JOptionPane.INFORMATION_MESSAGE);
            return true;
        } else {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Student details modification not successful.", "Failed", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private boolean validateSemester(String semester, String deptCode) {
        try {
            String sql = "Select NumOfSems from department where Deptcode=\"" + deptCode + "\"";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            if (rs.next()) {
                int sem = rs.getInt("NumOfSems");
                if (Integer.parseInt(semester) <= sem) {
                    return true;
                }
            }
            rs.close();
        } catch (SQLException ex) {
            return false;
        }
        return false;
    }

    private void clearBasicDetails() {
        dobText.setText("");
        departmentText.setText("");
        semesterText.setText("");
        classText.setText("");
        currentStatusText.setText("");
        phoneText.setText("");
        usnText.setText("");
        Toolkit.getDefaultToolkit().beep();
        nameLabel.setForeground(Color.red);
        nameLabel.setText("No match found.");
        photoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/defaultPhoto(3.5x4.5).jpg")));
    }
}
