/*
 * Form:DepartmentDetails
 * version=0.3.6
 * Update=6/8/2012 3.08 PM
 *        12-08-2012 2.56 PM
 *          14-08-2012 10:34 AM
 *          15-08-2012 10:19 PM
 *          17-08-12 3:06pm
 *          18-08-2012 at 8:55 PM delete button authentication done.
 *          18-08-2012 at 10.04 PM make sure done.
 *          19-08-2012 at 11.27 PM reqst focus after clear.
 *          20-08-2012 at 2.36 AM delete color
 *          25-08-2012 at 1.01 AM icon
 *          25-08-2012 at 2.32 form structure is changed. with hierrachy
 *          31-08-2012 at 3.15 atleast one dept confirm message modified.
 *          31-08-2012 at 12.41 PM select hod hide.
 *          31-08-2012 at 11.21 PM delete button hided.
 *          2-09-2012 at 11.41 key event chaged.
 *          3-09-2012 at 2.23 PM kill object 
 * have to complaete adjest home buttone
 */
package Department;

import Advance.HODSelectorUI;
import Run.dbConnect;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import main_package.authenticationDialog;

/**
 *
 * @author V4 Creations
 */
public class DepartmentDetails extends javax.swing.JFrame {

    /**
     * Creates new form ViewDepartment
     */
    public static JFrame uiDepartment;
    public static JButton uiDepartmentSelectButton;
    private String globalPurpus;

    public DepartmentDetails(String purpus) {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/main_package/resources/icon.png")).getImage());
        setLocationRelativeTo(null);
        cancelButton.setEnabled(false);
        clearButton.setEnabled(false);
        selectHODButton.setEnabled(false);
        uiDepartment = this;
        uiDepartmentSelectButton = selectHODButton;
        viewDeptTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        globalPurpus = purpus;
        if ("View".equals(globalPurpus)) {
            addOrModify.setText("Modify");
            addOrModify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Text-Edit-icon.png")));
            addOrModify.setToolTipText("<html>Step 1,Select a department.<br>Step 2, Click modify button.<br>Step 3, Modify the details.<br>Step 4, Again click save button.</html>");
        } else {
            addOrModify.setText("Add");
            addOrModify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Button-Add-icon.png")));
            addOrModify.setToolTipText("<html>Step 1,Click add button.<br>Step 2, Fill form feilds.<br>Step 2, Click save button.<br></html>");
            selectHODButton.hide();
            deleteButton.hide();
        }
        hierarchy();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewDeptPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewDeptTable = new javax.swing.JTable();
        deptCodeLabel = new javax.swing.JLabel();
        deptNameLabel = new javax.swing.JLabel();
        hodNameLabel = new javax.swing.JLabel();
        numFacultiesLabel = new javax.swing.JLabel();
        numStudentsLabel = new javax.swing.JLabel();
        startYearLabel = new javax.swing.JLabel();
        numSemestersLabel = new javax.swing.JLabel();
        deptCodeText = new javax.swing.JTextField();
        hodNameText = new javax.swing.JTextField();
        deptNameText = new javax.swing.JTextField();
        numFacultiesText = new javax.swing.JTextField();
        numStudentsText = new javax.swing.JTextField();
        startYearText = new javax.swing.JTextField();
        numSemestersText = new javax.swing.JTextField();
        homeButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        addOrModify = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        notification = new javax.swing.JLabel();
        selectHODButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        bad1 = new javax.swing.JLabel();
        bad2 = new javax.swing.JLabel();
        bad3 = new javax.swing.JLabel();
        bad4 = new javax.swing.JLabel();
        departmentComboBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Department details");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        viewDeptPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("View/Modify Department"));

        viewDeptTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        viewDeptTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dept. Code", "Dept. Name", "Name Of HOD"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        viewDeptTable.setToolTipText("<html>\nSelect a department from this table,<br>\nTo its details.\n</html>");
        viewDeptTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewDeptTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                viewDeptTableMouseEntered(evt);
            }
        });
        viewDeptTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                viewDeptTableFocusGained(evt);
            }
        });
        viewDeptTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                viewDeptTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(viewDeptTable);
        viewDeptTable.getColumnModel().getColumn(0).setMinWidth(78);
        viewDeptTable.getColumnModel().getColumn(0).setPreferredWidth(78);
        viewDeptTable.getColumnModel().getColumn(0).setMaxWidth(78);

        deptCodeLabel.setLabelFor(deptCodeText);
        deptCodeLabel.setText("Dept. code *:");
        deptCodeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deptCodeLabelMouseEntered(evt);
            }
        });

        deptNameLabel.setLabelFor(deptNameText);
        deptNameLabel.setText("Dept. name *:");
        deptNameLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deptNameLabelMouseEntered(evt);
            }
        });

        hodNameLabel.setLabelFor(hodNameText);
        hodNameLabel.setText("Name of the HOD :");
        hodNameLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                hodNameLabelMouseEntered(evt);
            }
        });

        numFacultiesLabel.setLabelFor(numFacultiesText);
        numFacultiesLabel.setText("No. of faculties :");
        numFacultiesLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                numFacultiesLabelMouseEntered(evt);
            }
        });

        numStudentsLabel.setLabelFor(numStudentsText);
        numStudentsLabel.setText("No. of students :");
        numStudentsLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                numStudentsLabelMouseEntered(evt);
            }
        });

        startYearLabel.setLabelFor(startYearText);
        startYearLabel.setText("Started year :");
        startYearLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                startYearLabelMouseEntered(evt);
            }
        });

        numSemestersLabel.setLabelFor(numSemestersText);
        numSemestersLabel.setText("No. of semesters *:");
        numSemestersLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                numSemestersLabelMouseEntered(evt);
            }
        });

        deptCodeText.setToolTipText("Department code.");
        deptCodeText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deptCodeTextMouseEntered(evt);
            }
        });
        deptCodeText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deptCodeTextFocusGained(evt);
            }
        });
        deptCodeText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deptCodeTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                deptCodeTextKeyReleased(evt);
            }
        });

        hodNameText.setBackground(new java.awt.Color(204, 204, 204));
        hodNameText.setToolTipText("<html>\nH.O.D name of current H.O.D.<br>\nNote : Not modifiable from here.<br>\nChoose select button.\n</html>");
        hodNameText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                hodNameTextMouseEntered(evt);
            }
        });
        hodNameText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                hodNameTextFocusGained(evt);
            }
        });

        deptNameText.setToolTipText("Department name.");
        deptNameText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deptNameTextMouseEntered(evt);
            }
        });
        deptNameText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deptNameTextFocusGained(evt);
            }
        });
        deptNameText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deptNameTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                deptNameTextKeyReleased(evt);
            }
        });

        numFacultiesText.setBackground(new java.awt.Color(204, 204, 204));
        numFacultiesText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numFacultiesText.setToolTipText("<html>\nTotal number of faculty.<br>\nNote : Not modifiable.\n</html>");
        numFacultiesText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                numFacultiesTextMouseEntered(evt);
            }
        });
        numFacultiesText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                numFacultiesTextFocusGained(evt);
            }
        });

        numStudentsText.setBackground(new java.awt.Color(204, 204, 204));
        numStudentsText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numStudentsText.setToolTipText("<html>\nTotal number of students..<br>\nNote : Not modifiable.\n</html>");
        numStudentsText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                numStudentsTextMouseEntered(evt);
            }
        });
        numStudentsText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                numStudentsTextFocusGained(evt);
            }
        });

        startYearText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        startYearText.setToolTipText("Department started year.");
        startYearText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                startYearTextMouseEntered(evt);
            }
        });
        startYearText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                startYearTextFocusGained(evt);
            }
        });
        startYearText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                startYearTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                startYearTextKeyReleased(evt);
            }
        });

        numSemestersText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numSemestersText.setToolTipText("Total number of semester.");
        numSemestersText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                numSemestersTextMouseEntered(evt);
            }
        });
        numSemestersText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                numSemestersTextFocusGained(evt);
            }
        });
        numSemestersText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                numSemestersTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                numSemestersTextKeyReleased(evt);
            }
        });

        homeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/home-icon-small.png"))); // NOI18N
        homeButton.setText("Home");
        homeButton.setToolTipText("Click home button to go back to home.");
        homeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                homeButtonMouseEntered(evt);
            }
        });
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });
        homeButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                homeButtonFocusGained(evt);
            }
        });
        homeButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                homeButtonKeyPressed(evt);
            }
        });

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Button-cancel-icon.png"))); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.setToolTipText("Click to cancel the addition or modifiacation of department.");
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancelButtonMouseEntered(evt);
            }
        });
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        cancelButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cancelButtonFocusGained(evt);
            }
        });
        cancelButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelButtonKeyPressed(evt);
            }
        });

        addOrModify.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        addOrModify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Text-Edit-icon.png"))); // NOI18N
        addOrModify.setText("Modify");
        addOrModify.setToolTipText("<html>\nStep 1,Select a department.<br>\nStep 2, Click modify button.<br>\nStep 3, Modify the details.<br>\nStep 4, Again click modify button.\n</html>\n");
        addOrModify.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addOrModifyMouseEntered(evt);
            }
        });
        addOrModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrModifyActionPerformed(evt);
            }
        });
        addOrModify.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addOrModifyFocusGained(evt);
            }
        });
        addOrModify.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addOrModifyKeyPressed(evt);
            }
        });

        clearButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Actionsclear-icon-small.png"))); // NOI18N
        clearButton.setText("Clear");
        clearButton.setToolTipText("Click to clear the text fields.");
        clearButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                clearButtonMouseEntered(evt);
            }
        });
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        clearButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearButtonFocusGained(evt);
            }
        });
        clearButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                clearButtonKeyPressed(evt);
            }
        });

        notification.setForeground(new java.awt.Color(51, 51, 255));
        notification.setText(" ");

        selectHODButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Ok-icon.png"))); // NOI18N
        selectHODButton.setText("Select");
        selectHODButton.setToolTipText("<html>\nStep 1, Click select button.<br>\nStep 2, Select H.O.D.<br>\nStep 3, Click go back button.\n</html>");
        selectHODButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                selectHODButtonMouseEntered(evt);
            }
        });
        selectHODButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectHODButtonActionPerformed(evt);
            }
        });
        selectHODButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectHODButtonFocusGained(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Actions-edit-delete-icon.png"))); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.setToolTipText("<html>\nStep 1, Select a department.<br>\nStep 2, Click delete button.<br>\nStep 3, Enter your username and password<br>\nStep 4, Confirm.\n</html>\n");
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteButtonMouseEntered(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        deleteButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deleteButtonFocusGained(evt);
            }
        });
        deleteButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deleteButtonKeyPressed(evt);
            }
        });

        bad1.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad1.setForeground(new java.awt.Color(255, 0, 0));
        bad1.setText(" ");

        bad2.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad2.setForeground(new java.awt.Color(255, 0, 0));
        bad2.setText(" ");

        bad3.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad3.setForeground(new java.awt.Color(255, 0, 0));
        bad3.setText(" ");

        bad4.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad4.setForeground(new java.awt.Color(255, 0, 0));
        bad4.setText(" ");

        departmentComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));
        departmentComboBox.setToolTipText("<html>\nSelect a department from this list,<br>\nTo its details.\n</html>");
        departmentComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                departmentComboBoxMouseEntered(evt);
            }
        });
        departmentComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departmentComboBoxActionPerformed(evt);
            }
        });
        departmentComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                departmentComboBoxFocusGained(evt);
            }
        });

        javax.swing.GroupLayout viewDeptPanelLayout = new javax.swing.GroupLayout(viewDeptPanel);
        viewDeptPanel.setLayout(viewDeptPanelLayout);
        viewDeptPanelLayout.setHorizontalGroup(
            viewDeptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewDeptPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewDeptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewDeptPanelLayout.createSequentialGroup()
                        .addComponent(addOrModify)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(homeButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(viewDeptPanelLayout.createSequentialGroup()
                        .addComponent(notification, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(viewDeptPanelLayout.createSequentialGroup()
                        .addGroup(viewDeptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(viewDeptPanelLayout.createSequentialGroup()
                                .addGroup(viewDeptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(numFacultiesLabel)
                                    .addComponent(numSemestersLabel)
                                    .addComponent(hodNameLabel)
                                    .addComponent(deptNameLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(viewDeptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(viewDeptPanelLayout.createSequentialGroup()
                                        .addGroup(viewDeptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewDeptPanelLayout.createSequentialGroup()
                                                .addComponent(numSemestersText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(bad3)
                                                .addGap(29, 29, 29))
                                            .addGroup(viewDeptPanelLayout.createSequentialGroup()
                                                .addComponent(numFacultiesText, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(38, 38, 38)))
                                        .addGroup(viewDeptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(startYearLabel)
                                            .addComponent(numStudentsLabel))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(viewDeptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(startYearText, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                                            .addComponent(numStudentsText))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bad4))
                                    .addGroup(viewDeptPanelLayout.createSequentialGroup()
                                        .addComponent(deptNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bad2))
                                    .addGroup(viewDeptPanelLayout.createSequentialGroup()
                                        .addComponent(hodNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectHODButton))))
                            .addComponent(departmentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(viewDeptPanelLayout.createSequentialGroup()
                                .addComponent(deptCodeLabel)
                                .addGap(43, 43, 43)
                                .addComponent(deptCodeText, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bad1))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );

        viewDeptPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {numFacultiesText, numSemestersText});

        viewDeptPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addOrModify, cancelButton, clearButton, deleteButton, homeButton});

        viewDeptPanelLayout.setVerticalGroup(
            viewDeptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewDeptPanelLayout.createSequentialGroup()
                .addComponent(departmentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(viewDeptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deptCodeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deptCodeLabel)
                    .addComponent(bad1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(viewDeptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deptNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deptNameLabel)
                    .addComponent(bad2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewDeptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hodNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectHODButton)
                    .addComponent(hodNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewDeptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numSemestersLabel)
                    .addComponent(numSemestersText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startYearLabel)
                    .addComponent(startYearText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bad3)
                    .addComponent(bad4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(viewDeptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numFacultiesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numFacultiesLabel)
                    .addComponent(numStudentsLabel)
                    .addComponent(numStudentsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(viewDeptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(addOrModify, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notification))
        );

        viewDeptPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addOrModify, cancelButton, clearButton, deleteButton, homeButton});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(viewDeptPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(viewDeptPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private String collectionOfStartYear;
    private String collectionOfNumOfSems;

    private boolean find(String ArrayOfTempD_DeptCode[], String inputString) {
        int i;
        for (i = 0; i < ArrayOfTempD_DeptCode.length; i++) {
            if (ArrayOfTempD_DeptCode[i] == null ? inputString == null : ArrayOfTempD_DeptCode[i].equals(inputString)) {
                return false;
            }
        }
        return true;
    }

    private void fillComboBox() {
        DefaultComboBoxModel modelComboBox = new DefaultComboBoxModel();
        departmentComboBox.setModel(modelComboBox);

        for (int i = 0; i < viewDeptTable.getModel().getRowCount(); i++) {
            modelComboBox.addElement(viewDeptTable.getModel().getValueAt(i, 1));
        }
        if (departmentComboBox.getModel().getSize() > 0) {
            departmentComboBox.setSelectedIndex(viewDeptTable.getSelectedRow());
        }
    }

    private void fillTabel() throws SQLException {
        DefaultTableModel modelTable = (DefaultTableModel) viewDeptTable.getModel();
        modelTable.getDataVector().removeAllElements();
        viewDeptTable.clearSelection();
        collectionOfNumOfSems = collectionOfStartYear = null;

        String sql = "Select DeptCode,DeptName,NumOfSems,DeptStartyear,FName,LName from department,ssnofhod s,faculty where DeptCode=s.D_DeptCode and F_UFN=UFN";
        try {
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            while (rs.next()) {
                collectionOfNumOfSems += " " + rs.getString("NumOfSems");
                collectionOfStartYear += " " + rs.getString("DeptStartYear");
                modelTable.addRow(new Object[]{rs.getString("DeptCode"), rs.getString("DeptName"), rs.getString("LName") == null ? rs.getString("FName") : rs.getString("FName") + " " + rs.getString("LName")});
            }
            rs.close();
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        String tempD_DeptCode = null;
        sql = "select D_DeptCode from ssnofhod";
        try {
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            while (rs.next()) {
                tempD_DeptCode += " " + rs.getString("D_DeptCode");
            }
            rs.close();
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        String ArrayOfTempD_DeptCode[] = {"EscapeValuePutting"};

        if (tempD_DeptCode != null) {
            ArrayOfTempD_DeptCode = null;
            ArrayOfTempD_DeptCode = tempD_DeptCode.split("\\ ");
        }

        sql = "select DeptCode,DeptName,NumOfSems,DeptStartyear from department";
        try {
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            while (rs.next()) {
                if (find(ArrayOfTempD_DeptCode, rs.getString("DeptCode"))) {
                    collectionOfNumOfSems += " " + rs.getString("NumOfSems");
                    collectionOfStartYear += " " + rs.getString("DeptStartYear");
                    modelTable.addRow(new Object[]{rs.getString("DeptCode"), rs.getString("DeptName"), "Not selected."});
                }
            }
            rs.close();
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        if (viewDeptTable.getModel().getRowCount() > 0) {
            viewDeptTable.getSelectionModel().setSelectionInterval(0, 0);
        }
        fillComboBox();
        fillFormWRTTable();
    }

    private void fillNewHODName() {
        String sql = "select FName,LName from ssnofhod,faculty f where UFN=F_UFN and f.D_DeptCode=\"" + viewDeptTable.getValueAt(viewDeptTable.getSelectedRow(), 0).toString() + "\"";
        try {
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            while (rs.next()) {
                if (rs.getString("LName") == null) {
                    hodNameText.setText(rs.getString("FName"));
                } else {
                    hodNameText.setText(rs.getString("FName") + " " + rs.getString("LName"));
                }
            }
            rs.close();
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void fillFormWRTTable() {
        if (viewDeptTable.getModel().getRowCount() > 0) {
            departmentComboBox.setSelectedIndex(viewDeptTable.getSelectedRow());
            String tempCollectionOfNumOfSems[] = collectionOfNumOfSems.split("\\ ");
            String tempCollectionOfDeptSartYear[] = collectionOfStartYear.split("\\ ");
            deptCodeText.setText(viewDeptTable.getModel().getValueAt(viewDeptTable.getSelectedRow(), 0).toString());
            deptNameText.setText(viewDeptTable.getModel().getValueAt(viewDeptTable.getSelectedRow(), 1).toString());
            hodNameText.setText(viewDeptTable.getModel().getValueAt(viewDeptTable.getSelectedRow(), 2).toString());
            numSemestersText.setText(tempCollectionOfNumOfSems[1 + viewDeptTable.getSelectedRow()]);
            startYearText.setText(tempCollectionOfDeptSartYear[1 + viewDeptTable.getSelectedRow()]);

            String sql;
            sql = "SELECT count(*) FROM faculty where D_DeptCode=\"" + deptCodeText.getText() + "\"";
            try {
                ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
                while (rs.next()) {
                    numFacultiesText.setText(rs.getString("Count(*)"));
                }
                rs.close();
            } catch (Exception e) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            sql = "SELECT count(*) FROM student where D_DeptCode=\"" + deptCodeText.getText() + "\"";
            try {
                ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
                while (rs.next()) {
                    numStudentsText.setText(rs.getString("Count(*)"));
                }
                rs.close();
            } catch (Exception e) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        Run.Runner.RunnerObj.MainUIObj.show();
        this.dispose();
        Run.Runner.RunnerObj.MainUIObj.DepartmentDetailsObj=null;
    }//GEN-LAST:event_homeButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        homeButton.doClick();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            fillTabel();
        } catch (SQLException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        fillFormWRTTable();
        deptNameText.setEditable(false);
        deptCodeText.setEditable(false);
        hodNameText.setEditable(false);
        numFacultiesText.setEditable(false);
        numSemestersText.setEditable(false);
        numStudentsText.setEditable(false);
        startYearText.setEditable(false);
        selectHODButton.setEnabled(false);
        viewDeptTable.requestFocus();
    }//GEN-LAST:event_formWindowOpened

    private void viewDeptTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewDeptTableMouseClicked
        if (viewDeptTable.isEnabled()) {
            fillFormWRTTable();
        }
    }//GEN-LAST:event_viewDeptTableMouseClicked

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        deptNameText.setText(null);
        deptCodeText.setText(null);
        hodNameText.setText(null);
        numFacultiesText.setText(null);
        numSemestersText.setText(null);
        numStudentsText.setText(null);
        startYearText.setText(null);
        bad1.setText(" ");
        bad2.setText(" ");
        bad3.setText(" ");
        bad4.setText(" ");
        deptCodeText.requestFocus();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        clearButton.doClick();
        selectHODButton.setText("Select");
        selectHODButton.setEnabled(false);
        clearButton.setEnabled(false);
        cancelButton.setEnabled(false);
        deleteButton.setEnabled(true);
        deptNameText.setEditable(false);
        deptCodeText.setEditable(false);
        hodNameText.setEditable(false);
        numSemestersText.setEditable(false);
        startYearText.setEditable(false);
        viewDeptTable.setEnabled(true);
        viewDeptTable.getSelectionModel().setSelectionInterval(0, 0);
        viewDeptTable.requestFocus();
        departmentComboBox.setEnabled(true);
        if ("View".equals(globalPurpus)) {
            addOrModify.setText("Modify");
        } else {
            addOrModify.setText("Add");
        }
        fillFormWRTTable();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void addOrModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrModifyActionPerformed
        if ("View".equals(globalPurpus)) {
            addOrModify.setText("Modify");
        } else {
            addOrModify.setText("Add");
        }
        if ("Modify".equals(addOrModify.getText())) {
            modify();
        } else {
            add();
        }
    }//GEN-LAST:event_addOrModifyActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (viewDeptTable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a department.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (!viewDeptTable.getModel().getValueAt(viewDeptTable.convertRowIndexToModel(viewDeptTable.getSelectedRow()), 0).toString().equals(deptCodeText.getText())) {
            JOptionPane.showMessageDialog(null, "Please make sure your selection.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        viewDeptTable.setSelectionBackground(new java.awt.Color(255, 0, 0));
        authenticationDialog dialog = new authenticationDialog(new javax.swing.JFrame(), true, "<html>Note : If you delete this department then facultys, stud<br>ents and subjects of this department will get deleted.</html>");
        dialog.setTitle("Delete ?");
        dialog.setVisible(true);
        int returnStatus = dialog.returnStatus;
        dialog.dispose();
        if (returnStatus == 1) {
            int successful = 0;
            String departmentNameToDelete = viewDeptTable.getModel().getValueAt(viewDeptTable.getSelectedRow(), 0).toString();
            String sql = "delete from department where DeptCode=\"" + departmentNameToDelete + "\"";

            try {
                successful = dbConnect.getCon().createStatement().executeUpdate(sql);
            } catch (SQLException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

            if (successful == 1) {
                try {
                    fillTabel();
                } catch (SQLException ex) {
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                JOptionPane.showMessageDialog(null, departmentNameToDelete + " department deleted succeessfully.", "Information", JOptionPane.INFORMATION_MESSAGE);
            } else {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, departmentNameToDelete + " department not deleted.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            clearButton.doClick();
        }
        viewDeptTable.setSelectionBackground(new java.awt.Color(0, 102, 153));
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void deptCodeTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deptCodeTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addOrModify.requestFocus();
        }
    }//GEN-LAST:event_deptCodeTextKeyPressed

    private void deptNameTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deptNameTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addOrModify.requestFocus();
        }
    }//GEN-LAST:event_deptNameTextKeyPressed

    private void numSemestersTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numSemestersTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addOrModify.requestFocus();
        }
    }//GEN-LAST:event_numSemestersTextKeyPressed

    private void startYearTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startYearTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addOrModify.requestFocus();
        }
    }//GEN-LAST:event_startYearTextKeyPressed

    private void addOrModifyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addOrModifyKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addOrModify.doClick();
        }
    }//GEN-LAST:event_addOrModifyKeyPressed

    private void deleteButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deleteButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            deleteButton.doClick();
        }
    }//GEN-LAST:event_deleteButtonKeyPressed

    private void cancelButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cancelButton.doClick();
        }
    }//GEN-LAST:event_cancelButtonKeyPressed

    private void clearButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clearButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            clearButton.doClick();
        }
    }//GEN-LAST:event_clearButtonKeyPressed

    private void homeButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_homeButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            homeButton.doClick();
        }
    }//GEN-LAST:event_homeButtonKeyPressed

    private void deptCodeTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deptCodeTextKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_LEFT) {
            return;
        }
        if (deptCodeText.getText().length() > 4) {
            Toolkit.getDefaultToolkit().beep();
            deptCodeText.setText(deptCodeText.getText().substring(0, 4));
        }
        deptCodeText.setText(deptCodeText.getText().toUpperCase());
        if (deptCodeText.getText().matches("[A-Z][A-Z]*")) {
            bad1.setText(" ");
        } else {
            bad1.setText("!");
        }
    }//GEN-LAST:event_deptCodeTextKeyReleased

    private void viewDeptTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_viewDeptTableKeyReleased
        if (viewDeptTable.isEnabled()) {
            fillFormWRTTable();
        }
    }//GEN-LAST:event_viewDeptTableKeyReleased

    private String toNameFormate(String name, int lower) {
        if ("".equals(name)) {
            return name;
        }
        if (lower == 1) {
            name = name.toLowerCase();
        }
        name = name.replaceFirst(Character.toString(name.charAt(0)), Character.toString(name.toUpperCase().charAt(0)));
        return name;
    }

    private String toFullNameFormate(String name) {
        name = name.toLowerCase();
        String tempText[] = name.split("\\ ");
        name = "";
        for (int i = 0; i < tempText.length; i++) {
            name += toNameFormate(tempText[i], 1) + " ";
        }
        String tempText2[] = name.split("\\.");
        name = "";
        for (int i = 0; i < tempText2.length; i++) {
            name += toNameFormate(tempText2[i], 0) + ".";
        }
        name = name.substring(0, name.length() - 2);
        return name;
    }
    private void deptNameTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deptNameTextKeyReleased
        if (deptNameText.getText().matches("[a-zA-Z][ .a-zA-Z]*")) {
            bad2.setText(" ");
        } else {
            bad2.setText("!");
        }
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getKeyCode() == KeyEvent.VK_SPACE) {
            return;
        }
        if (deptNameText.getText().length() > 100) {
            Toolkit.getDefaultToolkit().beep();
            deptNameText.setText(deptNameText.getText().substring(0, 100));
        }
        deptNameText.setText(toFullNameFormate(deptNameText.getText()));
    }//GEN-LAST:event_deptNameTextKeyReleased

    private void numSemestersTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numSemestersTextKeyReleased
        if (numSemestersText.getText().length() > 3) {
            Toolkit.getDefaultToolkit().beep();
            numSemestersText.setText(numSemestersText.getText().substring(0, 3));
        }
        if (numSemestersText.getText().matches("[0-9][0-9]*")) {
            bad3.setText(" ");
        } else {
            bad3.setText("!");
        }
    }//GEN-LAST:event_numSemestersTextKeyReleased

    private void startYearTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startYearTextKeyReleased
        if (startYearText.getText().length() > 4) {
            Toolkit.getDefaultToolkit().beep();
            startYearText.setText(startYearText.getText().substring(0, 4));
        }
        if (startYearText.getText().matches("[0-9]*")) {
            bad4.setText(" ");
        } else {
            bad4.setText("!");
        }
    }//GEN-LAST:event_startYearTextKeyReleased

    private void departmentComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentComboBoxActionPerformed
        viewDeptTable.getSelectionModel().setSelectionInterval(departmentComboBox.getSelectedIndex(), departmentComboBox.getSelectedIndex());
        fillFormWRTTable();
    }//GEN-LAST:event_departmentComboBoxActionPerformed

    private void departmentComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_departmentComboBoxMouseEntered
        notification.setText("Select a department.");
    }//GEN-LAST:event_departmentComboBoxMouseEntered

    private void deptCodeLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deptCodeLabelMouseEntered
        notification.setText("Department code.");
    }//GEN-LAST:event_deptCodeLabelMouseEntered

    private void deptCodeTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deptCodeTextMouseEntered
        notification.setText("Selected department code.");
    }//GEN-LAST:event_deptCodeTextMouseEntered

    private void deptNameTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deptNameTextMouseEntered
        notification.setText("Selected department code.");
    }//GEN-LAST:event_deptNameTextMouseEntered

    private void deptNameLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deptNameLabelMouseEntered
        notification.setText("Department name.");
    }//GEN-LAST:event_deptNameLabelMouseEntered

    private void hodNameTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hodNameTextMouseEntered
        notification.setText("H.O.D of the selected department");
    }//GEN-LAST:event_hodNameTextMouseEntered

    private void hodNameLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hodNameLabelMouseEntered
        notification.setText("H.O.D name.");
    }//GEN-LAST:event_hodNameLabelMouseEntered

    private void selectHODButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectHODButtonMouseEntered
        if ("Select".equals(selectHODButton.getText())) {
            notification.setText("Select H.O.D of selected department.");
        } else {
            notification.setText("Click here to refresh the H.O.D name.");
        }
    }//GEN-LAST:event_selectHODButtonMouseEntered

    private void numSemestersTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_numSemestersTextMouseEntered
        notification.setText("Number of semester in the selected department.");
    }//GEN-LAST:event_numSemestersTextMouseEntered

    private void numSemestersLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_numSemestersLabelMouseEntered
        notification.setText("Number of semester.");
    }//GEN-LAST:event_numSemestersLabelMouseEntered

    private void startYearLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startYearLabelMouseEntered
        notification.setText("Department started year.");
    }//GEN-LAST:event_startYearLabelMouseEntered

    private void startYearTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startYearTextMouseEntered
        notification.setText("Selected department started year.");
    }//GEN-LAST:event_startYearTextMouseEntered

    private void addOrModifyMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addOrModifyMouseEntered
        if ("View".equals(globalPurpus)) {
            notification.setText("To modify the details of seleted department.");
        } else {
            notification.setText("To add a new department.");
        }
    }//GEN-LAST:event_addOrModifyMouseEntered

    private void deleteButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseEntered
        notification.setText("To delete the selected department.");
    }//GEN-LAST:event_deleteButtonMouseEntered

    private void cancelButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseEntered
        notification.setText("To cancel current operation.");
    }//GEN-LAST:event_cancelButtonMouseEntered

    private void clearButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearButtonMouseEntered
        notification.setText("To clear the text fields.");
    }//GEN-LAST:event_clearButtonMouseEntered

    private void homeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeButtonMouseEntered
        notification.setText("Go back to home.");
    }//GEN-LAST:event_homeButtonMouseEntered

    private void viewDeptTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewDeptTableMouseEntered
        notification.setText("Select a department.");
    }//GEN-LAST:event_viewDeptTableMouseEntered

    private void numFacultiesLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_numFacultiesLabelMouseEntered
        notification.setText("Total number of faculty.");
    }//GEN-LAST:event_numFacultiesLabelMouseEntered

    private void numFacultiesTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_numFacultiesTextMouseEntered
        notification.setText("Total number of faculty in selected department");
    }//GEN-LAST:event_numFacultiesTextMouseEntered

    private void numStudentsLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_numStudentsLabelMouseEntered
        notification.setText("Total number of students.");
    }//GEN-LAST:event_numStudentsLabelMouseEntered

    private void numStudentsTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_numStudentsTextMouseEntered
        notification.setText("Total number of studence in selected department.");
    }//GEN-LAST:event_numStudentsTextMouseEntered

    private void departmentComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_departmentComboBoxFocusGained
        notification.setText("Select a department.");
    }//GEN-LAST:event_departmentComboBoxFocusGained

    private void deptCodeTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deptCodeTextFocusGained
        notification.setText("Selected department code.");
    }//GEN-LAST:event_deptCodeTextFocusGained

    private void deptNameTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deptNameTextFocusGained
        notification.setText("Selected department code.");
    }//GEN-LAST:event_deptNameTextFocusGained

    private void hodNameTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hodNameTextFocusGained
        notification.setText("H.O.D of the selected department");
    }//GEN-LAST:event_hodNameTextFocusGained

    private void selectHODButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selectHODButtonFocusGained
        if ("Select".equals(selectHODButton.getText())) {
            notification.setText("Select H.O.D of selected department.");
        } else {
            notification.setText("Click here to refresh the H.O.D name.");
        }
    }//GEN-LAST:event_selectHODButtonFocusGained

    private void numSemestersTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numSemestersTextFocusGained
        notification.setText("Number of semester in the selected department.");
    }//GEN-LAST:event_numSemestersTextFocusGained

    private void startYearTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_startYearTextFocusGained
        notification.setText("Selected department started year.");
    }//GEN-LAST:event_startYearTextFocusGained

    private void numFacultiesTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numFacultiesTextFocusGained
        notification.setText("Total number of faculty in selected department");
    }//GEN-LAST:event_numFacultiesTextFocusGained

    private void numStudentsTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numStudentsTextFocusGained
        notification.setText("Total number of studence in selected department.");
    }//GEN-LAST:event_numStudentsTextFocusGained

    private void addOrModifyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addOrModifyFocusGained
        if ("View".equals(globalPurpus)) {
            notification.setText("To modify the details of seleted department.");
        } else {
            notification.setText("To add a new department.");
        }
    }//GEN-LAST:event_addOrModifyFocusGained

    private void deleteButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deleteButtonFocusGained
        notification.setText("To delete the selected department.");
    }//GEN-LAST:event_deleteButtonFocusGained

    private void cancelButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cancelButtonFocusGained
        notification.setText("To cancel current operation.");
    }//GEN-LAST:event_cancelButtonFocusGained

    private void clearButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_clearButtonFocusGained
        notification.setText("To clear the text fields.");
    }//GEN-LAST:event_clearButtonFocusGained

    private void homeButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_homeButtonFocusGained
        notification.setText("Go back to home.");
    }//GEN-LAST:event_homeButtonFocusGained

    private void viewDeptTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_viewDeptTableFocusGained
        notification.setText("Select a department.");
    }//GEN-LAST:event_viewDeptTableFocusGained

    private void selectHODButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectHODButtonActionPerformed
        String tempDeptCodeCollection = null;

        String sql = "select DeptCode from department order by DeptName";
        try {
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            while (rs.next()) {
                tempDeptCodeCollection += " " + rs.getString("DeptCode");
            }
            rs.close();
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String tempTempDeptCodeCollection[] = tempDeptCodeCollection.split("\\ ");
        String currentDeptCode = viewDeptTable.getModel().getValueAt(viewDeptTable.getSelectedRow(), 0).toString();
        int i;
        for (i = 0; i < tempTempDeptCodeCollection.length; i++) {
            if (tempTempDeptCodeCollection[i] == null ? currentDeptCode == null : tempTempDeptCodeCollection[i].equals(currentDeptCode)) {
                break;
            }
        }
        if ("Select".equals(selectHODButton.getText())) {
            selectHODButton.setText("Refresh");
            HODSelectorUI form = new HODSelectorUI("uiDeaprtment", i - 1);
            form.setIconImage(new ImageIcon(getClass().getResource("/main_package/resources/icon.png")).getImage());
            form.setVisible(true);
            this.hide();
        } else {
            selectHODButton.setText("Select");
            fillNewHODName();
        }
    }//GEN-LAST:event_selectHODButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton addOrModify;
    private javax.swing.JLabel bad1;
    private javax.swing.JLabel bad2;
    private javax.swing.JLabel bad3;
    private javax.swing.JLabel bad4;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox departmentComboBox;
    private javax.swing.JLabel deptCodeLabel;
    private javax.swing.JTextField deptCodeText;
    private javax.swing.JLabel deptNameLabel;
    private javax.swing.JTextField deptNameText;
    private javax.swing.JLabel hodNameLabel;
    private javax.swing.JTextField hodNameText;
    private javax.swing.JButton homeButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel notification;
    private javax.swing.JLabel numFacultiesLabel;
    private javax.swing.JTextField numFacultiesText;
    private javax.swing.JLabel numSemestersLabel;
    private javax.swing.JTextField numSemestersText;
    private javax.swing.JLabel numStudentsLabel;
    private javax.swing.JTextField numStudentsText;
    private javax.swing.JButton selectHODButton;
    private javax.swing.JLabel startYearLabel;
    private javax.swing.JTextField startYearText;
    private javax.swing.JPanel viewDeptPanel;
    private javax.swing.JTable viewDeptTable;
    // End of variables declaration//GEN-END:variables

    private void add() {
        if (deptCodeText.isEditable() == false) {
            addOrModify.setText("Save");
            cancelButton.setEnabled(true);
            clearButton.setEnabled(true);
            clearButton.doClick();
            deleteButton.setEnabled(false);
            deptNameText.setEditable(true);
            deptCodeText.setEditable(true);
            numSemestersText.setEditable(true);
            startYearText.setEditable(true);
            deptCodeText.requestFocus();
            viewDeptTable.clearSelection();
            viewDeptTable.setEnabled(false);
            deptCodeText.requestFocus();
            departmentComboBox.setEnabled(false);
        } else {
            if ("".equals(deptCodeText.getText())) {
                JOptionPane.showMessageDialog(null, "Department code field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                deptCodeText.requestFocus();
                return;
            }
            if ("!".equals(bad1.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate department code.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                deptCodeText.requestFocus();
                return;
            }
            if ("".equals(deptNameText.getText())) {
                JOptionPane.showMessageDialog(null, "Department name field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                deptNameText.requestFocus();
                return;
            }
            if ("!".equals(bad2.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate department name.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                deptNameText.requestFocus();
                return;
            }
            if ("".equals(numSemestersText.getText())) {
                JOptionPane.showMessageDialog(null, "Number of semester field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                numSemestersText.requestFocus();
                return;
            }
            if ("!".equals(bad3.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate number of semester.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                numSemestersText.requestFocus();
                return;
            }
            if (Integer.parseInt(numSemestersText.getText()) < 1) {
                JOptionPane.showMessageDialog(null, "Number of semester should be greater than 0.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                numSemestersText.requestFocus();
                return;
            }
            if ("!".equals(bad4.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate started year.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                startYearText.requestFocus();
                return;
            }
            cancelButton.setEnabled(false);
            deptNameText.setEditable(false);
            deleteButton.setEnabled(true);
            deptCodeText.setEditable(false);
            hodNameText.setEditable(false);
            numSemestersText.setEditable(false);
            startYearText.setEditable(false);
            clearButton.setEnabled(false);
            viewDeptTable.setEnabled(true);
            viewDeptTable.getSelectionModel().setSelectionInterval(0, 0);
            viewDeptTable.requestFocus();
            departmentComboBox.setEnabled(true);

            String sql = "Insert into department values('" + (deptCodeText.getText()) + "','" + (deptNameText.getText()) + "','" + (numSemestersText.getText()) + "','" + (startYearText.getText()) + "');";
            int successful = 0;
            try {
                successful = dbConnect.getCon().createStatement().executeUpdate(sql);
            } catch (SQLException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            if (successful == 1) {
                try {
                    fillTabel();
                } catch (SQLException ex) {
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                JOptionPane.showMessageDialog(null, "New department successfully added.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                fillFormWRTTable();
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, "Department not successfully added.", "Failed", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void modify() {
        if (viewDeptTable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a department.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (deptCodeText.isEditable() == false) {
            if (!viewDeptTable.getModel().getValueAt(viewDeptTable.convertRowIndexToModel(viewDeptTable.getSelectedRow()), 0).toString().equals(deptCodeText.getText())) {
                JOptionPane.showMessageDialog(null, "Please make sure your selection.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            deptCodeText.requestFocus();
            cancelButton.setEnabled(true);
            clearButton.setEnabled(true);
            selectHODButton.setEnabled(true);
            deleteButton.setEnabled(false);
            deptNameText.setEditable(true);
            deptCodeText.setEditable(true);
            numSemestersText.setEditable(true);
            startYearText.setEditable(true);
            deptCodeText.requestFocus();
            departmentComboBox.setEnabled(false);
            viewDeptTable.setEnabled(false);
            addOrModify.setText("Save");
        } else {
            if ("".equals(deptCodeText.getText())) {
                JOptionPane.showMessageDialog(null, "Department code field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                deptCodeText.requestFocus();
                return;
            }
            if ("!".equals(bad1.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate department code.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                deptCodeText.requestFocus();
                return;
            }
            if ("".equals(deptNameText.getText())) {
                JOptionPane.showMessageDialog(null, "Department name field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                deptNameText.requestFocus();
                return;
            }
            if ("!".equals(bad2.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate department name.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                deptNameText.requestFocus();
                return;
            }
            if ("".equals(numSemestersText.getText())) {
                JOptionPane.showMessageDialog(null, "Number of semester field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                numSemestersText.requestFocus();
                return;
            }
            if ("!".equals(bad3.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate number of semester.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                numSemestersText.requestFocus();
                return;
            }
            if (Integer.parseInt(numSemestersText.getText()) < 1) {
                JOptionPane.showMessageDialog(null, "Number of semester should be greater than 0.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                numSemestersText.requestFocus();
                return;
            }
            if ("!".equals(bad4.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate started year.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                startYearText.requestFocus();
                return;
            }
            cancelButton.setEnabled(false);
            deptNameText.setEditable(false);
            deleteButton.setEnabled(true);
            deptCodeText.setEditable(false);
            hodNameText.setEditable(false);
            numSemestersText.setEditable(false);
            startYearText.setEditable(false);
            clearButton.setEnabled(false);
            selectHODButton.setText("Select");
            selectHODButton.setEnabled(false);
            viewDeptTable.setEnabled(true);
            viewDeptTable.requestFocus();
            departmentComboBox.setEnabled(true);
            String sql = "Update department set DeptCode=\"" + deptCodeText.getText() + "\" , DeptName=\"" + deptNameText.getText() + "\" , NumOfSems=\"" + numSemestersText.getText() + "\" , DeptStartYear=\"" + startYearText.getText() + "\" where DeptCode=\"" + viewDeptTable.getModel().getValueAt(viewDeptTable.getSelectedRow(), 0).toString() + "\"";
            int successful = 0;
            try {
                successful = dbConnect.getCon().createStatement().executeUpdate(sql);
            } catch (SQLException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            if (successful == 1) {
                try {
                    fillTabel();
                } catch (SQLException ex) {
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                JOptionPane.showMessageDialog(null, "Department details successfully modified.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                fillFormWRTTable();
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, "Department details modification not successful.", "Failed", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void hierarchy() {

        String privilege = Run.Runner.RunnerObj.MainUIObj.getPrivilege();
        if (!("admin".equalsIgnoreCase(privilege))) {
            addOrModify.hide();
            deleteButton.hide();
            cancelButton.hide();
            clearButton.hide();
        }
    }
}
