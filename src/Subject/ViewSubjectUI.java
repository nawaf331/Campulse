/*
 * Form:ViewSubjectUI
 * version:0.1.7
 * Update: 12-08-2012 at 9.05 PM
 * 12-08-2012 at 12.05 AM
 * 15-08-2012 at 1.15 AM
 * 17-08-2012 at 9.29 PM
 * 17-08-2012 at 10.00 PM
 * 18-08-2012 at 8.33 PM Delete buttone authentication implemented
 * 18-08-2012 at 9.48 PM make sure updated.
 * 19-08-2012 at 11.33 PM reqst focus after clear
 * 23-08-2012 at 2.04 AM delete tune added
 * 23-08-2012 at 2.47 AM delete buttone color
 * 
 * 23-08-2012..hierarchy
 * 25-08-2012 at 1.15 AM icon 
 * 25-08-2012 at 1.49 hierarchy fully implimented
 * 30-08-2012 at 11.41 AM removed printl;
 * 30-08-2012 at update message modified.
 * 31-08-2012 at 1.58 AM no match found implemented.
 * 31-9-2012 at 2.57 PM kill object
 * 3-9-2012 at 3.37 PM delete interface
 */
package subject;

import Run.Runner;
import Run.dbConnect;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import main_package.authenticationDialog;

/**
 *
 * @author Nawaf
 */
public class ViewSubjectUI extends javax.swing.JFrame {

    /**
     * Creates new form ViewSubjectUI
     */
    public ViewSubjectUI() {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/main_package/resources/icon.png")).getImage());
        subjectTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        this.setLocationRelativeTo(null);
        alignSpinnerLeft();
        fillSubjectTable();
        fillReflectDeptComboBox();
        fillDeptFilterComboBox();
        fillsubTypeComboBox();
        setSemester();
        hierarchy();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewSubjPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        filterBySubCode = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        deptFilterCB = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        subjectTable = new javax.swing.JTable();
        semFilterCB = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        syllabusFilterCB = new javax.swing.JComboBox();
        subjPanel = new javax.swing.JPanel();
        subTypeLabel = new javax.swing.JLabel();
        deptCodeLabel = new javax.swing.JLabel();
        subNameLabel = new javax.swing.JLabel();
        syllabusOrderLabel = new javax.swing.JLabel();
        subCodeLabel = new javax.swing.JLabel();
        subTypeComboBox = new javax.swing.JComboBox();
        semLabel = new javax.swing.JLabel();
        subNameText = new javax.swing.JTextField();
        subCodeText = new javax.swing.JTextField();
        reflectDeptCodeCB = new javax.swing.JComboBox();
        syllabusOrderSpinner = new javax.swing.JSpinner();
        syllabusSchemeLabel = new javax.swing.JLabel();
        bad2 = new javax.swing.JLabel();
        bad1 = new javax.swing.JLabel();
        syllabuseSchemeComboBox = new javax.swing.JComboBox();
        semSpinner = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        deleteButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        modify = new javax.swing.JButton();
        homeButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        notification = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Subject details");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        viewSubjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Subject details"));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Find"));

        filterBySubCode.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        filterBySubCode.setToolTipText("Enter subject code or subject name to filter from the list.");
        filterBySubCode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                filterBySubCodeMouseEntered(evt);
            }
        });
        filterBySubCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterBySubCodeActionPerformed(evt);
            }
        });
        filterBySubCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                filterBySubCodeFocusGained(evt);
            }
        });
        filterBySubCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filterBySubCodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterBySubCodeKeyReleased(evt);
            }
        });

        jLabel2.setText("Dept Code. :");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel2MouseEntered(evt);
            }
        });

        deptFilterCB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        deptFilterCB.setToolTipText("Click and select department code from the list.");
        deptFilterCB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deptFilterCBMouseEntered(evt);
            }
        });
        deptFilterCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deptFilterCBActionPerformed(evt);
            }
        });
        deptFilterCB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deptFilterCBFocusGained(evt);
            }
        });

        subjectTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject Code", "Subject Name", "Syllabus Order", "Semester", "Dept", "Syllabus Scheme", "Subject Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        subjectTable.setToolTipText("Click on the subject to see the details.");
        subjectTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subjectTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                subjectTableMouseEntered(evt);
            }
        });
        subjectTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                subjectTableFocusGained(evt);
            }
        });
        subjectTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                subjectTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                subjectTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(subjectTable);
        subjectTable.getColumnModel().getColumn(0).setMinWidth(85);
        subjectTable.getColumnModel().getColumn(0).setPreferredWidth(85);
        subjectTable.getColumnModel().getColumn(0).setMaxWidth(85);
        subjectTable.getColumnModel().getColumn(2).setMinWidth(0);
        subjectTable.getColumnModel().getColumn(2).setPreferredWidth(0);
        subjectTable.getColumnModel().getColumn(2).setMaxWidth(0);
        subjectTable.getColumnModel().getColumn(3).setMinWidth(0);
        subjectTable.getColumnModel().getColumn(3).setPreferredWidth(0);
        subjectTable.getColumnModel().getColumn(3).setMaxWidth(0);
        subjectTable.getColumnModel().getColumn(4).setMinWidth(0);
        subjectTable.getColumnModel().getColumn(4).setPreferredWidth(0);
        subjectTable.getColumnModel().getColumn(4).setMaxWidth(0);
        subjectTable.getColumnModel().getColumn(5).setMinWidth(0);
        subjectTable.getColumnModel().getColumn(5).setPreferredWidth(0);
        subjectTable.getColumnModel().getColumn(5).setMaxWidth(0);
        subjectTable.getColumnModel().getColumn(6).setMinWidth(0);
        subjectTable.getColumnModel().getColumn(6).setPreferredWidth(0);
        subjectTable.getColumnModel().getColumn(6).setMaxWidth(0);

        semFilterCB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        semFilterCB.setToolTipText("Click and select subject code from the list.");
        semFilterCB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                semFilterCBMouseEntered(evt);
            }
        });
        semFilterCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semFilterCBActionPerformed(evt);
            }
        });
        semFilterCB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                semFilterCBFocusGained(evt);
            }
        });

        jLabel3.setText("Semester :");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel3MouseEntered(evt);
            }
        });

        jLabel1.setText("Syllabus :");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel1MouseEntered(evt);
            }
        });

        syllabusFilterCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "2002", "2006", "2010", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));
        syllabusFilterCB.setToolTipText("Click and select syllabus from the list.");
        syllabusFilterCB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                syllabusFilterCBMouseEntered(evt);
            }
        });
        syllabusFilterCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syllabusFilterCBActionPerformed(evt);
            }
        });
        syllabusFilterCB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                syllabusFilterCBFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(deptFilterCB, 0, 72, Short.MAX_VALUE))
                        .addGap(51, 51, 51)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(semFilterCB, 0, 64, Short.MAX_VALUE)
                            .addComponent(jLabel3))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(syllabusFilterCB, 0, 77, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(filterBySubCode, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deptFilterCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(semFilterCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(syllabusFilterCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(filterBySubCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {deptFilterCB, semFilterCB, syllabusFilterCB});

        subjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Subject details"));

        subTypeLabel.setText("Subject type :");
        subTypeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                subTypeLabelMouseEntered(evt);
            }
        });

        deptCodeLabel.setText("Dept code :");
        deptCodeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deptCodeLabelMouseEntered(evt);
            }
        });

        subNameLabel.setText("Subject name *:");
        subNameLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                subNameLabelMouseEntered(evt);
            }
        });

        syllabusOrderLabel.setText("Syllabus order :");
        syllabusOrderLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                syllabusOrderLabelMouseEntered(evt);
            }
        });

        subCodeLabel.setText("Subject code *:");
        subCodeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                subCodeLabelMouseEntered(evt);
            }
        });

        subTypeComboBox.setToolTipText("Click and select new subject type from the list.");
        subTypeComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                subTypeComboBoxMouseEntered(evt);
            }
        });
        subTypeComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                subTypeComboBoxFocusGained(evt);
            }
        });
        subTypeComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                subTypeComboBoxKeyPressed(evt);
            }
        });

        semLabel.setText("Semester :");
        semLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                semLabelMouseEntered(evt);
            }
        });

        subNameText.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        subNameText.setToolTipText("Enter new subject name.");
        subNameText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                subNameTextMouseEntered(evt);
            }
        });
        subNameText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                subNameTextFocusGained(evt);
            }
        });
        subNameText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                subNameTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                subNameTextKeyReleased(evt);
            }
        });

        subCodeText.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        subCodeText.setToolTipText("Enter new subject code.");
        subCodeText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                subCodeTextMouseEntered(evt);
            }
        });
        subCodeText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                subCodeTextFocusGained(evt);
            }
        });
        subCodeText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                subCodeTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                subCodeTextKeyReleased(evt);
            }
        });

        reflectDeptCodeCB.setToolTipText("Click and select new department code.");
        reflectDeptCodeCB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                reflectDeptCodeCBMouseEntered(evt);
            }
        });
        reflectDeptCodeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reflectDeptCodeCBActionPerformed(evt);
            }
        });
        reflectDeptCodeCB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                reflectDeptCodeCBFocusGained(evt);
            }
        });
        reflectDeptCodeCB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                reflectDeptCodeCBKeyPressed(evt);
            }
        });

        syllabusOrderSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 8, 1));
        syllabusOrderSpinner.setToolTipText("Select new syllabus order.");
        syllabusOrderSpinner.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                syllabusOrderSpinnerMouseEntered(evt);
            }
        });
        syllabusOrderSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                syllabusOrderSpinnerFocusGained(evt);
            }
        });
        syllabusOrderSpinner.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                syllabusOrderSpinnerKeyPressed(evt);
            }
        });

        syllabusSchemeLabel.setText("Syllabus scheme :");
        syllabusSchemeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                syllabusSchemeLabelMouseEntered(evt);
            }
        });

        bad2.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad2.setForeground(new java.awt.Color(255, 0, 0));
        bad2.setText(" ");

        bad1.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad1.setForeground(new java.awt.Color(255, 0, 0));
        bad1.setText(" ");

        syllabuseSchemeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2002", "2006", "2010", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));
        syllabuseSchemeComboBox.setToolTipText("Click and select new syllabus scheme  from the list.");
        syllabuseSchemeComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                syllabuseSchemeComboBoxMouseEntered(evt);
            }
        });
        syllabuseSchemeComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                syllabuseSchemeComboBoxFocusGained(evt);
            }
        });
        syllabuseSchemeComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                syllabuseSchemeComboBoxKeyPressed(evt);
            }
        });

        semSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));
        semSpinner.setToolTipText("Select new semester.");
        semSpinner.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                semSpinnerMouseEntered(evt);
            }
        });
        semSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                semSpinnerFocusGained(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Actions-edit-delete-icon.png"))); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.setToolTipText("<html>\nStep 1, Select subject from the table.<br>\nStep 2, Click delete button to delete the selected subject.\n</html>");
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteButtonMouseEntered(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        deleteButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deleteButtonFocusGained(evt);
            }
        });
        deleteButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deleteButtonKeyPressed(evt);
            }
        });

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Button-cancel-icon.png"))); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.setToolTipText("Click on cancel button to cancel the modification.");
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancelButtonMouseEntered(evt);
            }
        });
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        cancelButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cancelButtonFocusGained(evt);
            }
        });
        cancelButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelButtonKeyPressed(evt);
            }
        });

        modify.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        modify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Text-Edit-icon.png"))); // NOI18N
        modify.setText("Modify");
        modify.setToolTipText("<html>\nStep 1, Select subject from the table.<br>\nStep 2, Click modify button to modify the details.<br>\nStep 3, After completing modification click on the save button.\n</html>");
        modify.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                modifyMouseEntered(evt);
            }
        });
        modify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyActionPerformed(evt);
            }
        });
        modify.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                modifyFocusGained(evt);
            }
        });
        modify.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                modifyKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                modifyKeyReleased(evt);
            }
        });

        homeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/home-icon.png"))); // NOI18N
        homeButton.setText("Home");
        homeButton.setToolTipText("Click home button to go back to home.");
        homeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                homeButtonMouseEntered(evt);
            }
        });
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });
        homeButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                homeButtonFocusGained(evt);
            }
        });
        homeButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                homeButtonKeyPressed(evt);
            }
        });

        clearButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Actions-edit-clear-icon.png"))); // NOI18N
        clearButton.setText("Clear");
        clearButton.setToolTipText("Click clear button to clear the form fields.");
        clearButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                clearButtonMouseEntered(evt);
            }
        });
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        clearButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearButtonFocusGained(evt);
            }
        });
        clearButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                clearButtonKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modify, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cancelButton))
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(homeButton)
                        .addGap(91, 91, 91))))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, clearButton, deleteButton, homeButton, modify});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(modify, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cancelButton, clearButton, deleteButton, homeButton, modify});

        javax.swing.GroupLayout subjPanelLayout = new javax.swing.GroupLayout(subjPanel);
        subjPanel.setLayout(subjPanelLayout);
        subjPanelLayout.setHorizontalGroup(
            subjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subjPanelLayout.createSequentialGroup()
                .addGroup(subjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(subjPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(subjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(subjPanelLayout.createSequentialGroup()
                                .addComponent(deptCodeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                                .addComponent(reflectDeptCodeCB, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subjPanelLayout.createSequentialGroup()
                                .addComponent(syllabusOrderLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(syllabusOrderSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subjPanelLayout.createSequentialGroup()
                                .addGroup(subjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(subTypeLabel)
                                    .addComponent(syllabusSchemeLabel)
                                    .addComponent(semLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(subjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(subTypeComboBox, 0, 156, Short.MAX_VALUE)
                                    .addComponent(syllabuseSchemeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(semSpinner)))
                            .addGroup(subjPanelLayout.createSequentialGroup()
                                .addGroup(subjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(subNameLabel)
                                    .addComponent(subCodeLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(subjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(subNameText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(subCodeText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(subjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bad2)
                            .addComponent(bad1)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        subjPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {reflectDeptCodeCB, subCodeText, subNameText, subTypeComboBox, syllabusOrderSpinner, syllabuseSchemeComboBox});

        subjPanelLayout.setVerticalGroup(
            subjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reflectDeptCodeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deptCodeLabel))
                .addGap(18, 18, 18)
                .addGroup(subjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subCodeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subCodeLabel)
                    .addComponent(bad1))
                .addGap(18, 18, 18)
                .addGroup(subjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subNameLabel)
                    .addComponent(bad2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(subjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(semLabel)
                    .addComponent(semSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(subjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(syllabusSchemeLabel)
                    .addComponent(syllabuseSchemeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(subjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subTypeLabel))
                .addGap(18, 18, 18)
                .addGroup(subjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(syllabusOrderSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(syllabusOrderLabel))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        subjPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {reflectDeptCodeCB, subCodeText, subNameText, subTypeComboBox, syllabusOrderSpinner, syllabuseSchemeComboBox});

        notification.setForeground(new java.awt.Color(51, 51, 251));
        notification.setText(" ");

        javax.swing.GroupLayout viewSubjPanelLayout = new javax.swing.GroupLayout(viewSubjPanel);
        viewSubjPanel.setLayout(viewSubjPanelLayout);
        viewSubjPanelLayout.setHorizontalGroup(
            viewSubjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewSubjPanelLayout.createSequentialGroup()
                .addGroup(viewSubjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(viewSubjPanelLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(subjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(viewSubjPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(notification, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        viewSubjPanelLayout.setVerticalGroup(
            viewSubjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewSubjPanelLayout.createSequentialGroup()
                .addGroup(viewSubjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(subjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notification))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(viewSubjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(viewSubjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void subTypeComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subTypeComboBoxMouseEntered
        notification.setText("Select new subject type form the list.");
    }//GEN-LAST:event_subTypeComboBoxMouseEntered

    private void subNameTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_subNameTextFocusGained
        notification.setText("Enter new subject name.");
    }//GEN-LAST:event_subNameTextFocusGained

    private void subCodeTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_subCodeTextFocusGained
        notification.setText("Enter new subject code.");
    }//GEN-LAST:event_subCodeTextFocusGained

    private void reflectDeptCodeCBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reflectDeptCodeCBMouseEntered
        notification.setText("Select department code from the list.");
    }//GEN-LAST:event_reflectDeptCodeCBMouseEntered

    private void syllabusOrderSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_syllabusOrderSpinnerFocusGained
        notification.setText("Select new syllabuse order.");
    }//GEN-LAST:event_syllabusOrderSpinnerFocusGained

    private void subjectTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectTableMouseEntered
        notification.setText("Click to see the details of subject.");
    }//GEN-LAST:event_subjectTableMouseEntered

    private void modifyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_modifyKeyReleased
    }//GEN-LAST:event_modifyKeyReleased

    private void modifyMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modifyMouseEntered
        notification.setText("Click to modify the selected subject details.");
    }//GEN-LAST:event_modifyMouseEntered

    private void deleteButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseEntered
        notification.setText("Click to delete the selected subject.");
    }//GEN-LAST:event_deleteButtonMouseEntered

    private void clearButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearButtonMouseEntered
        notification.setText("Click to clear the form fields.");
    }//GEN-LAST:event_clearButtonMouseEntered

    private void homeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeButtonMouseEntered
        notification.setText("Go back to home.");
    }//GEN-LAST:event_homeButtonMouseEntered

    private void modifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyActionPerformed
        if (subjectTable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a subject.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (subjectTable.isEnabled()) {
            if (subjectTable.getModel().getValueAt(subjectTable.convertRowIndexToModel(subjectTable.getSelectedRow()), 0).toString() == null ? subCodeText.getText() != null : !subjectTable.getModel().getValueAt(subjectTable.convertRowIndexToModel(subjectTable.getSelectedRow()), 0).toString().equals(subCodeText.getText())) {
                JOptionPane.showMessageDialog(null, "Please make sure your selection.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            enableNew();
            deleteButton.setEnabled(false);
        } else {
            if ("".equals(subCodeText.getText())) {
                JOptionPane.showMessageDialog(null, "Subject code field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                subCodeText.requestFocus();
                return;
            }
            if ("!".equals(bad1.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate subject code.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                subCodeText.requestFocus();
                return;
            }
            if ("".equals(subNameText.getText())) {
                JOptionPane.showMessageDialog(null, "Subject name field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                subNameText.requestFocus();
                return;
            }
            if ("!".equals(bad2.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate subject name.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                subNameText.requestFocus();
                return;
            }
            String deptTemp = reflectDeptCodeCB.getSelectedItem().toString();
            int semTemp = Integer.parseInt(semSpinner.getValue().toString());
            String smlTemp = subTypeComboBox.getSelectedItem().toString();
            int SyllabusTemp = Integer.parseInt(syllabuseSchemeComboBox.getSelectedItem().toString());
            int orderTemp = Integer.parseInt(syllabusOrderSpinner.getValue().toString());
            String updateSubQuery = "update subject set SubCode=\"" + (subCodeText.getText()) + "\",D_DeptCode=\"" + (deptTemp) + "\",SubName=\"" + (subNameText.getText()) + "\",Sem=" + (semTemp) + ",SML_SubType=\"" + (smlTemp) + "\",SyllabusScheme=" + (SyllabusTemp) + ",SyllabusOrder=" + (orderTemp) + " where SubCode=\"" + ((String) subjectTable.getModel().getValueAt(subjectTable.convertRowIndexToModel(subjectTable.getSelectedRow()), 0) + "\"");
            int updateSuccessful = 0;
            try {
                updateSuccessful = dbConnect.getCon().createStatement().executeUpdate(updateSubQuery);
            } catch (SQLException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            if (updateSuccessful == 1) {
                refillForm();
                disableNew();
                deleteButton.setEnabled(true);
                JOptionPane.showMessageDialog(null, "Subject details successfully modified.", "Information", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Subject details modification not successful.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_modifyActionPerformed

    private void subjectTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_subjectTableFocusGained
        notification.setText("Click to see the details of subject.");
    }//GEN-LAST:event_subjectTableFocusGained

    private void subjectTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectTableMouseClicked
        if (subjectTable.isEnabled()) {
            if (subjectTable.getRowCount() > 0) {
                reflectTextBoxes();
            }
        }
    }//GEN-LAST:event_subjectTableMouseClicked

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clear();
    }//GEN-LAST:event_clearButtonActionPerformed
    private void clear() {
        subCodeText.setText(null);
        subNameText.setText(null);
        reflectDeptCodeCB.setSelectedIndex(0);
        semSpinner.setValue(1);
        subTypeComboBox.setSelectedIndex(0);
        syllabusOrderSpinner.setValue(1);
        syllabuseSchemeComboBox.setSelectedItem("2010");
        subCodeText.requestFocus();
        bad1.setText(" ");
        bad2.setText(" ");
        reflectDeptCodeCB.requestFocus();
    }
    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        Run.Runner.RunnerObj.MainUIObj.show();
        this.dispose();
        Run.Runner.RunnerObj.MainUIObj.ViewSubjectUIObj = null;
    }//GEN-LAST:event_homeButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Run.Runner.RunnerObj.MainUIObj.show();
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (subjectTable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a subject.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (subjectTable.getModel().getValueAt(subjectTable.convertRowIndexToModel(subjectTable.getSelectedRow()), 0).toString() == null ? subCodeText.getText() != null : !subjectTable.getModel().getValueAt(subjectTable.convertRowIndexToModel(subjectTable.getSelectedRow()), 0).toString().equals(subCodeText.getText())) {
            JOptionPane.showMessageDialog(null, "Please make sure your selection.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        subjectTable.setSelectionBackground(new java.awt.Color(255, 0, 0));
        authenticationDialog dialog = new authenticationDialog(new javax.swing.JFrame(), true, "<html>Note : If you delete this subject then subject handling<br>and marks of this subject will get deleted.</html>");
        dialog.setTitle("Delete ?");
        dialog.setVisible(true);
        int returnStatus = dialog.returnStatus;
        dialog.dispose();
        if (returnStatus == 1) {

            int deleteSuccessful = 0;
            String subCodeToDelete = (String) subjectTable.getModel().getValueAt(subjectTable.convertRowIndexToModel(subjectTable.getSelectedRow()), 0);
            String deleteSubQuery = "delete from subject where SubCode=\"" + subCodeToDelete + "\"";
            try {
                deleteSuccessful = dbConnect.getCon().createStatement().executeUpdate(deleteSubQuery);
            } catch (SQLException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

            if (deleteSuccessful == 1) {
                JOptionPane.showMessageDialog(null, "Subject \"" + subCodeToDelete + "\" succeessfully deleted.", "Information", JOptionPane.INFORMATION_MESSAGE);
                removeSelectedRows(subjectTable);
                clearButton.doClick();
                filter();
            } else {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, "Subject \"" + subCodeToDelete + "\" deletetion not successful.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        subjectTable.setSelectionBackground(new java.awt.Color(0, 102, 153));
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void filterBySubCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterBySubCodeKeyReleased
        filter();
    }//GEN-LAST:event_filterBySubCodeKeyReleased

    private void deptFilterCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deptFilterCBActionPerformed
        fillSemesterComboBox();
    }//GEN-LAST:event_deptFilterCBActionPerformed

    private void reflectDeptCodeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reflectDeptCodeCBActionPerformed
        setSemester();
    }//GEN-LAST:event_reflectDeptCodeCBActionPerformed

    private void filterBySubCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterBySubCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filterBySubCodeActionPerformed

    private void semFilterCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_semFilterCBActionPerformed
        filter();
    }//GEN-LAST:event_semFilterCBActionPerformed

    private void syllabusFilterCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syllabusFilterCBActionPerformed
        filter();
    }//GEN-LAST:event_syllabusFilterCBActionPerformed

    private void subCodeTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_subCodeTextKeyReleased
        if (subCodeText.getText().length() > 10) {
            Toolkit.getDefaultToolkit().beep();
            subCodeText.setText(subCodeText.getText().substring(0, 10));
        }
        if (!subCodeText.getText().matches("[a-zA-Z0-9][a-zA-Z0-9]*")) {
            bad1.setText("!");
        } else {
            bad1.setText(" ");
        }
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_LEFT) {
            return;
        }
        subCodeText.setText(subCodeText.getText().toUpperCase());
    }//GEN-LAST:event_subCodeTextKeyReleased

    private void subNameTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_subNameTextKeyReleased
        if (subNameText.getText().length() > 50) {
            Toolkit.getDefaultToolkit().beep();
            subNameText.setText(subNameText.getText().substring(0, 50));
        }
        if (!subNameText.getText().matches("[a-zA-Z][ .a-zA-Z]*")) {
            bad2.setText("!");
        } else {
            bad2.setText(" ");
        }
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_SPACE) {
            return;
        }
        subNameText.setText(toFullNameFormate(subNameText.getText()));
    }//GEN-LAST:event_subNameTextKeyReleased

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        disableNew();
        deleteButton.setEnabled(true);
        reflectTextBoxes();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        disableNew();
    }//GEN-LAST:event_formWindowOpened

    private void subjectTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_subjectTableKeyReleased
        if (subjectTable.isEnabled()) {
            if (subjectTable.getRowCount() > 0) {
                reflectTextBoxes();
            }
        }
    }//GEN-LAST:event_subjectTableKeyReleased

    private void subCodeTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_subCodeTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modify.requestFocus();
        }
    }//GEN-LAST:event_subCodeTextKeyPressed

    private void subNameTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_subNameTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modify.requestFocus();
        }
    }//GEN-LAST:event_subNameTextKeyPressed

    private void reflectDeptCodeCBKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_reflectDeptCodeCBKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modify.requestFocus();
        }
    }//GEN-LAST:event_reflectDeptCodeCBKeyPressed

    private void syllabuseSchemeComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_syllabuseSchemeComboBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modify.requestFocus();
        }
    }//GEN-LAST:event_syllabuseSchemeComboBoxKeyPressed

    private void subTypeComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_subTypeComboBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modify.requestFocus();
        }
    }//GEN-LAST:event_subTypeComboBoxKeyPressed

    private void syllabusOrderSpinnerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_syllabusOrderSpinnerKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modify.requestFocus();
        }
    }//GEN-LAST:event_syllabusOrderSpinnerKeyPressed

    private void modifyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_modifyKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modify.doClick();
        }
    }//GEN-LAST:event_modifyKeyPressed

    private void cancelButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cancelButton.doClick();
        }
    }//GEN-LAST:event_cancelButtonKeyPressed

    private void deleteButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deleteButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            deleteButton.doClick();
        }
    }//GEN-LAST:event_deleteButtonKeyPressed

    private void clearButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clearButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            clearButton.doClick();
        }
    }//GEN-LAST:event_clearButtonKeyPressed

    private void homeButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_homeButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            homeButton.doClick();
        }
    }//GEN-LAST:event_homeButtonKeyPressed

    private void filterBySubCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterBySubCodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            subjectTable.requestFocus();
        }
    }//GEN-LAST:event_filterBySubCodeKeyPressed

    private void subjectTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_subjectTableKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            filterBySubCode.requestFocus();
        }
    }//GEN-LAST:event_subjectTableKeyPressed

    private void jLabel2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseEntered
        notification.setText("Department code.");
    }//GEN-LAST:event_jLabel2MouseEntered

    private void jLabel3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseEntered
        notification.setText("Semester.");
    }//GEN-LAST:event_jLabel3MouseEntered

    private void jLabel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseEntered
        notification.setText("Syllabus scheme.");
    }//GEN-LAST:event_jLabel1MouseEntered

    private void deptFilterCBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deptFilterCBMouseEntered
        notification.setText("Select department code from the list.");
    }//GEN-LAST:event_deptFilterCBMouseEntered

    private void deptFilterCBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deptFilterCBFocusGained
        notification.setText("Select department code from the list.");
    }//GEN-LAST:event_deptFilterCBFocusGained

    private void semFilterCBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_semFilterCBMouseEntered
        notification.setText("Select semester from the list.");
    }//GEN-LAST:event_semFilterCBMouseEntered

    private void semFilterCBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_semFilterCBFocusGained
        notification.setText("Select semester from the list.");
    }//GEN-LAST:event_semFilterCBFocusGained

    private void syllabusFilterCBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_syllabusFilterCBMouseEntered
        notification.setText("Select syllabus scheme from the list.");
    }//GEN-LAST:event_syllabusFilterCBMouseEntered

    private void syllabusFilterCBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_syllabusFilterCBFocusGained
        notification.setText("Select syllabus scheme from the list.");
    }//GEN-LAST:event_syllabusFilterCBFocusGained

    private void filterBySubCodeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterBySubCodeMouseEntered
        notification.setText("Enter text to search.");
    }//GEN-LAST:event_filterBySubCodeMouseEntered

    private void filterBySubCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filterBySubCodeFocusGained
        notification.setText("Enter text to search.");
    }//GEN-LAST:event_filterBySubCodeFocusGained

    private void deptCodeLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deptCodeLabelMouseEntered
        notification.setText("Department code.");
    }//GEN-LAST:event_deptCodeLabelMouseEntered

    private void subCodeLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subCodeLabelMouseEntered
        notification.setText("Subject code.");
    }//GEN-LAST:event_subCodeLabelMouseEntered

    private void subNameLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subNameLabelMouseEntered
        notification.setText("Subject name.");
    }//GEN-LAST:event_subNameLabelMouseEntered

    private void semLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_semLabelMouseEntered
        notification.setText("Semester.");
    }//GEN-LAST:event_semLabelMouseEntered

    private void syllabusSchemeLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_syllabusSchemeLabelMouseEntered
        notification.setText("Syllabus scheme.");
    }//GEN-LAST:event_syllabusSchemeLabelMouseEntered

    private void subTypeLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subTypeLabelMouseEntered
        notification.setText("Subject type.");
    }//GEN-LAST:event_subTypeLabelMouseEntered

    private void syllabusOrderLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_syllabusOrderLabelMouseEntered
        notification.setText("Syllabus order.");
    }//GEN-LAST:event_syllabusOrderLabelMouseEntered

    private void reflectDeptCodeCBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_reflectDeptCodeCBFocusGained
        notification.setText("Select department code from the list.");
    }//GEN-LAST:event_reflectDeptCodeCBFocusGained

    private void subCodeTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subCodeTextMouseEntered
        notification.setText("Enter new subject code.");
    }//GEN-LAST:event_subCodeTextMouseEntered

    private void subNameTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subNameTextMouseEntered
        notification.setText("Enter new subject name.");
    }//GEN-LAST:event_subNameTextMouseEntered

    private void semSpinnerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_semSpinnerMouseEntered
        notification.setText("Select new semester.");
    }//GEN-LAST:event_semSpinnerMouseEntered

    private void semSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_semSpinnerFocusGained
        notification.setText("Select new semester.");
    }//GEN-LAST:event_semSpinnerFocusGained

    private void syllabuseSchemeComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_syllabuseSchemeComboBoxMouseEntered
        notification.setText("Select new syllabus scheme form the list.");
    }//GEN-LAST:event_syllabuseSchemeComboBoxMouseEntered

    private void syllabuseSchemeComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_syllabuseSchemeComboBoxFocusGained
        notification.setText("Select new syllabus scheme form the list.");
    }//GEN-LAST:event_syllabuseSchemeComboBoxFocusGained

    private void subTypeComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_subTypeComboBoxFocusGained
        notification.setText("Select new subject type form the list.");
    }//GEN-LAST:event_subTypeComboBoxFocusGained

    private void syllabusOrderSpinnerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_syllabusOrderSpinnerMouseEntered
        notification.setText("Select new syllabuse order.");
    }//GEN-LAST:event_syllabusOrderSpinnerMouseEntered

    private void modifyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_modifyFocusGained
        notification.setText("Click to modify the selected subject details.");
    }//GEN-LAST:event_modifyFocusGained

    private void cancelButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseEntered
        notification.setText("Click to cancel the modification.");
    }//GEN-LAST:event_cancelButtonMouseEntered

    private void cancelButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cancelButtonFocusGained
        notification.setText("Click to cancel the modification.");
    }//GEN-LAST:event_cancelButtonFocusGained

    private void deleteButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deleteButtonFocusGained
        notification.setText("Click to delete the selected subject.");
    }//GEN-LAST:event_deleteButtonFocusGained

    private void clearButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_clearButtonFocusGained
        notification.setText("Click to clear the form fields.");
    }//GEN-LAST:event_clearButtonFocusGained

    private void homeButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_homeButtonFocusGained
        notification.setText("Go back to home.");
    }//GEN-LAST:event_homeButtonFocusGained
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bad1;
    private javax.swing.JLabel bad2;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel deptCodeLabel;
    private javax.swing.JComboBox deptFilterCB;
    private javax.swing.JTextField filterBySubCode;
    private javax.swing.JButton homeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modify;
    private javax.swing.JLabel notification;
    private javax.swing.JComboBox reflectDeptCodeCB;
    private javax.swing.JComboBox semFilterCB;
    private javax.swing.JLabel semLabel;
    private javax.swing.JSpinner semSpinner;
    private javax.swing.JLabel subCodeLabel;
    private javax.swing.JTextField subCodeText;
    private javax.swing.JLabel subNameLabel;
    private javax.swing.JTextField subNameText;
    private javax.swing.JComboBox subTypeComboBox;
    private javax.swing.JLabel subTypeLabel;
    private javax.swing.JPanel subjPanel;
    private javax.swing.JTable subjectTable;
    private javax.swing.JComboBox syllabusFilterCB;
    private javax.swing.JLabel syllabusOrderLabel;
    private javax.swing.JSpinner syllabusOrderSpinner;
    private javax.swing.JLabel syllabusSchemeLabel;
    private javax.swing.JComboBox syllabuseSchemeComboBox;
    private javax.swing.JPanel viewSubjPanel;
    // End of variables declaration//GEN-END:variables

    private String toNameFormate(String name, int lower) {
        if ("".equals(name)) {
            return name;
        }
        if (lower == 1) {
            name = name.toLowerCase();
        }
        name = name.replaceFirst(Character.toString(name.charAt(0)), Character.toString(name.toUpperCase().charAt(0)));
        return name;
    }

    private String toFullNameFormate(String name) {
        name = name.toLowerCase();
        String tempText[] = name.split("\\ ");
        name = "";
        for (int i = 0; i < tempText.length; i++) {
            name += toNameFormate(tempText[i], 1) + " ";
        }
        String tempText2[] = name.split("\\.");
        name = "";
        for (int i = 0; i < tempText2.length; i++) {
            name += toNameFormate(tempText2[i], 0) + ".";
        }
        name = name.substring(0, name.length() - 2);
        return name;
    }

    private void filter() {
        String deptCode = deptFilterCB.getSelectedItem().toString();
        String sem = semFilterCB.getSelectedItem().toString();
        String syllabus = syllabusFilterCB.getSelectedItem().toString();
        String userText = filterBySubCode.getText();

        if ("All".equals(deptCode)) {
            deptCode = "";
        }
        if ("All".equals(sem)) {
            sem = "";
        }
        if ("All".equals(syllabus)) {
            syllabus = "";
        }

        ArrayList<RowFilter<Object, Object>> andFilters = new ArrayList<RowFilter<Object, Object>>();
        andFilters.add(RowFilter.regexFilter("(?i)" + userText, 0, 1));
        andFilters.add(RowFilter.regexFilter("(?i)" + deptCode, 4));
        andFilters.add(RowFilter.regexFilter("(?i)" + sem, 3));
        andFilters.add(RowFilter.regexFilter("(?i)" + syllabus, 5));

        DefaultTableModel model = (DefaultTableModel) subjectTable.getModel();
        final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
        sorter.setRowFilter(RowFilter.andFilter(andFilters));
        subjectTable.setRowSorter(sorter);
        if (subjectTable.getRowCount() > 0) {
            subjectTable.getSelectionModel().setSelectionInterval(0, 0);
            subCodeText.setForeground(Color.black);
            reflectTextBoxes();
        } else {
            clear();
            Toolkit.getDefaultToolkit().beep();
            subCodeText.setForeground(Color.red);
            subCodeText.setText("No match found.");
            filterBySubCode.requestFocus();
        }
    }

    private void fillSubjectTable() {
        DefaultTableModel dm = (DefaultTableModel) subjectTable.getModel();
        dm.getDataVector().removeAllElements();
        try {
            DefaultTableModel model = (DefaultTableModel) subjectTable.getModel();
            String fillTableQuery = "Select * from subject";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(fillTableQuery);
            while (rs.next()) {
                String subC = rs.getString("SubCode");
                String dept = rs.getString("D_DeptCode");
                String subN = rs.getString("SubName");
                String sem = rs.getString("Sem");
                String syllabusS = rs.getString("SyllabusScheme");
                String syllabusO = rs.getString("SyllabusOrder");
                String subjectT = rs.getString("SML_SubType");
                model.addRow(new Object[]{subC, subN, syllabusO, sem, dept, syllabusS, subjectT});
            }
            rs.close();
        } catch (SQLException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void fillDeptFilterComboBox() {
        try {
            deptFilterCB.setModel(new javax.swing.DefaultComboBoxModel());
            String deptQuery = "Select * from department";
            deptFilterCB.removeAllItems();
            deptFilterCB.addItem("All");
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(deptQuery);
            while (rs.next()) {
                String deptTemp = rs.getString("DeptCode");
                deptFilterCB.addItem(deptTemp);
            }
            rs.close();
        } catch (SQLException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void reflectTextBoxes() {
        if (subjectTable.getSelectedRow() == -1) {
            return;
        }
        int row = subjectTable.convertRowIndexToModel(subjectTable.getSelectedRow());
        reflectDeptCodeCB.setSelectedItem((String) subjectTable.getModel().getValueAt(row, 4));
        subCodeText.setText((String) subjectTable.getModel().getValueAt(row, 0));
        subNameText.setText((String) subjectTable.getModel().getValueAt(row, 1));
        syllabuseSchemeComboBox.setSelectedItem((String) subjectTable.getModel().getValueAt(row, 5));
        semSpinner.setValue(Integer.parseInt((String) subjectTable.getModel().getValueAt(row, 3)));
        syllabusOrderSpinner.setValue(Integer.parseInt((String) subjectTable.getModel().getValueAt(row, 2)));
        subTypeComboBox.setSelectedItem((String) subjectTable.getModel().getValueAt(row, 6));
        hierarchy();
    }

    private void fillReflectDeptComboBox() {
        try {
            reflectDeptCodeCB.setModel(new javax.swing.DefaultComboBoxModel());
            String deptQuery = "Select * from department";
            reflectDeptCodeCB.removeAllItems();
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(deptQuery);
            while (rs.next()) {
                String deptTemp = rs.getString("DeptCode");
                reflectDeptCodeCB.addItem(deptTemp);
            }
            rs.close();
        } catch (SQLException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void alignSpinnerLeft() {
        JSpinner.DefaultEditor semEditor = new JSpinner.DefaultEditor(semSpinner);
        semEditor.getTextField().setHorizontalAlignment(SwingUtilities.LEFT);
        semSpinner.setEditor(semEditor);

        JSpinner.DefaultEditor orderEditor = new JSpinner.DefaultEditor(syllabusOrderSpinner);
        orderEditor.getTextField().setHorizontalAlignment(SwingUtilities.LEFT);
        syllabusOrderSpinner.setEditor(orderEditor);
    }

    private void fillsubTypeComboBox() {
        try {
            subTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel());
            String subjQuery = "Select * from submarkslimit";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(subjQuery);
            while (rs.next()) {
                String subjTemp = rs.getString("SubType");
                subTypeComboBox.addItem(subjTemp);
            }
            rs.close();
        } catch (SQLException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void refillForm() {
        removeSelectedRows(subjectTable);
        try {
            DefaultTableModel model = (DefaultTableModel) subjectTable.getModel();
            String fillTableQuery = "Select * from subject where SubCode=\"" + subCodeText.getText() + "\"";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(fillTableQuery);
            while (rs.next()) {
                String subC = rs.getString("SubCode");
                String dept = rs.getString("D_DeptCode");
                String subN = rs.getString("SubName");
                String sem = rs.getString("Sem");
                String syllabusS = rs.getString("SyllabusScheme");
                String syllabusO = rs.getString("SyllabusOrder");
                String subjectT = rs.getString("SML_SubType");
                model.addRow(new Object[]{subC, subN, syllabusO, sem, dept, syllabusS, subjectT});
            }
            rs.close();
        } catch (SQLException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        if (subjectTable.getRowCount() > 0) {
            subjectTable.getSelectionModel().setSelectionInterval(subjectTable.getRowCount() - 1, subjectTable.getRowCount() - 1);
            reflectTextBoxes();
        } else {
            clear();
            filterBySubCode.requestFocus();
        }
    }

    private void setSemester() {
        if (reflectDeptCodeCB.getModel().getSize() == 0) {
            return;
        }
        semSpinner.setValue(1);
        try {
            String deptQuery = "Select NumOfSems from department where DeptCode=\"" + reflectDeptCodeCB.getSelectedItem().toString() + "\"";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(deptQuery);

            while (rs.next()) {
                semSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, Integer.parseInt(rs.getString("NumOfSems")), 1));
            }
            rs.close();
        } catch (SQLException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void removeSelectedRows(JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int[] rows = table.getSelectedRows();
        for (int i = 0; i < rows.length; i++) {
            model.removeRow(table.convertRowIndexToModel(rows[i]) - i);
        }
    }

    private void disableNew() {
        filterBySubCode.requestFocus();
        subCodeText.setEditable(false);
        subNameText.setEditable(false);
        reflectDeptCodeCB.setEnabled(false);
        semSpinner.setEnabled(false);
        syllabuseSchemeComboBox.setEnabled(false);
        subTypeComboBox.setEnabled(false);
        syllabusOrderSpinner.setEnabled(false);
        cancelButton.setEnabled(false);
        clearButton.setEnabled(false);
        deptFilterCB.setEnabled(true);
        semFilterCB.setEnabled(true);
        syllabusFilterCB.setEnabled(true);
        filterBySubCode.setEditable(true);
        subjectTable.setEnabled(true);
        modify.setText("Modify");
        filterBySubCode.requestFocus();
    }

    private void enableNew() {
        subCodeText.setEditable(true);
        subNameText.setEditable(true);
        reflectDeptCodeCB.setEnabled(true);
        semSpinner.setEnabled(true);
        syllabuseSchemeComboBox.setEnabled(true);
        subTypeComboBox.setEnabled(true);
        syllabusOrderSpinner.setEnabled(true);
        cancelButton.setEnabled(true);
        clearButton.setEnabled(true);
        deptFilterCB.setEnabled(false);
        semFilterCB.setEnabled(false);
        syllabusFilterCB.setEnabled(false);
        filterBySubCode.setEditable(false);
        subjectTable.setEnabled(false);
        modify.setText("Save");
        reflectDeptCodeCB.requestFocus();
    }

    private void fillSemesterComboBox() {
        if (deptFilterCB.getModel().getSize() == 0) {
            return;
        }
        DefaultComboBoxModel modelComboBox = new DefaultComboBoxModel();
        semFilterCB.setModel(modelComboBox);
        modelComboBox.addElement("All");
        String numberOfSemester = null;
        if (deptFilterCB.getSelectedIndex() == 0) {
            numberOfSemester = "10";
        } else {
            String sql = "Select NumOfSems from department where DeptCode=\"" + deptFilterCB.getSelectedItem().toString() + "\"";
            try {
                ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
                while (rs.next()) {
                    numberOfSemester = rs.getString("NumOfSems");
                }
                rs.close();
            } catch (Exception e) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        for (int i = 0; i < Integer.parseInt(numberOfSemester); i++) {
            modelComboBox.addElement(Integer.toString(i + 1));
        }
    }

    private void hierarchy() {
        String privilege = Runner.RunnerObj.MainUIObj.getPrivilege();
        if ("faculty".equalsIgnoreCase(privilege) || "other".equalsIgnoreCase(privilege)) {
            modify.hide();
            deleteButton.hide();
            cancelButton.hide();
            clearButton.hide();
        } else if ("HOD".equalsIgnoreCase(privilege)) {
            hierarchyHOD();
        }
    }

    private void hierarchyHOD() {
        if (reflectDeptCodeCB.getSelectedItem().toString().equals(Run.Runner.RunnerObj.MainUIObj.getDept())) {
            modify.setEnabled(true);
            deleteButton.setEnabled(true);
        } else {
            modify.setEnabled(false);
            deleteButton.setEnabled(false);
        }
    }
}