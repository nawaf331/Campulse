/*
 * Form : SubjectHandler
 * Version : 0.0.8
 * Upadted :
 *          24-08-2012 at 12.07 AM
 *          24-08-2012 at 11.28 PM
 *          24-08-2012 at 11.56 PM variable name updated.
 *          25-08-2012 at 12.31 AM delete buttone make sure updated
 *          25-08-2012 at 12.43 AM hierarchy();
 *          25-08-2012 at 1.16 Am icon
 *          30-08-2012 at 2.31 AM removed unwanted codes
 *          3-9-2012 at 2.58 PM kill oBject
 */
package subject.handling;

import Run.Runner;
import Run.dbConnect;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import main_package.NewOkCancelDialog;

/**
 *
 * @author Nawaf
 */
public class AddSubjectHandlingUI extends javax.swing.JFrame {

    /**
     * Creates new form AddSubjectHandlingUI
     */
    public AddSubjectHandlingUI() {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/main_package/resources/icon.png")).getImage());
        facultyTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        subjectTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        currentTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        setLocationRelativeTo(null);
        fillSubjectTable();
        fillFacultyTable();
        filldeptCodeComboBox();
        setCurrentYear();
        hierarchy();
        findFacultyTextBox.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        subjectHandlingMainPanel = new javax.swing.JPanel();
        notification = new javax.swing.JLabel();
        addSubjectHandlingLabel = new javax.swing.JPanel();
        findCurrentTextBox = new javax.swing.JTextField();
        deptCodeComboBox = new javax.swing.JComboBox();
        findSubjectTextBox = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        subjectTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        currentTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        facultyTable = new javax.swing.JTable();
        findFacultyTextBox = new javax.swing.JTextField();
        deleteButton = new javax.swing.JButton();
        semesterComboBox = new javax.swing.JComboBox();
        yearComboBox = new javax.swing.JComboBox();
        facultyDetailsLabel = new javax.swing.JLabel();
        subjectDetailsLabel = new javax.swing.JLabel();
        currentHandlingDetailsLabel = new javax.swing.JLabel();
        deptCodeLabelForFilter = new javax.swing.JLabel();
        semesterLabelForFilter = new javax.swing.JLabel();
        selectedFacultyText = new javax.swing.JTextField();
        selectedFacultyLabel = new javax.swing.JLabel();
        selectedSubjectText = new javax.swing.JTextField();
        selectedSubjectLabel1 = new javax.swing.JLabel();
        selectedCurrentlySubjectText = new javax.swing.JTextField();
        selectedCurrentlySubjectLabel = new javax.swing.JLabel();
        yearFilterLabel = new javax.swing.JLabel();
        yearFilterComboBox = new javax.swing.JComboBox();
        syllabusLabel = new javax.swing.JLabel();
        syllabusComboBox = new javax.swing.JComboBox();
        subjectHandlingDetailsLabel = new javax.swing.JPanel();
        facultyNameLabel = new javax.swing.JLabel();
        subjectNameLabel = new javax.swing.JLabel();
        facultyNameTextBox = new javax.swing.JTextField();
        subjectNameTextBox = new javax.swing.JTextField();
        ufnLabel = new javax.swing.JLabel();
        subjectCodeLabel = new javax.swing.JLabel();
        ufnTextBox = new javax.swing.JTextField();
        subjectCodeTextBox = new javax.swing.JTextField();
        deptCodeLabel = new javax.swing.JLabel();
        deptCodeTextBox = new javax.swing.JTextField();
        semesterLabel = new javax.swing.JLabel();
        semesterTextBox = new javax.swing.JTextField();
        yearLabel = new javax.swing.JLabel();
        yearTextBox = new javax.swing.JTextField();
        homeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Subject handler");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        subjectHandlingMainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Subject handling"));

        notification.setForeground(new java.awt.Color(51, 51, 251));
        notification.setText(" ");

        addSubjectHandlingLabel.setBorder(javax.swing.BorderFactory.createTitledBorder("Add subject handling"));

        findCurrentTextBox.setToolTipText("Enter text to filter subject handling table.");
        findCurrentTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                findCurrentTextBoxMouseEntered(evt);
            }
        });
        findCurrentTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                findCurrentTextBoxFocusGained(evt);
            }
        });
        findCurrentTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                findCurrentTextBoxKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                findCurrentTextBoxKeyReleased(evt);
            }
        });

        deptCodeComboBox.setToolTipText("<html>\nClick and select department code<br>\nto filter faculty.\n</html>");
        deptCodeComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deptCodeComboBoxMouseEntered(evt);
            }
        });
        deptCodeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deptCodeComboBoxActionPerformed(evt);
            }
        });
        deptCodeComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deptCodeComboBoxFocusGained(evt);
            }
        });

        findSubjectTextBox.setToolTipText("Enter text to filter subject table.");
        findSubjectTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                findSubjectTextBoxMouseEntered(evt);
            }
        });
        findSubjectTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                findSubjectTextBoxFocusGained(evt);
            }
        });
        findSubjectTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                findSubjectTextBoxKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                findSubjectTextBoxKeyReleased(evt);
            }
        });

        subjectTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        subjectTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject code", "Subject name", "Dept. code", "Semester", "Syllabus scheme"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        subjectTable.setToolTipText("Click here to select subject.");
        subjectTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subjectTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                subjectTableMouseEntered(evt);
            }
        });
        subjectTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                subjectTableFocusGained(evt);
            }
        });
        subjectTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                subjectTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                subjectTableKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(subjectTable);
        subjectTable.getColumnModel().getColumn(0).setPreferredWidth(90);
        subjectTable.getColumnModel().getColumn(0).setMaxWidth(100);
        subjectTable.getColumnModel().getColumn(1).setPreferredWidth(150);
        subjectTable.getColumnModel().getColumn(1).setMaxWidth(150);
        subjectTable.getColumnModel().getColumn(2).setMinWidth(0);
        subjectTable.getColumnModel().getColumn(2).setPreferredWidth(0);
        subjectTable.getColumnModel().getColumn(2).setMaxWidth(0);
        subjectTable.getColumnModel().getColumn(3).setMinWidth(0);
        subjectTable.getColumnModel().getColumn(3).setPreferredWidth(0);
        subjectTable.getColumnModel().getColumn(3).setMaxWidth(0);
        subjectTable.getColumnModel().getColumn(4).setMinWidth(0);
        subjectTable.getColumnModel().getColumn(4).setPreferredWidth(0);
        subjectTable.getColumnModel().getColumn(4).setMaxWidth(0);

        currentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject code", "Subject name", "Year", "UFN", "Faculty name", "Semester", "Dept. code"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        currentTable.setToolTipText("Click here to select subject handling.");
        currentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                currentTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                currentTableMouseEntered(evt);
            }
        });
        currentTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                currentTableFocusGained(evt);
            }
        });
        currentTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                currentTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                currentTableKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(currentTable);
        currentTable.getColumnModel().getColumn(0).setMinWidth(90);
        currentTable.getColumnModel().getColumn(1).setMinWidth(150);
        currentTable.getColumnModel().getColumn(3).setMinWidth(0);
        currentTable.getColumnModel().getColumn(3).setPreferredWidth(0);
        currentTable.getColumnModel().getColumn(3).setMaxWidth(0);
        currentTable.getColumnModel().getColumn(4).setMinWidth(0);
        currentTable.getColumnModel().getColumn(4).setPreferredWidth(0);
        currentTable.getColumnModel().getColumn(4).setMaxWidth(0);
        currentTable.getColumnModel().getColumn(5).setMinWidth(0);
        currentTable.getColumnModel().getColumn(5).setPreferredWidth(0);
        currentTable.getColumnModel().getColumn(5).setMaxWidth(0);
        currentTable.getColumnModel().getColumn(6).setMinWidth(0);
        currentTable.getColumnModel().getColumn(6).setPreferredWidth(0);
        currentTable.getColumnModel().getColumn(6).setMaxWidth(0);

        addButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Button-Add-icon.png"))); // NOI18N
        addButton.setText("Add");
        addButton.setToolTipText("<html>\nStep 1, Select facuty from faculty table.<br>\nStep 2, Select subject from subject table.<br>\nStep 3, Select year.<br>\nStep 4, Click add button.\n</html>");
        addButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addButtonMouseEntered(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        addButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addButtonFocusGained(evt);
            }
        });
        addButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addButtonKeyPressed(evt);
            }
        });

        facultyTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        facultyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UFN", "Faculty name", "Dept. code"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        facultyTable.setToolTipText("Click here to select faculty.");
        facultyTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                facultyTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                facultyTableMouseEntered(evt);
            }
        });
        facultyTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                facultyTableFocusGained(evt);
            }
        });
        facultyTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                facultyTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                facultyTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(facultyTable);
        facultyTable.getColumnModel().getColumn(0).setPreferredWidth(75);
        facultyTable.getColumnModel().getColumn(0).setMaxWidth(75);
        facultyTable.getColumnModel().getColumn(2).setMinWidth(0);
        facultyTable.getColumnModel().getColumn(2).setPreferredWidth(0);
        facultyTable.getColumnModel().getColumn(2).setMaxWidth(0);

        findFacultyTextBox.setToolTipText("Enter text to filter faculty table.");
        findFacultyTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                findFacultyTextBoxMouseEntered(evt);
            }
        });
        findFacultyTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                findFacultyTextBoxFocusGained(evt);
            }
        });
        findFacultyTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                findFacultyTextBoxKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                findFacultyTextBoxKeyReleased(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main_package/resources/Actions-edit-delete-icon.png"))); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.setToolTipText("<html>\nStep 1, Select subject from currently handling table.<br>\nStep 2, Click delete button.\n</html>");
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteButtonMouseEntered(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        deleteButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deleteButtonFocusGained(evt);
            }
        });
        deleteButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deleteButtonKeyPressed(evt);
            }
        });

        semesterComboBox.setToolTipText("Click and select semester to filter subject.");
        semesterComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                semesterComboBoxMouseEntered(evt);
            }
        });
        semesterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semesterComboBoxActionPerformed(evt);
            }
        });
        semesterComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                semesterComboBoxFocusGained(evt);
            }
        });

        yearComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2030" }));
        yearComboBox.setToolTipText("<html>Click and select year to assign subject<br>\nhandling year.\n</html>");
        yearComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                yearComboBoxMouseEntered(evt);
            }
        });
        yearComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearComboBoxActionPerformed(evt);
            }
        });
        yearComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                yearComboBoxFocusGained(evt);
            }
        });

        facultyDetailsLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        facultyDetailsLabel.setText("Faculty details :");
        facultyDetailsLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                facultyDetailsLabelMouseEntered(evt);
            }
        });

        subjectDetailsLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        subjectDetailsLabel.setText("Subject details :");
        subjectDetailsLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                subjectDetailsLabelMouseEntered(evt);
            }
        });

        currentHandlingDetailsLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        currentHandlingDetailsLabel.setText("Currently handling subject :");

        deptCodeLabelForFilter.setText("Dept. code :");
        deptCodeLabelForFilter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deptCodeLabelForFilterMouseEntered(evt);
            }
        });

        semesterLabelForFilter.setText("Semester :");
        semesterLabelForFilter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                semesterLabelForFilterMouseEntered(evt);
            }
        });

        selectedFacultyText.setBackground(new java.awt.Color(204, 204, 204));
        selectedFacultyText.setEditable(false);
        selectedFacultyText.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        selectedFacultyText.setForeground(new java.awt.Color(204, 204, 204));
        selectedFacultyText.setToolTipText("Selected faculty.");
        selectedFacultyText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                selectedFacultyTextMouseEntered(evt);
            }
        });
        selectedFacultyText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedFacultyTextActionPerformed(evt);
            }
        });
        selectedFacultyText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectedFacultyTextFocusGained(evt);
            }
        });

        selectedFacultyLabel.setText("Selected faculty :");
        selectedFacultyLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                selectedFacultyLabelMouseEntered(evt);
            }
        });

        selectedSubjectText.setBackground(new java.awt.Color(204, 204, 204));
        selectedSubjectText.setEditable(false);
        selectedSubjectText.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        selectedSubjectText.setForeground(new java.awt.Color(204, 204, 204));
        selectedSubjectText.setToolTipText("Selected subject.");
        selectedSubjectText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                selectedSubjectTextMouseEntered(evt);
            }
        });
        selectedSubjectText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedSubjectTextActionPerformed(evt);
            }
        });
        selectedSubjectText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectedSubjectTextFocusGained(evt);
            }
        });

        selectedSubjectLabel1.setText("Selected subject :");
        selectedSubjectLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                selectedSubjectLabel1MouseEntered(evt);
            }
        });

        selectedCurrentlySubjectText.setBackground(new java.awt.Color(204, 204, 204));
        selectedCurrentlySubjectText.setEditable(false);
        selectedCurrentlySubjectText.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        selectedCurrentlySubjectText.setForeground(new java.awt.Color(204, 204, 204));
        selectedCurrentlySubjectText.setToolTipText("Selected subject handling.");
        selectedCurrentlySubjectText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                selectedCurrentlySubjectTextMouseEntered(evt);
            }
        });
        selectedCurrentlySubjectText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedCurrentlySubjectTextActionPerformed(evt);
            }
        });
        selectedCurrentlySubjectText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectedCurrentlySubjectTextFocusGained(evt);
            }
        });

        selectedCurrentlySubjectLabel.setText("Selected subject :");
        selectedCurrentlySubjectLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                selectedCurrentlySubjectLabelMouseEntered(evt);
            }
        });

        yearFilterLabel.setText("Year :");
        yearFilterLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                yearFilterLabelMouseEntered(evt);
            }
        });

        yearFilterComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2030" }));
        yearFilterComboBox.setToolTipText("Click and select year to filter subject handling.");
        yearFilterComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                yearFilterComboBoxMouseEntered(evt);
            }
        });
        yearFilterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearFilterComboBoxActionPerformed(evt);
            }
        });
        yearFilterComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                yearFilterComboBoxFocusGained(evt);
            }
        });

        syllabusLabel.setText("Syllabus :");
        syllabusLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                syllabusLabelMouseEntered(evt);
            }
        });

        syllabusComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "2002", "2006", "2010", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));
        syllabusComboBox.setToolTipText("Click and select syllabus to filter subject.");
        syllabusComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                syllabusComboBoxMouseEntered(evt);
            }
        });
        syllabusComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syllabusComboBoxActionPerformed(evt);
            }
        });
        syllabusComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                syllabusComboBoxFocusGained(evt);
            }
        });

        javax.swing.GroupLayout addSubjectHandlingLabelLayout = new javax.swing.GroupLayout(addSubjectHandlingLabel);
        addSubjectHandlingLabel.setLayout(addSubjectHandlingLabelLayout);
        addSubjectHandlingLabelLayout.setHorizontalGroup(
            addSubjectHandlingLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addSubjectHandlingLabelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addSubjectHandlingLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addSubjectHandlingLabelLayout.createSequentialGroup()
                        .addComponent(selectedFacultyLabel)
                        .addGap(12, 12, 12)
                        .addComponent(selectedFacultyText))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(findFacultyTextBox)
                    .addComponent(facultyDetailsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addSubjectHandlingLabelLayout.createSequentialGroup()
                        .addComponent(deptCodeLabelForFilter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deptCodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(addSubjectHandlingLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addSubjectHandlingLabelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addSubjectHandlingLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addButton)
                            .addComponent(deleteButton)
                            .addComponent(yearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(addSubjectHandlingLabelLayout.createSequentialGroup()
                        .addGroup(addSubjectHandlingLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addSubjectHandlingLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(subjectDetailsLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addSubjectHandlingLabelLayout.createSequentialGroup()
                                    .addGroup(addSubjectHandlingLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addSubjectHandlingLabelLayout.createSequentialGroup()
                                            .addComponent(semesterLabelForFilter)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(semesterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(syllabusLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(syllabusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addSubjectHandlingLabelLayout.createSequentialGroup()
                                            .addComponent(selectedSubjectLabel1)
                                            .addGap(18, 18, 18)
                                            .addComponent(selectedSubjectText)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)))
                            .addComponent(findSubjectTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(addSubjectHandlingLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addSubjectHandlingLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(findCurrentTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(currentHandlingDetailsLabel)
                                .addGroup(addSubjectHandlingLabelLayout.createSequentialGroup()
                                    .addComponent(yearFilterLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(yearFilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addSubjectHandlingLabelLayout.createSequentialGroup()
                                .addComponent(selectedCurrentlySubjectLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(selectedCurrentlySubjectText, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        addSubjectHandlingLabelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addButton, deleteButton, yearComboBox});

        addSubjectHandlingLabelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deptCodeComboBox, yearFilterComboBox});

        addSubjectHandlingLabelLayout.setVerticalGroup(
            addSubjectHandlingLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addSubjectHandlingLabelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(addSubjectHandlingLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectedFacultyLabel)
                    .addComponent(selectedFacultyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectedSubjectLabel1)
                    .addComponent(selectedSubjectText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectedCurrentlySubjectLabel)
                    .addComponent(selectedCurrentlySubjectText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addSubjectHandlingLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deptCodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(semesterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deptCodeLabelForFilter)
                    .addComponent(semesterLabelForFilter)
                    .addComponent(yearFilterLabel)
                    .addComponent(yearFilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(syllabusLabel)
                    .addComponent(syllabusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(addSubjectHandlingLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addSubjectHandlingLabelLayout.createSequentialGroup()
                        .addComponent(yearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteButton)
                        .addGap(70, 70, 70))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addSubjectHandlingLabelLayout.createSequentialGroup()
                        .addComponent(findCurrentTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addSubjectHandlingLabelLayout.createSequentialGroup()
                        .addGroup(addSubjectHandlingLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(facultyDetailsLabel)
                            .addComponent(subjectDetailsLabel)
                            .addComponent(currentHandlingDetailsLabel))
                        .addGap(2, 2, 2)
                        .addGroup(addSubjectHandlingLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(findFacultyTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(findSubjectTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addSubjectHandlingLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        addSubjectHandlingLabelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addButton, deleteButton, yearComboBox});

        addSubjectHandlingLabelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {deptCodeComboBox, semesterComboBox, syllabusComboBox, yearFilterComboBox});

        subjectHandlingDetailsLabel.setBorder(javax.swing.BorderFactory.createTitledBorder("Subject handling details"));

        facultyNameLabel.setText("Faculty name :");
        facultyNameLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                facultyNameLabelMouseEntered(evt);
            }
        });

        subjectNameLabel.setText("Subject name :");
        subjectNameLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                subjectNameLabelMouseEntered(evt);
            }
        });

        facultyNameTextBox.setBackground(new java.awt.Color(204, 204, 204));
        facultyNameTextBox.setEditable(false);
        facultyNameTextBox.setToolTipText("Faculty name.");
        facultyNameTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                facultyNameTextBoxMouseEntered(evt);
            }
        });
        facultyNameTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                facultyNameTextBoxFocusGained(evt);
            }
        });

        subjectNameTextBox.setBackground(new java.awt.Color(204, 204, 204));
        subjectNameTextBox.setEditable(false);
        subjectNameTextBox.setToolTipText("Subject name.");
        subjectNameTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                subjectNameTextBoxMouseEntered(evt);
            }
        });
        subjectNameTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                subjectNameTextBoxFocusGained(evt);
            }
        });

        ufnLabel.setText("UFN :");
        ufnLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ufnLabelMouseEntered(evt);
            }
        });

        subjectCodeLabel.setText("Subject code :");
        subjectCodeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                subjectCodeLabelMouseEntered(evt);
            }
        });

        ufnTextBox.setBackground(new java.awt.Color(204, 204, 204));
        ufnTextBox.setEditable(false);
        ufnTextBox.setToolTipText("UFN (University Faculty Number).\"");
        ufnTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ufnTextBoxMouseEntered(evt);
            }
        });
        ufnTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ufnTextBoxFocusGained(evt);
            }
        });

        subjectCodeTextBox.setBackground(new java.awt.Color(204, 204, 204));
        subjectCodeTextBox.setEditable(false);
        subjectCodeTextBox.setToolTipText("Subject code.");
        subjectCodeTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                subjectCodeTextBoxMouseEntered(evt);
            }
        });
        subjectCodeTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                subjectCodeTextBoxFocusGained(evt);
            }
        });

        deptCodeLabel.setText("Dept. code :");
        deptCodeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deptCodeLabelMouseEntered(evt);
            }
        });

        deptCodeTextBox.setBackground(new java.awt.Color(204, 204, 204));
        deptCodeTextBox.setEditable(false);
        deptCodeTextBox.setToolTipText("Department code.");
        deptCodeTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deptCodeTextBoxMouseEntered(evt);
            }
        });
        deptCodeTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deptCodeTextBoxFocusGained(evt);
            }
        });

        semesterLabel.setText("Semester :");
        semesterLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                semesterLabelMouseEntered(evt);
            }
        });

        semesterTextBox.setBackground(new java.awt.Color(204, 204, 204));
        semesterTextBox.setEditable(false);
        semesterTextBox.setToolTipText("Semester.");
        semesterTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                semesterTextBoxMouseEntered(evt);
            }
        });
        semesterTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                semesterTextBoxFocusGained(evt);
            }
        });

        yearLabel.setText("Year :");
        yearLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                yearLabelMouseEntered(evt);
            }
        });

        yearTextBox.setBackground(new java.awt.Color(204, 204, 204));
        yearTextBox.setEditable(false);
        yearTextBox.setToolTipText("Year.");
        yearTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                yearTextBoxMouseEntered(evt);
            }
        });
        yearTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                yearTextBoxFocusGained(evt);
            }
        });

        javax.swing.GroupLayout subjectHandlingDetailsLabelLayout = new javax.swing.GroupLayout(subjectHandlingDetailsLabel);
        subjectHandlingDetailsLabel.setLayout(subjectHandlingDetailsLabelLayout);
        subjectHandlingDetailsLabelLayout.setHorizontalGroup(
            subjectHandlingDetailsLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subjectHandlingDetailsLabelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subjectHandlingDetailsLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(facultyNameLabel)
                    .addComponent(subjectNameLabel)
                    .addComponent(deptCodeLabel))
                .addGap(50, 50, 50)
                .addGroup(subjectHandlingDetailsLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(facultyNameTextBox)
                    .addComponent(subjectNameTextBox)
                    .addGroup(subjectHandlingDetailsLabelLayout.createSequentialGroup()
                        .addComponent(deptCodeTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addComponent(semesterLabel)
                        .addGap(39, 39, 39)
                        .addComponent(semesterTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32)
                .addGroup(subjectHandlingDetailsLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(yearLabel)
                    .addComponent(subjectCodeLabel)
                    .addComponent(ufnLabel))
                .addGap(15, 15, 15)
                .addGroup(subjectHandlingDetailsLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(subjectHandlingDetailsLabelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(subjectHandlingDetailsLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ufnTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subjectCodeTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(yearTextBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        subjectHandlingDetailsLabelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deptCodeTextBox, semesterTextBox, subjectCodeTextBox, ufnTextBox, yearTextBox});

        subjectHandlingDetailsLabelLayout.setVerticalGroup(
            subjectHandlingDetailsLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subjectHandlingDetailsLabelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subjectHandlingDetailsLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(facultyNameLabel)
                    .addComponent(facultyNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ufnLabel)
                    .addComponent(ufnTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(subjectHandlingDetailsLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subjectNameLabel)
                    .addComponent(subjectNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subjectCodeLabel)
                    .addComponent(subjectCodeTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(subjectHandlingDetailsLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(subjectHandlingDetailsLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(semesterLabel)
                        .addComponent(semesterTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(subjectHandlingDetailsLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(deptCodeLabel)
                        .addComponent(deptCodeTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(subjectHandlingDetailsLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(yearLabel)
                        .addComponent(yearTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        subjectHandlingDetailsLabelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {deptCodeTextBox, semesterTextBox, subjectCodeTextBox, ufnTextBox, yearTextBox});

        homeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/home-icon-small.png"))); // NOI18N
        homeButton.setText("Home");
        homeButton.setToolTipText("Click home button to go back to home.");
        homeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                homeButtonMouseEntered(evt);
            }
        });
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });
        homeButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                homeButtonFocusGained(evt);
            }
        });
        homeButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                homeButtonKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout subjectHandlingMainPanelLayout = new javax.swing.GroupLayout(subjectHandlingMainPanel);
        subjectHandlingMainPanel.setLayout(subjectHandlingMainPanelLayout);
        subjectHandlingMainPanelLayout.setHorizontalGroup(
            subjectHandlingMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subjectHandlingMainPanelLayout.createSequentialGroup()
                .addGroup(subjectHandlingMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(subjectHandlingDetailsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(notification, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
            .addComponent(addSubjectHandlingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        subjectHandlingMainPanelLayout.setVerticalGroup(
            subjectHandlingMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subjectHandlingMainPanelLayout.createSequentialGroup()
                .addComponent(addSubjectHandlingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(subjectHandlingMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(subjectHandlingMainPanelLayout.createSequentialGroup()
                        .addComponent(subjectHandlingDetailsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(notification)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subjectHandlingMainPanelLayout.createSequentialGroup()
                        .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(subjectHandlingMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(subjectHandlingMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void facultyTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_facultyTableFocusGained
        notification.setText("Select a faculty from faculty table.");
    }//GEN-LAST:event_facultyTableFocusGained

    private void subjectTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_subjectTableFocusGained
        notification.setText("Select a subject from subject table.");
    }//GEN-LAST:event_subjectTableFocusGained

    private void facultyTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_facultyTableMouseEntered
        notification.setText("Select a faculty from faculty table.");
    }//GEN-LAST:event_facultyTableMouseEntered

    private void subjectTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectTableMouseEntered
        notification.setText("Select a subject from subject table.");
    }//GEN-LAST:event_subjectTableMouseEntered

    private void addButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseEntered
        notification.setText("To add new subject handling.");
    }//GEN-LAST:event_addButtonMouseEntered

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (facultyTable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a faculty from faculty details table.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (subjectTable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a subject from subject details table.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (!facultyTable.getModel().getValueAt(facultyTable.convertRowIndexToModel(facultyTable.getSelectedRow()), 1).toString().equals(selectedFacultyText.getText())) {
            JOptionPane.showMessageDialog(null, "Please make sure your faculty selection.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (!subjectTable.getModel().getValueAt(subjectTable.convertRowIndexToModel(subjectTable.getSelectedRow()), 1).toString().equals(selectedSubjectText.getText())) {
            JOptionPane.showMessageDialog(null, "Please make sure your subject selection.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        String createQuery = "Insert into subjecthandling values('" + (subjectTable.getModel().getValueAt(subjectTable.convertRowIndexToModel(subjectTable.getSelectedRow()), 0).toString()) + "','" + (facultyTable.getModel().getValueAt(facultyTable.convertRowIndexToModel(facultyTable.getSelectedRow()), 0).toString()) + "','" + (yearComboBox.getSelectedItem().toString()) + "');";
        int successful = 0;

        try {
            successful = dbConnect.getCon().createStatement().executeUpdate(createQuery);
        } catch (SQLException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        if (successful == 1) {
            fillCurrentTable();
            JOptionPane.showMessageDialog(null, "Subject handling successfully added.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Subject handling adding is not successful.", "Failed", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        homeButton.doClick();
    }//GEN-LAST:event_formWindowClosing

    private void findFacultyTextBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findFacultyTextBoxKeyReleased
        filterFaculty();
        filterSubject();
    }//GEN-LAST:event_findFacultyTextBoxKeyReleased

    private void findSubjectTextBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findSubjectTextBoxKeyReleased
        filterSubject();
    }//GEN-LAST:event_findSubjectTextBoxKeyReleased

    private void facultyTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_facultyTableMouseClicked
        if (facultyTable.getRowCount() > 0) {
            int row = facultyTable.convertRowIndexToModel(facultyTable.getSelectedRow());
            selectedFacultyText.setText(facultyTable.getModel().getValueAt(row, 1).toString());
        }
        filterSubject();
        fillCurrentTable();
    }//GEN-LAST:event_facultyTableMouseClicked

    private void subjectTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectTableMouseClicked
        if (subjectTable.getRowCount() > 0) {
            int row = subjectTable.convertRowIndexToModel(subjectTable.getSelectedRow());
            selectedSubjectText.setText(subjectTable.getModel().getValueAt(row, 1).toString());
        }
    }//GEN-LAST:event_subjectTableMouseClicked

    private void subjectTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_subjectTableKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            findSubjectTextBox.requestFocus();
        }
    }//GEN-LAST:event_subjectTableKeyPressed

    private void deptCodeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deptCodeComboBoxActionPerformed
        filterFaculty();
        fillSemesterComboBox();
    }//GEN-LAST:event_deptCodeComboBoxActionPerformed

    private void homeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeButtonMouseEntered
        notification.setText("Go back to home.");
    }//GEN-LAST:event_homeButtonMouseEntered

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        Run.Runner.RunnerObj.MainUIObj.show();
        this.dispose();
        Run.Runner.RunnerObj.MainUIObj.AddSubjectHandlingUIObj = null;
    }//GEN-LAST:event_homeButtonActionPerformed

    private void homeButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_homeButtonFocusGained
        notification.setText("Go back to home.");
    }//GEN-LAST:event_homeButtonFocusGained

    private void homeButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_homeButtonKeyPressed
    }//GEN-LAST:event_homeButtonKeyPressed

    private void semesterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_semesterComboBoxActionPerformed
        filterSubject();
    }//GEN-LAST:event_semesterComboBoxActionPerformed

    private void selectedFacultyTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectedFacultyTextMouseEntered
        notification.setText("Selected faculty.");
    }//GEN-LAST:event_selectedFacultyTextMouseEntered

    private void selectedFacultyTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedFacultyTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectedFacultyTextActionPerformed

    private void selectedFacultyTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selectedFacultyTextFocusGained
        notification.setText("Selected faculty.");
    }//GEN-LAST:event_selectedFacultyTextFocusGained

    private void selectedFacultyLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectedFacultyLabelMouseEntered
        notification.setText("Selected faculty.");
    }//GEN-LAST:event_selectedFacultyLabelMouseEntered

    private void selectedSubjectTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectedSubjectTextMouseEntered
        notification.setText("Selected subject.");
    }//GEN-LAST:event_selectedSubjectTextMouseEntered

    private void selectedSubjectTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedSubjectTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectedSubjectTextActionPerformed

    private void selectedSubjectTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selectedSubjectTextFocusGained
        notification.setText("Selected subject.");
    }//GEN-LAST:event_selectedSubjectTextFocusGained

    private void selectedSubjectLabel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectedSubjectLabel1MouseEntered
        notification.setText("Selected subject.");
    }//GEN-LAST:event_selectedSubjectLabel1MouseEntered

    private void selectedCurrentlySubjectTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectedCurrentlySubjectTextMouseEntered
        notification.setText("Selected handling subject.");
    }//GEN-LAST:event_selectedCurrentlySubjectTextMouseEntered

    private void selectedCurrentlySubjectTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedCurrentlySubjectTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectedCurrentlySubjectTextActionPerformed

    private void selectedCurrentlySubjectTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selectedCurrentlySubjectTextFocusGained
        notification.setText("Selected handling subject.");
    }//GEN-LAST:event_selectedCurrentlySubjectTextFocusGained

    private void selectedCurrentlySubjectLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectedCurrentlySubjectLabelMouseEntered
        notification.setText("Selected handling subject.");
    }//GEN-LAST:event_selectedCurrentlySubjectLabelMouseEntered

    private void yearFilterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearFilterComboBoxActionPerformed
        filterCurrent();
    }//GEN-LAST:event_yearFilterComboBoxActionPerformed

    private void findCurrentTextBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findCurrentTextBoxKeyReleased
        filterCurrent();
    }//GEN-LAST:event_findCurrentTextBoxKeyReleased

    private void facultyTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_facultyTableKeyReleased
        if (facultyTable.getRowCount() > 0) {
            int row = facultyTable.convertRowIndexToModel(facultyTable.getSelectedRow());
            selectedFacultyText.setText(facultyTable.getModel().getValueAt(row, 1).toString());
        }
        filterSubject();
        fillCurrentTable();
    }//GEN-LAST:event_facultyTableKeyReleased

    private void subjectTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_subjectTableKeyReleased
        if (subjectTable.getRowCount() > 0) {
            int row = subjectTable.convertRowIndexToModel(subjectTable.getSelectedRow());
            selectedSubjectText.setText(subjectTable.getModel().getValueAt(row, 1).toString());
        }
    }//GEN-LAST:event_subjectTableKeyReleased

    private void currentTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_currentTableKeyReleased
        if (currentTable.getRowCount() > 0) {
            int row = currentTable.convertRowIndexToModel(currentTable.getSelectedRow());
            selectedCurrentlySubjectText.setText(currentTable.getModel().getValueAt(row, 1).toString());
            fillFormFeilds();
        }
    }//GEN-LAST:event_currentTableKeyReleased

    private void currentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentTableMouseClicked
        if (currentTable.getRowCount() > 0) {
            int row = currentTable.convertRowIndexToModel(currentTable.getSelectedRow());
            selectedCurrentlySubjectText.setText(currentTable.getModel().getValueAt(row, 1).toString());
            fillFormFeilds();
        }
    }//GEN-LAST:event_currentTableMouseClicked

    private void syllabusComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syllabusComboBoxActionPerformed
        filterSubject();
    }//GEN-LAST:event_syllabusComboBoxActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (currentTable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a subject handled by selected faculty\nfrom currently handling subject table.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        String subjectCode = currentTable.getModel().getValueAt(currentTable.convertRowIndexToModel(currentTable.getSelectedRow()), 0).toString();
        String ufn = currentTable.getModel().getValueAt(currentTable.convertRowIndexToModel(currentTable.getSelectedRow()), 3).toString();
        String year = currentTable.getModel().getValueAt(currentTable.convertRowIndexToModel(currentTable.getSelectedRow()), 2).toString();
        if (!facultyTable.getModel().getValueAt(facultyTable.convertRowIndexToModel(facultyTable.getSelectedRow()), 0).toString().equals(currentTable.getModel().getValueAt(currentTable.convertRowIndexToModel(currentTable.getSelectedRow()), 3).toString())) {
            JOptionPane.showMessageDialog(null, "Please make sure your faculty selection.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (!subjectCode.equals(subjectCodeTextBox.getText()) || !ufn.equals(ufnTextBox.getText()) || !year.equals(yearTextBox.getText())) {
            JOptionPane.showMessageDialog(null, "Please make sure your currently handling subject selection.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        currentTable.setSelectionBackground(new java.awt.Color(255, 0, 0));
        NewOkCancelDialog dialog = new NewOkCancelDialog(new javax.swing.JFrame(), true);
        dialog.setVisible(true);
        if (dialog.returnStatus == 1) {
            int successful = 0;
            String sql = "delete from subjecthandling where S_SubCode=\"" + subjectCode + "\" and F_UFN=\"" + ufn + "\" and HandlingYear=\"" + year + "\"";
            try {
                successful = dbConnect.getCon().createStatement().executeUpdate(sql);
            } catch (SQLException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

            if (successful == 1) {
                JOptionPane.showMessageDialog(null, "Subject handling (subject code=\"" + subjectCode + "\", year=\"" + year + "\") of faculty\nwith UFN \"" + ufn + "\" is deleted succeessfully.", "Information", JOptionPane.INFORMATION_MESSAGE);
                fillCurrentTable();
            } else {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, "Subject handling (subject code=\"" + subjectCode + "\", year=\"" + year + "\") of faculty\nwith UFN \"" + ufn + "\" is not deleted.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        currentTable.setSelectionBackground(new java.awt.Color(0, 102, 153));
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void deptCodeLabelForFilterMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deptCodeLabelForFilterMouseEntered
        notification.setText("Department code.");
    }//GEN-LAST:event_deptCodeLabelForFilterMouseEntered

    private void semesterLabelForFilterMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_semesterLabelForFilterMouseEntered
        notification.setText("Semester.");
    }//GEN-LAST:event_semesterLabelForFilterMouseEntered

    private void syllabusLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_syllabusLabelMouseEntered
        notification.setText("Syllabus.");
    }//GEN-LAST:event_syllabusLabelMouseEntered

    private void facultyDetailsLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_facultyDetailsLabelMouseEntered
        notification.setText("Faculty details.");
    }//GEN-LAST:event_facultyDetailsLabelMouseEntered

    private void subjectDetailsLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectDetailsLabelMouseEntered
        notification.setText("Subject details.");
    }//GEN-LAST:event_subjectDetailsLabelMouseEntered

    private void facultyNameLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_facultyNameLabelMouseEntered
        notification.setText("Faculty name.");
    }//GEN-LAST:event_facultyNameLabelMouseEntered

    private void ufnLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ufnLabelMouseEntered
        notification.setText("UFN (University Faculty Number).");
    }//GEN-LAST:event_ufnLabelMouseEntered

    private void subjectNameLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectNameLabelMouseEntered
        notification.setText("Subject name.");
    }//GEN-LAST:event_subjectNameLabelMouseEntered

    private void subjectCodeLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectCodeLabelMouseEntered
        notification.setText("Subject code.");
    }//GEN-LAST:event_subjectCodeLabelMouseEntered

    private void deptCodeLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deptCodeLabelMouseEntered
        notification.setText("Department code.");
    }//GEN-LAST:event_deptCodeLabelMouseEntered

    private void semesterLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_semesterLabelMouseEntered
        notification.setText("Semester.");
    }//GEN-LAST:event_semesterLabelMouseEntered

    private void yearLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yearLabelMouseEntered
        notification.setText("Year.");
    }//GEN-LAST:event_yearLabelMouseEntered

    private void yearFilterLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yearFilterLabelMouseEntered
        notification.setText("Year.");
    }//GEN-LAST:event_yearFilterLabelMouseEntered

    private void deptCodeComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deptCodeComboBoxMouseEntered
        notification.setText("Select department code to filter faculty.");
    }//GEN-LAST:event_deptCodeComboBoxMouseEntered

    private void deptCodeComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deptCodeComboBoxFocusGained
        notification.setText("Select department code to filter faculty.");
    }//GEN-LAST:event_deptCodeComboBoxFocusGained

    private void semesterComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_semesterComboBoxMouseEntered
        notification.setText("Select semester tom filter subject.");
    }//GEN-LAST:event_semesterComboBoxMouseEntered

    private void semesterComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_semesterComboBoxFocusGained
        notification.setText("Select semester tom filter subject.");
    }//GEN-LAST:event_semesterComboBoxFocusGained

    private void syllabusComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_syllabusComboBoxFocusGained
        notification.setText("Select syllabus tom filter subject.");
    }//GEN-LAST:event_syllabusComboBoxFocusGained

    private void syllabusComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_syllabusComboBoxMouseEntered
        notification.setText("Select syllabus tom filter subject.");
    }//GEN-LAST:event_syllabusComboBoxMouseEntered

    private void yearFilterComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yearFilterComboBoxMouseEntered
        notification.setText("Select year to filter subject handling.");
    }//GEN-LAST:event_yearFilterComboBoxMouseEntered

    private void yearFilterComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_yearFilterComboBoxFocusGained
        notification.setText("Select year to filter subject handling.");
    }//GEN-LAST:event_yearFilterComboBoxFocusGained

    private void findFacultyTextBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findFacultyTextBoxMouseEntered
        notification.setText("Enter text to filter faculty table.");
    }//GEN-LAST:event_findFacultyTextBoxMouseEntered

    private void findFacultyTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_findFacultyTextBoxFocusGained
        notification.setText("Enter text to filter faculty table.");
    }//GEN-LAST:event_findFacultyTextBoxFocusGained

    private void findSubjectTextBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findSubjectTextBoxMouseEntered
        notification.setText("Enter text to filter subject table.");
    }//GEN-LAST:event_findSubjectTextBoxMouseEntered

    private void findSubjectTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_findSubjectTextBoxFocusGained
        notification.setText("Enter text to filter subject table.");
    }//GEN-LAST:event_findSubjectTextBoxFocusGained

    private void findCurrentTextBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findCurrentTextBoxMouseEntered
        notification.setText("Enter text to filter subject handling table.");
    }//GEN-LAST:event_findCurrentTextBoxMouseEntered

    private void findCurrentTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_findCurrentTextBoxFocusGained
        notification.setText("Enter text to filter subject handling table.");
    }//GEN-LAST:event_findCurrentTextBoxFocusGained

    private void currentTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_currentTableFocusGained
        notification.setText("Select a subject from subject handling table.");
    }//GEN-LAST:event_currentTableFocusGained

    private void currentTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentTableMouseEntered
        notification.setText("Select a subject from subject handling table.");
    }//GEN-LAST:event_currentTableMouseEntered

    private void yearComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yearComboBoxMouseEntered
        notification.setText("Select year to assign subject handling.");
    }//GEN-LAST:event_yearComboBoxMouseEntered

    private void yearComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_yearComboBoxFocusGained
        notification.setText("Select year to assign subject handling.");
    }//GEN-LAST:event_yearComboBoxFocusGained

    private void facultyNameTextBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_facultyNameTextBoxMouseEntered
        notification.setText("Faculty name.");
    }//GEN-LAST:event_facultyNameTextBoxMouseEntered

    private void facultyNameTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_facultyNameTextBoxFocusGained
        notification.setText("Faculty name.");
    }//GEN-LAST:event_facultyNameTextBoxFocusGained

    private void ufnTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ufnTextBoxFocusGained
        notification.setText("UFN (University Faculty Number).");
    }//GEN-LAST:event_ufnTextBoxFocusGained

    private void ufnTextBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ufnTextBoxMouseEntered
        notification.setText("UFN (University Faculty Number).");
    }//GEN-LAST:event_ufnTextBoxMouseEntered

    private void subjectNameTextBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectNameTextBoxMouseEntered
        notification.setText("Subject name.");
    }//GEN-LAST:event_subjectNameTextBoxMouseEntered

    private void subjectNameTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_subjectNameTextBoxFocusGained
        notification.setText("Subject name.");
    }//GEN-LAST:event_subjectNameTextBoxFocusGained

    private void subjectCodeTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_subjectCodeTextBoxFocusGained
        notification.setText("Subject code.");
    }//GEN-LAST:event_subjectCodeTextBoxFocusGained

    private void subjectCodeTextBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectCodeTextBoxMouseEntered
        notification.setText("Subject code.");
    }//GEN-LAST:event_subjectCodeTextBoxMouseEntered

    private void deptCodeTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deptCodeTextBoxFocusGained
        notification.setText("Department code.");
    }//GEN-LAST:event_deptCodeTextBoxFocusGained

    private void deptCodeTextBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deptCodeTextBoxMouseEntered
        notification.setText("Department code.");
    }//GEN-LAST:event_deptCodeTextBoxMouseEntered

    private void semesterTextBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_semesterTextBoxMouseEntered
        notification.setText("Semester.");
    }//GEN-LAST:event_semesterTextBoxMouseEntered

    private void semesterTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_semesterTextBoxFocusGained
        notification.setText("Semester.");
    }//GEN-LAST:event_semesterTextBoxFocusGained

    private void yearTextBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yearTextBoxMouseEntered
        notification.setText("Year.");
    }//GEN-LAST:event_yearTextBoxMouseEntered

    private void yearTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_yearTextBoxFocusGained
        notification.setText("Year.");
    }//GEN-LAST:event_yearTextBoxFocusGained

    private void findFacultyTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findFacultyTextBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            facultyTable.requestFocus();
        }
    }//GEN-LAST:event_findFacultyTextBoxKeyPressed

    private void findSubjectTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findSubjectTextBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            subjectTable.requestFocus();
        }
    }//GEN-LAST:event_findSubjectTextBoxKeyPressed

    private void yearComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearComboBoxActionPerformed
        addButton.requestFocus();
    }//GEN-LAST:event_yearComboBoxActionPerformed

    private void addButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
        if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            yearComboBox.requestFocus();
        }
    }//GEN-LAST:event_addButtonKeyPressed

    private void deleteButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deleteButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            deleteButton.doClick();
        }
    }//GEN-LAST:event_deleteButtonKeyPressed

    private void findCurrentTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findCurrentTextBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            currentTable.requestFocus();
        }
    }//GEN-LAST:event_findCurrentTextBoxKeyPressed

    private void currentTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_currentTableKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            findCurrentTextBox.requestFocus();
        }
    }//GEN-LAST:event_currentTableKeyPressed

    private void facultyTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_facultyTableKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            findFacultyTextBox.requestFocus();
        }
    }//GEN-LAST:event_facultyTableKeyPressed

    private void addButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addButtonFocusGained
        notification.setText("To add new subject handling.");
    }//GEN-LAST:event_addButtonFocusGained

    private void deleteButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deleteButtonFocusGained
        notification.setText("To delete selected subject handling.");
    }//GEN-LAST:event_deleteButtonFocusGained

    private void deleteButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseEntered
        notification.setText("To delete selected subject handling.");
    }//GEN-LAST:event_deleteButtonMouseEntered
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel addSubjectHandlingLabel;
    private javax.swing.JLabel currentHandlingDetailsLabel;
    private javax.swing.JTable currentTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox deptCodeComboBox;
    private javax.swing.JLabel deptCodeLabel;
    private javax.swing.JLabel deptCodeLabelForFilter;
    private javax.swing.JTextField deptCodeTextBox;
    private javax.swing.JLabel facultyDetailsLabel;
    private javax.swing.JLabel facultyNameLabel;
    private javax.swing.JTextField facultyNameTextBox;
    private javax.swing.JTable facultyTable;
    private javax.swing.JTextField findCurrentTextBox;
    private javax.swing.JTextField findFacultyTextBox;
    private javax.swing.JTextField findSubjectTextBox;
    private javax.swing.JButton homeButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel notification;
    private javax.swing.JLabel selectedCurrentlySubjectLabel;
    private javax.swing.JTextField selectedCurrentlySubjectText;
    private javax.swing.JLabel selectedFacultyLabel;
    private javax.swing.JTextField selectedFacultyText;
    private javax.swing.JLabel selectedSubjectLabel1;
    private javax.swing.JTextField selectedSubjectText;
    private javax.swing.JComboBox semesterComboBox;
    private javax.swing.JLabel semesterLabel;
    private javax.swing.JLabel semesterLabelForFilter;
    private javax.swing.JTextField semesterTextBox;
    private javax.swing.JLabel subjectCodeLabel;
    private javax.swing.JTextField subjectCodeTextBox;
    private javax.swing.JLabel subjectDetailsLabel;
    private javax.swing.JPanel subjectHandlingDetailsLabel;
    private javax.swing.JPanel subjectHandlingMainPanel;
    private javax.swing.JLabel subjectNameLabel;
    private javax.swing.JTextField subjectNameTextBox;
    private javax.swing.JTable subjectTable;
    private javax.swing.JComboBox syllabusComboBox;
    private javax.swing.JLabel syllabusLabel;
    private javax.swing.JLabel ufnLabel;
    private javax.swing.JTextField ufnTextBox;
    private javax.swing.JComboBox yearComboBox;
    private javax.swing.JComboBox yearFilterComboBox;
    private javax.swing.JLabel yearFilterLabel;
    private javax.swing.JLabel yearLabel;
    private javax.swing.JTextField yearTextBox;
    // End of variables declaration//GEN-END:variables

    private void fillFacultyTable() {
        try {
            DefaultTableModel model = (DefaultTableModel) facultyTable.getModel();
            String facQuery = "Select UFN,FName,LName,D_DeptCode from faculty";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(facQuery);
            while (rs.next()) {
                String ufnTemp = rs.getString("UFN");
                String nameTemp = rs.getString("LName") == null ? rs.getString("FName") : rs.getString("FName") + " " + rs.getString("LName");
                String deptTemp = rs.getString("D_DeptCode");
                model.addRow(new Object[]{
                            ufnTemp, nameTemp, deptTemp});
            }
            rs.close();
        } catch (SQLException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void fillSubjectTable() {
        try {
            DefaultTableModel model = (DefaultTableModel) subjectTable.getModel();
            String subQuery = "Select SubCode,SubName,D_DeptCode,Sem,SyllabusScheme from subject ";

            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(subQuery);
            while (rs.next()) {
                String subCode = rs.getString("SubCode");
                String subName = rs.getString("SubName");
                String DeptName = rs.getString("D_DeptCode");
                String sem = rs.getString("Sem");
                String syllabusScheme = rs.getString("SyllabusScheme");
                model.addRow(new Object[]{
                            subCode, subName, DeptName, sem, syllabusScheme});
            }
            rs.close();
        } catch (SQLException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void fillCurrentTable() {
        try {
            DefaultTableModel model = (DefaultTableModel) currentTable.getModel();
            model.setRowCount(0);
            if (facultyTable.getRowCount() > 0) {
                String subQuery = "Select s.SubCode,s.SubName,s.D_DeptCode,s.Sem,sh.F_UFN,f.FName,f.LName,sh.HandlingYear from subject s,subjecthandling sh,faculty f where s.SubCode=sh.S_SubCode and sh.F_UFN=\"" + facultyTable.getModel().getValueAt(facultyTable.convertRowIndexToModel(facultyTable.getSelectedRow()), 0).toString() + "\"and f.UFN=sh.F_UFN order by sh.HandlingYear";
                ResultSet rs = dbConnect.getCon().createStatement().executeQuery(subQuery);
                while (rs.next()) {
                    String subCode = rs.getString("SubCode");
                    String subName = rs.getString("SubName");
                    String year = rs.getString("HandlingYear");
                    String UFN = rs.getString("F_UFN");
                    String name = rs.getString("LName") == null ? rs.getString("FName") : rs.getString("FName") + " " + rs.getString("LName");
                    String DeptName = rs.getString("D_DeptCode");
                    String sem = rs.getString("Sem");
                    model.addRow(new Object[]{
                                subCode, subName, year, UFN, name, sem, DeptName});

                }
                rs.close();
            }
        } catch (SQLException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        filterCurrent();
    }

    private void filldeptCodeComboBox() {
        try {
            deptCodeComboBox.setModel(new javax.swing.DefaultComboBoxModel());
            deptCodeComboBox.addItem("All");
            String deptQuery = "Select DeptCode from department";
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(deptQuery);
            while (rs.next()) {
                String deptTemp = rs.getString("DeptCode");
                deptCodeComboBox.addItem(deptTemp);
            }
            rs.close();
        } catch (SQLException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void fillSemesterComboBox() {
        if (deptCodeComboBox.getModel().getSize() == 0) {
            return;
        }
        DefaultComboBoxModel modelComboBox = new DefaultComboBoxModel();
        semesterComboBox.setModel(modelComboBox);
        modelComboBox.addElement("All");
        String numberOfSemester = null;
        if (deptCodeComboBox.getSelectedIndex() == 0) {
            numberOfSemester = "10";
        } else {
            String sql = "Select NumOfSems from department where DeptCode=\"" + deptCodeComboBox.getSelectedItem().toString() + "\"";
            try {
                ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
                while (rs.next()) {
                    numberOfSemester = rs.getString("NumOfSems");
                }
                rs.close();
            } catch (Exception e) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        for (int i = 0; i < Integer.parseInt(numberOfSemester); i++) {
            modelComboBox.addElement(Integer.toString(i + 1));
        }
    }

    private void filterFaculty() {
        String deptCode = deptCodeComboBox.getSelectedItem().toString();
        String userText = findFacultyTextBox.getText();

        if ("All".equals(deptCode)) {
            deptCode = "";
        }
        ArrayList<RowFilter<Object, Object>> andFilters = new ArrayList<RowFilter<Object, Object>>();
        andFilters.add(RowFilter.regexFilter("(?i)" + userText, 0, 1));
        andFilters.add(RowFilter.regexFilter("(?i)" + deptCode, 2));

        DefaultTableModel model = (DefaultTableModel) facultyTable.getModel();
        final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
        sorter.setRowFilter(RowFilter.andFilter(andFilters));
        facultyTable.setRowSorter(sorter);

        if (facultyTable.getRowCount() > 0) {
            facultyTable.getSelectionModel().setSelectionInterval(0, 0);
            selectedFacultyText.setForeground(Color.black);
            int row = facultyTable.convertRowIndexToModel(facultyTable.getSelectedRow());
            selectedFacultyText.setText(facultyTable.getModel().getValueAt(row, 1).toString());
        } else {
            Toolkit.getDefaultToolkit().beep();
            selectedFacultyText.setForeground(Color.red);
            selectedFacultyText.setText("No match found.");
        }
        fillCurrentTable();
    }

    private void filterSubject() {
        String sem = semesterComboBox.getSelectedItem().toString();
        String syllabus = syllabusComboBox.getSelectedItem().toString();
        String userText = findSubjectTextBox.getText();
        String deptCode;
        if (facultyTable.getRowCount() > 0) {
            deptCode = facultyTable.getModel().getValueAt(facultyTable.convertRowIndexToModel(facultyTable.getSelectedRow()), 2).toString();
        } else {
            deptCode = "XXXXX"; //To remove subjectTable items.
        }
        if ("All".equals(deptCode)) {
            deptCode = "";
        }
        if ("All".equals(sem)) {
            sem = "";
        }
        if ("All".equals(syllabus)) {
            syllabus = "";
        }
        ArrayList<RowFilter<Object, Object>> andFilters = new ArrayList<RowFilter<Object, Object>>();
        andFilters.add(RowFilter.regexFilter("(?i)" + userText, 0, 1));
        andFilters.add(RowFilter.regexFilter("(?i)" + deptCode, 2));
        andFilters.add(RowFilter.regexFilter("(?i)" + sem, 3));
        andFilters.add(RowFilter.regexFilter("(?i)" + syllabus, 4));
        DefaultTableModel model = (DefaultTableModel) subjectTable.getModel();
        final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
        sorter.setRowFilter(RowFilter.andFilter(andFilters));
        subjectTable.setRowSorter(sorter);
        if (subjectTable.getRowCount() > 0) {
            subjectTable.getSelectionModel().setSelectionInterval(0, 0);
            selectedSubjectText.setForeground(Color.black);
            int row = subjectTable.convertRowIndexToModel(subjectTable.getSelectedRow());
            selectedSubjectText.setText(subjectTable.getModel().getValueAt(row, 1).toString());
        } else {
            Toolkit.getDefaultToolkit().beep();
            selectedSubjectText.setForeground(Color.red);
            selectedSubjectText.setText("No match found.");
        }
    }

    private void filterCurrent() {

        String year = yearFilterComboBox.getSelectedItem().toString();
        String userText = findCurrentTextBox.getText();

        if ("All".equals(year)) {
            year = "";
        }


        ArrayList<RowFilter<Object, Object>> andFilters = new ArrayList<RowFilter<Object, Object>>();
        andFilters.add(RowFilter.regexFilter("(?i)" + userText, 0, 1, 3, 4, 5, 6));
        andFilters.add(RowFilter.regexFilter("(?i)" + year, 2));
        DefaultTableModel model = (DefaultTableModel) currentTable.getModel();
        final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
        sorter.setRowFilter(RowFilter.andFilter(andFilters));
        currentTable.setRowSorter(sorter);
        if (currentTable.getRowCount() > 0) {
            currentTable.getSelectionModel().setSelectionInterval(0, 0);
            selectedCurrentlySubjectText.setForeground(Color.black);
            int row = currentTable.convertRowIndexToModel(currentTable.getSelectedRow());
            selectedCurrentlySubjectText.setText(currentTable.getModel().getValueAt(row, 1).toString());
            fillFormFeilds();
        } else {
            Toolkit.getDefaultToolkit().beep();
            selectedCurrentlySubjectText.setForeground(Color.red);
            selectedCurrentlySubjectText.setText("No match found.");
            clear();
        }
    }

    private void setCurrentYear() {
        Calendar cal = Calendar.getInstance();
        int year1 = cal.get(Calendar.YEAR);
        String year = new Integer(year1).toString();
        yearComboBox.setSelectedItem(year);
    }

    private void fillFormFeilds() {
        int row = currentTable.convertRowIndexToModel(currentTable.getSelectedRow());
        facultyNameTextBox.setText(currentTable.getModel().getValueAt(row, 4).toString());
        ufnTextBox.setText(currentTable.getModel().getValueAt(row, 3).toString());
        subjectNameTextBox.setText(currentTable.getModel().getValueAt(row, 1).toString());
        subjectCodeTextBox.setText(currentTable.getModel().getValueAt(row, 0).toString());
        deptCodeTextBox.setText(currentTable.getModel().getValueAt(row, 6).toString());
        semesterTextBox.setText(currentTable.getModel().getValueAt(row, 5).toString());
        yearTextBox.setText(currentTable.getModel().getValueAt(row, 2).toString());
        hierarchy();
    }

    private void clear() {
        facultyNameTextBox.setText(null);
        ufnTextBox.setText(null);
        subjectNameTextBox.setText(null);
        subjectCodeTextBox.setText(null);
        deptCodeTextBox.setText(null);
        semesterTextBox.setText(null);
        yearTextBox.setText(null);
        hierarchy();
    }

    private void hierarchy() {
        String privilege = Runner.RunnerObj.MainUIObj.getPrivilege();
        if ("tempAdmin".equalsIgnoreCase(privilege)) {
            hierachyTempAdmin();
        } else if ("hod".equalsIgnoreCase(privilege)) {
            hierachyHOD();
        }
    }

    private void hierachyHOD() {
        if (facultyTable.getModel().getValueAt(facultyTable.convertRowIndexToModel(facultyTable.getSelectedRow()), 2).toString().equals(Run.Runner.RunnerObj.MainUIObj.getDept())) {
            addButton.setEnabled(true);
            deleteButton.setEnabled(true);
            yearComboBox.setEnabled(true);
        } else {
            addButton.setEnabled(false);
            deleteButton.setEnabled(false);
            yearComboBox.setEnabled(false);
        }
    }

    private void hierachyTempAdmin() {
        ////////////////////////////////
        ////No changes./////
        ////////////////////////////////
    }
}
