/*
 * Form:HODSelectorUI
 * version=0.2.8(Maked all yajnesh changes)
 * Updated=2/08/2012 at 11.44 PM
 *          12/08/2012 at 1.35
 *          15/08/2012 at 4.22 PM
 *          15/08/2012 at 6.09 PM
 *          25/08/2012 at 12.58 AM icon
 *          1/9/2012 at 12.53 AM small interface update
 *          2/9/2012 at 12.06 AM notification mouse entered removed.
 *          3/9/2012 at 2.21 PM killObject
 * Form test compleated.
 */
package Advance;

import Run.dbConnect;
import java.awt.Color;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author V4 Creations
 */
public class HODSelectorUI extends javax.swing.JFrame {

    public String globalCaller;
    public int departmentComboBoxIndex;

    /**
     * Creates new form HODSelecterUI
     */
    public HODSelectorUI(String caller, int departmentIndex) {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/main_package/resources/icon.png")).getImage());
        setLocationRelativeTo(null);
        globalCaller = caller;
        departmentComboBoxIndex = departmentIndex;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        departmentNameComboBox = new javax.swing.JComboBox();
        facultyNameLabel = new javax.swing.JLabel();
        findText = new javax.swing.JTextField();
        findDetailsPanel = new javax.swing.JPanel();
        currentHODPhotoLabel = new javax.swing.JLabel();
        currentHODNameLabel = new javax.swing.JLabel();
        notificationLabel = new javax.swing.JLabel();
        makeHOD = new javax.swing.JButton();
        home = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        findList = new javax.swing.JList();
        facultyNameRadio = new javax.swing.JRadioButton();
        ufnRadio = new javax.swing.JRadioButton();
        facultyNameResultLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Select H.O.D");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select the H.O.D"));

        departmentNameComboBox.setToolTipText("To select a department.");
        departmentNameComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                departmentNameComboBoxMouseEntered(evt);
            }
        });
        departmentNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departmentNameComboBoxActionPerformed(evt);
            }
        });
        departmentNameComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                departmentNameComboBoxFocusGained(evt);
            }
        });
        departmentNameComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                departmentNameComboBoxKeyPressed(evt);
            }
        });

        facultyNameLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        facultyNameLabel.setText("Facutly name :");
        facultyNameLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                facultyNameLabelMouseEntered(evt);
            }
        });

        findText.setToolTipText("By entring a key word.You can search on the list.");
        findText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                findTextMouseEntered(evt);
            }
        });
        findText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                findTextFocusGained(evt);
            }
        });
        findText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                findTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                findTextKeyReleased(evt);
            }
        });

        findDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Current H.O.D"));
        findDetailsPanel.setToolTipText("<html>\nYou can get the selected department's<br>\ncurrent  H.O.D details.\n</html>");
        findDetailsPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                findDetailsPanelMouseEntered(evt);
            }
        });
        findDetailsPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                findDetailsPanelFocusGained(evt);
            }
        });

        currentHODPhotoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/defaultPhoto(3.5x4.5).jpg"))); // NOI18N
        currentHODPhotoLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        currentHODNameLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        currentHODNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentHODNameLabel.setText(" ");

        javax.swing.GroupLayout findDetailsPanelLayout = new javax.swing.GroupLayout(findDetailsPanel);
        findDetailsPanel.setLayout(findDetailsPanelLayout);
        findDetailsPanelLayout.setHorizontalGroup(
            findDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(currentHODNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, findDetailsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(currentHODPhotoLabel)
                .addContainerGap())
        );
        findDetailsPanelLayout.setVerticalGroup(
            findDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, findDetailsPanelLayout.createSequentialGroup()
                .addComponent(currentHODPhotoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentHODNameLabel))
        );

        notificationLabel.setForeground(new java.awt.Color(51, 51, 255));
        notificationLabel.setText(" ");

        makeHOD.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        makeHOD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Ok-icon.png"))); // NOI18N
        makeHOD.setText("Make H.O.D");
        makeHOD.setToolTipText("<html>\nStep 1, Select a faculty name or faculty UFN from the list.<br>\nStep 2, Click this button. The H.O.D of the selected <br>\ndepartment got changed or created.\n</html>\n");
        makeHOD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                makeHODMouseEntered(evt);
            }
        });
        makeHOD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeHODActionPerformed(evt);
            }
        });
        makeHOD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                makeHODFocusGained(evt);
            }
        });
        makeHOD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                makeHODKeyPressed(evt);
            }
        });

        home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/home-icon-small.png"))); // NOI18N
        home.setText("Home");
        home.setToolTipText("Click home button to go back to home.");
        home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                homeMouseEntered(evt);
            }
        });
        home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });
        home.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                homeFocusGained(evt);
            }
        });

        findList.setToolTipText("<html>\nBy clicking on the list you can directly<br>\nselect the faculty name or UFN.\n</html>");
        findList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                findListMouseEntered(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                findListMouseReleased(evt);
            }
        });
        findList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                findListFocusGained(evt);
            }
        });
        findList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                findListKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(findList);

        buttonGroup1.add(facultyNameRadio);
        facultyNameRadio.setSelected(true);
        facultyNameRadio.setText("Faculty name");
        facultyNameRadio.setToolTipText("Select this for seeing faculty name on faculty list.");
        facultyNameRadio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                facultyNameRadioMouseEntered(evt);
            }
        });
        facultyNameRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facultyNameRadioActionPerformed(evt);
            }
        });
        facultyNameRadio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                facultyNameRadioFocusGained(evt);
            }
        });
        facultyNameRadio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                facultyNameRadioKeyPressed(evt);
            }
        });

        buttonGroup1.add(ufnRadio);
        ufnRadio.setText("UFN");
        ufnRadio.setToolTipText("<html>\nSelect this for seeing faculty UFN on faculty list.<br>\nNote :- UFN : University Faculty Number.\n</html>");
        ufnRadio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ufnRadioMouseEntered(evt);
            }
        });
        ufnRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ufnRadioActionPerformed(evt);
            }
        });
        ufnRadio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ufnRadioFocusGained(evt);
            }
        });
        ufnRadio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ufnRadioKeyPressed(evt);
            }
        });

        facultyNameResultLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        facultyNameResultLabel.setToolTipText("<html>\nIt shows you the faculty name, which<br>\n you selected from the faculty list.\n</html>");
        facultyNameResultLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                facultyNameResultLabelMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(notificationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(facultyNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(facultyNameResultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(findText)
                                .addComponent(departmentNameComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(mainPanelLayout.createSequentialGroup()
                                    .addComponent(facultyNameRadio)
                                    .addGap(10, 10, 10)
                                    .addComponent(ufnRadio)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, Short.MAX_VALUE)
                                    .addComponent(makeHOD))))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(findDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(home, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(departmentNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(facultyNameLabel)
                            .addComponent(facultyNameResultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(makeHOD)
                            .addComponent(ufnRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(facultyNameRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(findText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(findDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(home, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)))
                .addComponent(notificationLabel))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private String collectionOfUFN;
    private String collectionOfDeptCode;

    private void fillFacultyName() {
        makeHOD.setEnabled(true);
        facultyNameResultLabel.setForeground(Color.black);
        if (facultyNameRadio.isSelected() && findList.isSelectionEmpty() == false) {
            facultyNameResultLabel.setText(findList.getSelectedValue().toString());
        } else if (ufnRadio.isSelected() && findList.isSelectionEmpty() == false) {
            String sql;
            sql = "Select FName,Lname from faculty,department where D_DeptCode=DeptCode and DeptName=\"" + departmentNameComboBox.getModel().getSelectedItem().toString() + "\"and UFN=\"" + findList.getSelectedValue().toString() + "\"";
            try {
                ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
                while (rs.next()) {
                    if (rs.getString("LName") == null) {
                        facultyNameResultLabel.setText(rs.getString("FName"));
                    } else {
                        facultyNameResultLabel.setText(rs.getString("FName") + " " + rs.getString("LName"));
                    }
                }
                rs.close();
            } catch (Exception e) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            Toolkit.getDefaultToolkit().beep();
            facultyNameResultLabel.setForeground(Color.red);
            facultyNameResultLabel.setText("No match found.");
            makeHOD.setEnabled(false);
        }
    }
    private String currentHodUfn = null;

    private void fillCurrentHODDetails() {
        currentHODNameLabel.setText(" ");
        if (departmentNameComboBox.getModel().getSize() > 0) {
            String sql = "Select UFN,FName,LName,Image from faculty,ssnofhod s,department d where F_UFN=UFN and s.D_DeptCode=DeptCode and DeptName=\"" + departmentNameComboBox.getModel().getSelectedItem().toString() + "\"";
            byte[] bytes = null;
            Image hodPhoto = null;
            try {
                ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
                while (rs.next()) {
                    currentHodUfn = rs.getString("UFN");
                    bytes = rs.getBytes("Image");
                    if (bytes != null) {
                        hodPhoto = this.getToolkit().createImage(bytes);
                        ImageIcon icon = new ImageIcon(hodPhoto);
                        currentHODPhotoLabel.setIcon(icon);
                    } else {
                        currentHODPhotoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/defaultPhoto(3.5x4.5).jpg")));
                        hodPhoto = null;
                    }
                    if (rs.getString("LName") == null) {
                        currentHODNameLabel.setText(rs.getString("FName"));
                    } else {
                        currentHODNameLabel.setText(rs.getString("FName") + " " + rs.getString("LName"));
                    }
                }
                rs.close();
            } catch (Exception e) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (" ".equals(currentHODNameLabel.getText())) {
            currentHODNameLabel.setText("Not selected.");
            currentHODPhotoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/defaultPhoto(3.5x4.5).jpg")));

        }
    }

    private void fillComboBox() {
        DefaultComboBoxModel modelComboBox = new DefaultComboBoxModel();
        departmentNameComboBox.setModel(modelComboBox);
        collectionOfDeptCode = null;

        String sql = "Select DeptCode,DeptName from department order by DeptName";
        try {
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            while (rs.next()) {
                collectionOfDeptCode += " " + rs.getString("DeptCode");
                modelComboBox.addElement(rs.getString("DeptName"));
            }
            if (departmentNameComboBox.getModel().getSize() > 0) {
                departmentNameComboBox.setSelectedIndex(0);
            }
            rs.close();
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void fillFindList() {
        DefaultListModel modelList = new DefaultListModel();
        findList.setModel(modelList);
        collectionOfUFN = null;
        String sql;
        if (departmentNameComboBox.getModel().getSize() > 0) {
            if (facultyNameRadio.isSelected()) {
                sql = "Select FName,LName,UFN from faculty,department where D_DeptCode=DeptCode and DeptName=\"" + departmentNameComboBox.getModel().getSelectedItem().toString() + "\"order by FName";
                try {
                    ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
                    while (rs.next()) {
                        collectionOfUFN += " " + rs.getString("UFN");
                        if (rs.getString("LName") == null) {
                            modelList.addElement(rs.getString("FName"));
                        } else {
                            modelList.addElement(rs.getString("FName") + " " + rs.getString("LName"));
                        }

                    }
                    if (findList.getModel().getSize() > 0) {
                        findList.getSelectionModel().setSelectionInterval(0, 0);
                    }
                    rs.close();
                } catch (Exception e) {
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                sql = "Select UFN from faculty,department where D_DeptCode=DeptCode and DeptName=\"" + departmentNameComboBox.getModel().getSelectedItem().toString() + "\"order by UFN";
                try {
                    ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
                    while (rs.next()) {
                        modelList.addElement(rs.getString("UFN"));
                    }
                    if (findList.getModel().getSize() > 0) {
                        findList.getSelectionModel().setSelectionInterval(0, 0);
                    }
                    rs.close();
                } catch (Exception e) {
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            fillFacultyName();
        }
        fillCurrentHODDetails();
        if (findList.getModel().getSize() > 0) {
            facultyNameResultLabel.setForeground(Color.black);
            facultyNameResultLabel.setText(findList.getSelectedValue().toString());
            makeHOD.setEnabled(true);
        } else {
            makeHOD.setEnabled(false);
        }
    }
    private void homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeActionPerformed
        if ("MainUIPointer".equals(globalCaller)) {
            // main_package.MainUI.MainUIPointer.show();
            Run.Runner.RunnerObj.MainUIObj.show();
        } else {
            Department.DepartmentDetails.uiDepartmentSelectButton.doClick();
            Department.DepartmentDetails.uiDepartment.show();
        }
        this.dispose();
        Run.Runner.RunnerObj.MainUIObj.HODSelectorUIObj=null;
    }//GEN-LAST:event_homeActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        home.doClick();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        fillComboBox();
        fillFindList();
        if (!"MainUIPointer".equals(globalCaller)) {
            home.setToolTipText("Click go back button to go back to department details.");
            home.setText("Go Back");
            home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Actions-go-previous-icon.png")));
            if (departmentNameComboBox.getModel().getSize() > 0) {
                departmentNameComboBox.setSelectedIndex(departmentComboBoxIndex);
            }
            departmentNameComboBox.setEnabled(false);
        }
        findText.setText(null);
        findText.requestFocus();
    }//GEN-LAST:event_formWindowOpened

    private void findTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findTextKeyReleased

        /*
         * Search filter.
         */
        int i, elseOccurs = 0;
        String inputString = findText.getText().toString().toUpperCase();
        for (i = 0; i < findList.getModel().getSize(); i++) {
            if (findList.getModel().getElementAt(i).toString().toUpperCase().matches(inputString + "[^\n\t]*")) {
                findList.setSelectedIndex(i);
                elseOccurs = 0;
                break;
            } else {
                findList.clearSelection();
                elseOccurs = 1;
            }
        }
        if (elseOccurs == 1) {
            findList.scrollRectToVisible(new Rectangle(0, 0, 1, 1));
        } else {
            findList.scrollRectToVisible(new Rectangle(0, findList.getModel().getSize() * findList.getSelectedIndex() + findList.getModel().getSize() * findList.getSelectedIndex(), 1, 1));
        }
        /*
         * Name selection.
         */
        fillFacultyName();
    }//GEN-LAST:event_findTextKeyReleased

    private void makeHODActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeHODActionPerformed
        /*
         * Finding DeptCode,DataUFN;
         */
        String dataDeptCode, dataUFN;
        String tempCollectionOfDeptCode[] = collectionOfDeptCode.split("\\ ");
        dataDeptCode = tempCollectionOfDeptCode[1 + departmentNameComboBox.getSelectedIndex()];

        if (ufnRadio.isSelected()) {
            dataUFN = findList.getSelectedValue().toString();
        } else {
            String tempCollectionOfUFN[] = collectionOfUFN.split("\\ ");
            dataUFN = tempCollectionOfUFN[1 + findList.getSelectedIndex()];
        }
        /*
         * Finding insert or update from currentHODNameLabel.
         */
        String sql;
        int successful;
        if ("Not selected.".equals(currentHODNameLabel.getText())) {
            /*
             * Insert query.
             */
            successful = 0;
            sql = "Insert into ssnofhod values('" + (dataDeptCode) + "','" + (dataUFN) + "');";
            try {
                successful = dbConnect.getCon().createStatement().executeUpdate(sql);
            } catch (SQLException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            if (successful == 1) {
                int loginModificationSuccessful = 0;
                sql = "Update login set Privilege=\"" + "hod" + "\" where F_UFN=\"" + dataUFN + "\"";
                try {
                    loginModificationSuccessful = dbConnect.getCon().createStatement().executeUpdate(sql);
                } catch (SQLException ex) {
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null, "H.O.D selection not successful.\nPlease manually delete faculty UFN from the ssnofhod table.\nThen try again.", "Failed", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (loginModificationSuccessful > 0) {
                    fillCurrentHODDetails();
                    JOptionPane.showMessageDialog(null, "New H.O.D successfully selected.", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, "H.O.D selection not successful.", "Failed", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            /*
             * Update query.
             */
            successful = 0;
            sql = "Update ssnofhod set F_UFN=\"" + dataUFN + "\" where D_DeptCode=\"" + dataDeptCode + "\"";
            try {
                successful = dbConnect.getCon().createStatement().executeUpdate(sql);
            } catch (SQLException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            if (successful == 1) {
                int loginHodPrivilegeChange = 0;
                sql = "Update login set Privilege=\"" + "faculty" + "\" where F_UFN=\"" + currentHodUfn + "\"";
                try {
                    loginHodPrivilegeChange = dbConnect.getCon().createStatement().executeUpdate(sql);
                } catch (SQLException ex) {
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null, "H.O.D selection not successful.\nPlease manually delete faculty UFN from the ssnofhod table.\nThen try again.", "Failed", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (loginHodPrivilegeChange > 0) {
                    int loginModificationSuccessful = 0;
                    sql = "Update login set Privilege=\"" + "hod" + "\" where F_UFN=\"" + dataUFN + "\"";
                    try {
                        loginModificationSuccessful = dbConnect.getCon().createStatement().executeUpdate(sql);
                    } catch (SQLException ex) {
                        Toolkit.getDefaultToolkit().beep();
                        JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        Toolkit.getDefaultToolkit().beep();
                        JOptionPane.showMessageDialog(null, "H.O.D selection not successful.\nPlease manually delete faculty UFN from the ssnofhod table.\nThen try again.", "Failed", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if (loginModificationSuccessful > 0) {
                        fillCurrentHODDetails();
                        JOptionPane.showMessageDialog(null, "New H.O.D successfully selected(Updated).", "Success", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            } else {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, "H.O.D selection not successful.", "Failed", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_makeHODActionPerformed

    private void facultyNameRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facultyNameRadioActionPerformed
        fillFindList();
        findText.setText(null);
        findText.requestFocus();
    }//GEN-LAST:event_facultyNameRadioActionPerformed

    private void ufnRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ufnRadioActionPerformed
        fillFindList();
        findText.setText(null);
        findText.requestFocus();
    }//GEN-LAST:event_ufnRadioActionPerformed

    private void departmentNameComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_departmentNameComboBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            findText.requestFocus();
        }
        fillFindList();
    }//GEN-LAST:event_departmentNameComboBoxKeyPressed

    private void facultyNameRadioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_facultyNameRadioKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            facultyNameRadio.setSelected(true);
            fillFindList();
            findText.requestFocus();
        }

    }//GEN-LAST:event_facultyNameRadioKeyPressed

    private void ufnRadioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ufnRadioKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            ufnRadio.setSelected(true);
            fillFindList();
            findText.requestFocus();
        }
    }//GEN-LAST:event_ufnRadioKeyPressed

    private void findListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findListKeyPressed
        fillFacultyName();
        findText.setText(facultyNameResultLabel.getText());
    }//GEN-LAST:event_findListKeyPressed

    private void departmentNameComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_departmentNameComboBoxMouseEntered
        notificationLabel.setText("Department list.");
    }//GEN-LAST:event_departmentNameComboBoxMouseEntered

    private void facultyNameResultLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_facultyNameResultLabelMouseEntered
        notificationLabel.setText("Faculty name from search list.");
    }//GEN-LAST:event_facultyNameResultLabelMouseEntered

    private void facultyNameLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_facultyNameLabelMouseEntered
        notificationLabel.setText("Faculty name.");
    }//GEN-LAST:event_facultyNameLabelMouseEntered

    private void facultyNameRadioMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_facultyNameRadioMouseEntered
        notificationLabel.setText("Faculty name filter.");
    }//GEN-LAST:event_facultyNameRadioMouseEntered

    private void ufnRadioMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ufnRadioMouseEntered
        notificationLabel.setText("UFN filter.");
    }//GEN-LAST:event_ufnRadioMouseEntered

    private void makeHODMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_makeHODMouseEntered
        notificationLabel.setText("Create or change H.O.D.");
    }//GEN-LAST:event_makeHODMouseEntered

    private void findTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findTextMouseEntered
        notificationLabel.setText("Find faculty.");
    }//GEN-LAST:event_findTextMouseEntered

    private void findListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findListMouseEntered
        notificationLabel.setText("Faculty name list.");
    }//GEN-LAST:event_findListMouseEntered

    private void findDetailsPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findDetailsPanelMouseEntered
        notificationLabel.setText("Current H.O.D deatails.");
    }//GEN-LAST:event_findDetailsPanelMouseEntered

    private void homeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeMouseEntered
        if (home.getText() == "Home") {
            notificationLabel.setText("Go back to home.");
        } else {
            notificationLabel.setText("Go back to department details.");
        }
    }//GEN-LAST:event_homeMouseEntered

    private void departmentNameComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_departmentNameComboBoxFocusGained
        notificationLabel.setText("Department list.");
    }//GEN-LAST:event_departmentNameComboBoxFocusGained

    private void facultyNameRadioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_facultyNameRadioFocusGained
        notificationLabel.setText("Faculty name filter.");
    }//GEN-LAST:event_facultyNameRadioFocusGained

    private void ufnRadioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ufnRadioFocusGained
        notificationLabel.setText("UFN filter.");
    }//GEN-LAST:event_ufnRadioFocusGained

    private void findTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_findTextFocusGained
        notificationLabel.setText("Find faculty.");
        fillFindList();
        findText.setText(null);
    }//GEN-LAST:event_findTextFocusGained

    private void findListFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_findListFocusGained
        notificationLabel.setText("Faculty name list.");
    }//GEN-LAST:event_findListFocusGained

    private void findDetailsPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_findDetailsPanelFocusGained
        notificationLabel.setText("Current H.O.D deatails.");
    }//GEN-LAST:event_findDetailsPanelFocusGained

    private void homeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_homeFocusGained
        if (home.getText() == "Home") {
            notificationLabel.setText("Go back to home.");
        } else {
            notificationLabel.setText("Go back to department details.");
        }
    }//GEN-LAST:event_homeFocusGained

    private void makeHODKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_makeHODKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            makeHOD.doClick();
        }
    }//GEN-LAST:event_makeHODKeyPressed

    private void findTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            makeHOD.requestFocus();
        }
    }//GEN-LAST:event_findTextKeyPressed

    private void findListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findListMouseReleased
        fillFacultyName();
        findText.setText(facultyNameResultLabel.getText());
    }//GEN-LAST:event_findListMouseReleased

    private void departmentNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentNameComboBoxActionPerformed
        findText.requestFocus();
    }//GEN-LAST:event_departmentNameComboBoxActionPerformed

    private void makeHODFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_makeHODFocusGained
        notificationLabel.setText("Create or change H.O.D.");
    }//GEN-LAST:event_makeHODFocusGained
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel currentHODNameLabel;
    private javax.swing.JLabel currentHODPhotoLabel;
    private javax.swing.JComboBox departmentNameComboBox;
    private javax.swing.JLabel facultyNameLabel;
    private javax.swing.JRadioButton facultyNameRadio;
    private javax.swing.JLabel facultyNameResultLabel;
    private javax.swing.JPanel findDetailsPanel;
    private javax.swing.JList findList;
    private javax.swing.JTextField findText;
    private javax.swing.JButton home;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton makeHOD;
    private javax.swing.JLabel notificationLabel;
    private javax.swing.JRadioButton ufnRadio;
    // End of variables declaration//GEN-END:variables
}
