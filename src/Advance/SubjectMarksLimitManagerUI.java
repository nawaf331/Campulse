/*
 * Form:subjectMarksLimitManagerUI
 * version=0.3.2
 * Updated=4/08/2012 at 12.56 PM
 *          12/08/2012 3.20 PM
 *          15-08-2012 12.52 AM
 *          18-08-2012 8.23 PM delete buttn authentication done.
 *          18-08-2012 9.52 PM make sure selection.
 *          23-08-2012 2.34 AM delete tune and color
 *          25-08-2012 at 12.58 AM icon
 *          31-08-2012 at 3.18 AM atleat one selection modified.
 *          2-09-2012 at 11.39 PM key event chaged.
 *          3-9-2012 at 2.22 PM kill object
 */
package Advance;

import Run.dbConnect;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import main_package.authenticationDialog;

/**
 *
 * @author V4 Creations
 */
public class SubjectMarksLimitManagerUI extends javax.swing.JFrame {

    /**
     * Creates new form SubjectMarksLimitManagerUI
     */
    public static int notificationManager = 0;

    public SubjectMarksLimitManagerUI() {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/main_package/resources/icon.png")).getImage());
        cancel.hide();
        clear.hide();
        setLocationRelativeTo(null);
        subjectTypeTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    }

    public void fillsubjectTypeTable() {
        DefaultTableModel model = (DefaultTableModel) subjectTypeTable.getModel();
        model.getDataVector().removeAllElements();
        String sql = "Select * from submarkslimit order by SubType";
        try {
            ResultSet rs = dbConnect.getCon().createStatement().executeQuery(sql);
            String dataSubType, dataMinInternal, dataMaxInternal, dataMinExternal, dataMaxExternal;
            while (rs.next()) {
                dataSubType = rs.getString("SubType");
                dataMinInternal = rs.getString("MinInternal");
                dataMaxInternal = rs.getString("MaxInternal");
                dataMinExternal = rs.getString("MinExternal");
                dataMaxExternal = rs.getString("MaxExternal");

                model.addRow(new Object[]{
                            dataSubType, dataMinInternal, dataMaxInternal, dataMinExternal, dataMaxExternal});
            }
            rs.close();
            if (subjectTypeTable.getModel().getRowCount() > 0) {
                subjectTypeTable.getSelectionModel().setSelectionInterval(0, 0);
            }
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        subjectTypePanel = new javax.swing.JPanel();
        subjectTypeScroll = new javax.swing.JScrollPane();
        subjectTypeTable = new javax.swing.JTable();
        notification = new javax.swing.JLabel();
        subType = new javax.swing.JTextField();
        minInternal = new javax.swing.JTextField();
        maxInternal = new javax.swing.JTextField();
        minExternal = new javax.swing.JTextField();
        maxExternal = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        markLabel1 = new javax.swing.JLabel();
        markLabel2 = new javax.swing.JLabel();
        markLabel3 = new javax.swing.JLabel();
        markLabel4 = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        modify = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        home = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        clear = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        bad1 = new javax.swing.JLabel();
        bad2 = new javax.swing.JLabel();
        bad4 = new javax.swing.JLabel();
        bad3 = new javax.swing.JLabel();
        bad5 = new javax.swing.JLabel();
        photoLabel = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Subject type & Mark limits");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        subjectTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Subject type & Mark limits"));
        subjectTypePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        subjectTypePanel.setPreferredSize(new java.awt.Dimension(484, 485));

        subjectTypeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject Type", "Internal (MIN)", "Internal (MAX)", "External (MIN)", "External (MAX)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        subjectTypeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subjectTypeTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                subjectTypeTableMouseEntered(evt);
            }
        });
        subjectTypeTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                subjectTypeTableKeyReleased(evt);
            }
        });
        subjectTypeScroll.setViewportView(subjectTypeTable);

        notification.setForeground(new java.awt.Color(51, 51, 255));
        notification.setText(" ");

        subType.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        subType.setToolTipText("Subject type.");
        subType.setPreferredSize(new java.awt.Dimension(105, 20));
        subType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                subTypeMouseEntered(evt);
            }
        });
        subType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                subTypeFocusGained(evt);
            }
        });
        subType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                subTypeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                subTypeKeyReleased(evt);
            }
        });

        minInternal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        minInternal.setToolTipText("Minimum internal mark.");
        minInternal.setName("");
        minInternal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                minInternalMouseEntered(evt);
            }
        });
        minInternal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                minInternalFocusGained(evt);
            }
        });
        minInternal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                minInternalKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                minInternalKeyReleased(evt);
            }
        });

        maxInternal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        maxInternal.setToolTipText("Maximum internal mark.");
        maxInternal.setName("");
        maxInternal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                maxInternalMouseEntered(evt);
            }
        });
        maxInternal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                maxInternalFocusGained(evt);
            }
        });
        maxInternal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                maxInternalKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                maxInternalKeyReleased(evt);
            }
        });

        minExternal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        minExternal.setToolTipText("Minimum external mark.");
        minExternal.setName("");
        minExternal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                minExternalMouseEntered(evt);
            }
        });
        minExternal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                minExternalFocusGained(evt);
            }
        });
        minExternal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                minExternalKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                minExternalKeyReleased(evt);
            }
        });

        maxExternal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        maxExternal.setToolTipText("Maximum external mark.");
        maxExternal.setName("");
        maxExternal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                maxExternalMouseEntered(evt);
            }
        });
        maxExternal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                maxExternalFocusGained(evt);
            }
        });
        maxExternal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                maxExternalKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                maxExternalKeyReleased(evt);
            }
        });

        jLabel2.setLabelFor(subType);
        jLabel2.setText("Subject type *:");

        markLabel1.setLabelFor(minInternal);
        markLabel1.setText("Minimum internal mark   *:");

        markLabel2.setLabelFor(maxInternal);
        markLabel2.setText("Maximum internal mark  *:");

        markLabel3.setLabelFor(minExternal);
        markLabel3.setText("Minimum external mark  *:");

        markLabel4.setLabelFor(maxExternal);
        markLabel4.setText("Maximum external mark *:");

        add.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Button-Add-icon.png"))); // NOI18N
        add.setText("Add");
        add.setToolTipText("<html>\nStep 1, Press add button to enable the text feild.<br>\nStep 2, Enter subject type details.<br>\nStep 3, Press add button again to add subject type.\n</html>");
        add.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addMouseEntered(evt);
            }
        });
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        add.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addFocusGained(evt);
            }
        });
        add.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addKeyPressed(evt);
            }
        });

        modify.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        modify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Text-Edit-icon.png"))); // NOI18N
        modify.setText("Modify");
        modify.setToolTipText("<html>Step 1, Press modify button to enable the text feild.<br>\nStep 2, Select the subject type to be edited.<br>\nStep 3, Enter subject type details.<br>\nStep 4, Press modify button again to modify subject type.\n</html>");
        modify.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                modifyMouseEntered(evt);
            }
        });
        modify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyActionPerformed(evt);
            }
        });
        modify.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                modifyKeyPressed(evt);
            }
        });

        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Actions-edit-delete-icon.png"))); // NOI18N
        delete.setText("Delete");
        delete.setToolTipText("<html>\nStep 1, Select the subject type from the table.<br>\nStep 2, Press delete button.\n</html>");
        delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteMouseEntered(evt);
            }
        });
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        delete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deleteKeyPressed(evt);
            }
        });

        home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/home-icon-small.png"))); // NOI18N
        home.setText("Home");
        home.setToolTipText("Click home button to go back to home.");
        home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                homeMouseEntered(evt);
            }
        });
        home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });
        home.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                homeKeyPressed(evt);
            }
        });

        clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Actionsclear-icon-small.png"))); // NOI18N
        clear.setText("Clear");
        clear.setToolTipText("Click to clear the text feild.");
        clear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                clearMouseEntered(evt);
            }
        });
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        clear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                clearKeyPressed(evt);
            }
        });

        cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/Button-cancel-icon.png"))); // NOI18N
        cancel.setText("Cancel");
        cancel.setToolTipText("Click to cancel addiition or modification.");
        cancel.setHideActionText(true);
        cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancelMouseEntered(evt);
            }
        });
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        cancel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelKeyPressed(evt);
            }
        });

        bad1.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad1.setForeground(new java.awt.Color(255, 0, 0));
        bad1.setText(" ");

        bad2.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad2.setForeground(new java.awt.Color(255, 0, 0));
        bad2.setText(" ");

        bad4.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad4.setForeground(new java.awt.Color(255, 0, 0));
        bad4.setText(" ");

        bad3.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad3.setForeground(new java.awt.Color(255, 0, 0));
        bad3.setText(" ");

        bad5.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        bad5.setForeground(new java.awt.Color(255, 0, 0));
        bad5.setText(" ");

        photoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_package/resources/address_book.png"))); // NOI18N

        javax.swing.GroupLayout subjectTypePanelLayout = new javax.swing.GroupLayout(subjectTypePanel);
        subjectTypePanel.setLayout(subjectTypePanelLayout);
        subjectTypePanelLayout.setHorizontalGroup(
            subjectTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subjectTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subjectTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(subjectTypePanelLayout.createSequentialGroup()
                        .addGroup(subjectTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(subjectTypePanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(subType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bad5))
                            .addGroup(subjectTypePanelLayout.createSequentialGroup()
                                .addGroup(subjectTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(subjectTypePanelLayout.createSequentialGroup()
                                        .addGroup(subjectTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(markLabel3)
                                            .addComponent(markLabel2))
                                        .addGap(8, 8, 8))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subjectTypePanelLayout.createSequentialGroup()
                                        .addGroup(subjectTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(markLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(markLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addGroup(subjectTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(minInternal, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(maxExternal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(minExternal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(maxInternal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(subjectTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(bad1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bad2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bad4)
                                    .addComponent(bad3))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(photoLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(subjectTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(home, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(modify, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(notification)
                    .addComponent(subjectTypeScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        subjectTypePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {maxExternal, maxInternal, minExternal, minInternal});

        subjectTypePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {add, cancel, clear, delete, home, modify});

        subjectTypePanelLayout.setVerticalGroup(
            subjectTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subjectTypePanelLayout.createSequentialGroup()
                .addGroup(subjectTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(subjectTypePanelLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(subjectTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(subType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bad5))
                        .addGroup(subjectTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(subjectTypePanelLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(bad1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subjectTypePanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(subjectTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(markLabel1)
                                    .addComponent(minInternal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(subjectTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(markLabel2)
                            .addComponent(bad2)
                            .addComponent(maxInternal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(subjectTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(minExternal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(markLabel3)
                            .addComponent(bad3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(subjectTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(maxExternal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(markLabel4)
                            .addComponent(bad4)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subjectTypePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(photoLabel))
                    .addGroup(subjectTypePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modify)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addComponent(home, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(subjectTypeScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(notification))
        );

        subjectTypePanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {minInternal, subType});

        subjectTypePanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {add, cancel, clear, delete, home, modify});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(subjectTypePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(subjectTypePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        subType.setEditable(false);
        minInternal.setEditable(false);
        maxInternal.setEditable(false);
        minExternal.setEditable(false);
        maxExternal.setEditable(false);
        cancel.hide();
        clear.hide();
        bad1.setText(" ");
        bad2.setText(" ");
        bad3.setText(" ");
        bad4.setText(" ");
        fillsubjectTypeTable();
        fillTextArea();
    }//GEN-LAST:event_formWindowOpened

    private void subTypeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subTypeMouseEntered
        if (notificationManager == 1) {
            notification.setText("Enter the subject type.");
        }
    }//GEN-LAST:event_subTypeMouseEntered

    private void minInternalMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minInternalMouseEntered
        if (notificationManager == 1) {
            notification.setText("Enter the minimum internal mark required for this subject.");
        }
    }//GEN-LAST:event_minInternalMouseEntered

    private void maxInternalMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maxInternalMouseEntered
        if (notificationManager == 1) {
            notification.setText("Enter the maximum internal mark required for this subject.");
        }
    }//GEN-LAST:event_maxInternalMouseEntered

    private void minExternalMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minExternalMouseEntered
        if (notificationManager == 1) {
            notification.setText("Enter the minimum external mark required for this subject.");
        }
    }//GEN-LAST:event_minExternalMouseEntered

    private void maxExternalMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maxExternalMouseEntered
        if (notificationManager == 1) {
            notification.setText("Enter the maximum external mark required for this subject.");
        }
    }//GEN-LAST:event_maxExternalMouseEntered

    private void addMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMouseEntered
        notification.setText("To add new subject type to table.");
    }//GEN-LAST:event_addMouseEntered

    private void modifyMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modifyMouseEntered
        notification.setText("To modify the subject type in the table.");
    }//GEN-LAST:event_modifyMouseEntered

    private void deleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteMouseEntered
        notification.setText("To delete the subject type from the table.");
    }//GEN-LAST:event_deleteMouseEntered

    private void homeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeMouseEntered
        notification.setText("Go back to home.");
    }//GEN-LAST:event_homeMouseEntered

    private void fillTextArea() {
        if (subjectTypeTable.isEnabled() && subjectTypeTable.getModel().getRowCount() > 0) {
            subType.setText((String) subjectTypeTable.getModel().getValueAt(subjectTypeTable.getSelectedRow(), 0));
            minInternal.setText((String) subjectTypeTable.getModel().getValueAt(subjectTypeTable.getSelectedRow(), 1));
            maxInternal.setText((String) subjectTypeTable.getModel().getValueAt(subjectTypeTable.getSelectedRow(), 2));
            minExternal.setText((String) subjectTypeTable.getModel().getValueAt(subjectTypeTable.getSelectedRow(), 3));
            maxExternal.setText((String) subjectTypeTable.getModel().getValueAt(subjectTypeTable.getSelectedRow(), 4));
        }
    }
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        if (!subType.isEditable()) {
            clear.doClick();
            notificationManager = 1;
            modify.hide();
            delete.hide();
            subType.setEditable(true);
            minInternal.setEditable(true);
            maxInternal.setEditable(true);
            minExternal.setEditable(true);
            maxExternal.setEditable(true);
            subType.requestFocus();
            cancel.show();
            clear.show();
            subjectTypeTable.setEnabled(false);
            subjectTypeTable.clearSelection();
        } else {
            if ("".equals(subType.getText())) {
                JOptionPane.showMessageDialog(null, "Subject type field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                subType.requestFocus();
                return;
            }
            if ("!".equals(bad5.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate subject type.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                subType.requestFocus();
                return;
            }
            if ("".equals(minInternal.getText())) {
                JOptionPane.showMessageDialog(null, "Minimum internal mark field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                minInternal.requestFocus();
                return;
            }
            if ("!".equals(bad1.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate minimum internal mark.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                minInternal.requestFocus();
                return;
            }
            if ("".equals(maxInternal.getText())) {
                JOptionPane.showMessageDialog(null, "Maximum internal mark field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                maxInternal.requestFocus();
                return;
            }
            if ("!".equals(bad2.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate maximum internal mark.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                maxInternal.requestFocus();
                return;
            }
            if ("".equals(minExternal.getText())) {
                JOptionPane.showMessageDialog(null, "Minimum external mark field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                minExternal.requestFocus();
                return;
            }
            if ("!".equals(bad3.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate minimum external mark.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                minExternal.requestFocus();
                return;
            }
            if ("".equals(maxExternal.getText())) {
                JOptionPane.showMessageDialog(null, "Maximum external mark field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                maxExternal.requestFocus();
                return;
            }
            if ("!".equals(bad4.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate maximum external mark.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                maxExternal.requestFocus();
                return;
            }
            notificationManager = 0;
            modify.show();
            delete.show();
            subType.setEditable(false);
            minInternal.setEditable(false);
            maxInternal.setEditable(false);
            minExternal.setEditable(false);
            maxExternal.setEditable(false);
            cancel.hide();
            clear.hide();
            subjectTypeTable.setEnabled(true);
            String createQuery = "Insert into submarkslimit values('" + (subType.getText()) + "','" + (minInternal.getText()) + "','" + (maxInternal.getText()) + "','" + (minExternal.getText()) + "','" + (maxExternal.getText()) + "');";
            int successful = 0;

            try {
                successful = dbConnect.getCon().createStatement().executeUpdate(createQuery);
            } catch (SQLException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            clear.doClick();

            if (successful == 1) {
                fillsubjectTypeTable();
                JOptionPane.showMessageDialog(null, "Subject type successfully added.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, "Subject type not successfully added.", "Failed", JOptionPane.ERROR_MESSAGE);
            }
            clear.doClick();
        }
    }//GEN-LAST:event_addActionPerformed

    private void subTypeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_subTypeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (add.isVisible()) {
                add.requestFocus();
            } else {
                modify.requestFocus();
            }
        }
    }//GEN-LAST:event_subTypeKeyPressed

    private void subTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_subTypeFocusGained
        if (notificationManager == 1) {
            notification.setText("Enter the subject type.");
        }
    }//GEN-LAST:event_subTypeFocusGained

    private void minInternalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_minInternalFocusGained
        if (notificationManager == 1) {
            notification.setText("Enter the minimum internal mark required for this subject.");
        }
    }//GEN-LAST:event_minInternalFocusGained

    private void maxInternalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_maxInternalFocusGained
        if (notificationManager == 1) {
            notification.setText("Enter the maximum internal mark required for this subject.");
        }
    }//GEN-LAST:event_maxInternalFocusGained

    private void minExternalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_minExternalFocusGained
        if (notificationManager == 1) {
            notification.setText("Enter the minimum external mark required for this subject.");
        }
    }//GEN-LAST:event_minExternalFocusGained

    private void maxExternalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_maxExternalFocusGained
        if (notificationManager == 1) {
            notification.setText("Enter the maximum external mark required for this subject.");
        }
    }//GEN-LAST:event_maxExternalFocusGained

    private void minInternalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minInternalKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (add.isVisible()) {
                add.requestFocus();
            } else {
                modify.requestFocus();
            }
        }
    }//GEN-LAST:event_minInternalKeyPressed

    private void maxInternalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxInternalKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (add.isVisible()) {
                add.requestFocus();
            } else {
                modify.requestFocus();
            }
        }
    }//GEN-LAST:event_maxInternalKeyPressed

    private void minExternalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minExternalKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (add.isVisible()) {
                add.requestFocus();
            } else {
                modify.requestFocus();
            }
        }
    }//GEN-LAST:event_minExternalKeyPressed

    private void maxExternalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxExternalKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (add.isVisible()) {
                add.requestFocus();
            } else {
                modify.requestFocus();
            }
        }
    }//GEN-LAST:event_maxExternalKeyPressed

    private void modifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyActionPerformed
        if (subjectTypeTable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a subject type.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (!subType.isEditable()) {
            if (!subjectTypeTable.getModel().getValueAt(subjectTypeTable.convertRowIndexToModel(subjectTypeTable.getSelectedRow()), 0).toString().equals(subType.getText())) {
                JOptionPane.showMessageDialog(null, "Please make sure your selection.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            notificationManager = 1;
            add.hide();
            delete.hide();
            subType.setEditable(true);
            minInternal.setEditable(true);
            maxInternal.setEditable(true);
            minExternal.setEditable(true);
            maxExternal.setEditable(true);
            subType.requestFocus();
            cancel.show();
            clear.show();
            subjectTypeTable.setEnabled(false);
        } else {
            if ("".equals(subType.getText())) {
                JOptionPane.showMessageDialog(null, "Subject type field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                subType.requestFocus();
                return;
            }
            if ("!".equals(bad5.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate subject type.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                subType.requestFocus();
                return;
            }
            if ("".equals(minInternal.getText())) {
                JOptionPane.showMessageDialog(null, "Minimum internal mark field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                minInternal.requestFocus();
                return;
            }
            if ("!".equals(bad1.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate minimum internal mark.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                minInternal.requestFocus();
                return;
            }
            if ("".equals(maxInternal.getText())) {
                JOptionPane.showMessageDialog(null, "Maximum internal mark field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                maxInternal.requestFocus();
                return;
            }
            if ("!".equals(bad2.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate maximum internal mark.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                maxInternal.requestFocus();
                return;
            }
            if ("".equals(minExternal.getText())) {
                JOptionPane.showMessageDialog(null, "Minimum external mark field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                minExternal.requestFocus();
                return;
            }
            if ("!".equals(bad3.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate minimum external mark.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                minExternal.requestFocus();
                return;
            }
            if ("".equals(maxExternal.getText())) {
                JOptionPane.showMessageDialog(null, "Maximum external mark field cannot be empty.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                maxExternal.requestFocus();
                return;
            }
            if ("!".equals(bad4.getText())) {
                JOptionPane.showMessageDialog(null, "Please validate maximum external mark.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                maxExternal.requestFocus();
                return;
            }
            notificationManager = 0;
            add.show();
            delete.show();
            subType.setEditable(false);
            minInternal.setEditable(false);
            maxInternal.setEditable(false);
            minExternal.setEditable(false);
            maxExternal.setEditable(false);
            subjectTypeTable.setEnabled(true);
            cancel.hide();
            clear.hide();
            String createQuery = "Update submarkslimit set SubType=\"" + subType.getText() + "\" , MinInternal=\"" + minInternal.getText() + "\" , MaxInternal=\"" + maxInternal.getText() + "\" , MinExternal=\"" + minExternal.getText() + "\" , MaxExternal=\"" + maxExternal.getText() + "\" where SubType=\"" + (String) subjectTypeTable.getModel().getValueAt(subjectTypeTable.getSelectedRow(), 0) + "\"";
            int successful = 0;
            try {
                successful = dbConnect.getCon().createStatement().executeUpdate(createQuery);
            } catch (SQLException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            clear.doClick();

            if (successful == 1) {
                fillsubjectTypeTable();
                JOptionPane.showMessageDialog(null, "Subject type successfully modified.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, "Subject type modification not successful.", "Failed", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_modifyActionPerformed

    private void homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeActionPerformed
        Run.Runner.RunnerObj.MainUIObj.show();
        this.dispose();
        Run.Runner.RunnerObj.MainUIObj.SubjectMarksLimitManagerUIObj=null;
    }//GEN-LAST:event_homeActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        home.doClick();
    }//GEN-LAST:event_formWindowClosing

    private void addKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            add.doClick();
        }
    }//GEN-LAST:event_addKeyPressed

    private void modifyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_modifyKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            modify.doClick();
        }
    }//GEN-LAST:event_modifyKeyPressed

    private void deleteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deleteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            delete.doClick();
        }
    }//GEN-LAST:event_deleteKeyPressed

    private void homeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_homeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            home.doClick();
        }
    }//GEN-LAST:event_homeKeyPressed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        subjectTypeTable.getSelectionModel().setSelectionInterval(0, 0);
        subType.setText(null);
        minInternal.setText(null);
        maxInternal.setText(null);
        minExternal.setText(null);
        maxExternal.setText(null);
        bad1.setText(" ");
        bad2.setText(" ");
        bad3.setText(" ");
        bad4.setText(" ");
        bad5.setText(" ");
        subType.requestFocus();
        notification.setText(" ");
    }//GEN-LAST:event_clearActionPerformed

    private void clearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clearKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            clear.doClick();
        }
    }//GEN-LAST:event_clearKeyPressed

    private void cancelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cancel.doClick();
        }
    }//GEN-LAST:event_cancelKeyPressed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        add.requestFocus();
        notificationManager = 0;
        clear.doClick();
        subType.setEditable(false);
        minInternal.setEditable(false);
        maxInternal.setEditable(false);
        minExternal.setEditable(false);
        maxExternal.setEditable(false);
        add.show();
        modify.show();
        delete.show();
        cancel.hide();
        clear.hide();
        bad1.setText(" ");
        bad2.setText(" ");
        bad3.setText(" ");
        bad4.setText(" ");
        add.requestFocus();
        subjectTypeTable.setEnabled(true);
        subjectTypeTableMouseClicked(null);
    }//GEN-LAST:event_cancelActionPerformed

    private void clearMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearMouseEntered
        notification.setText("To clear the text feilds.");
    }//GEN-LAST:event_clearMouseEntered

    private void cancelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelMouseEntered
        notification.setText("To cancel addition or modification.");
    }//GEN-LAST:event_cancelMouseEntered

    private void minInternalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minInternalKeyReleased
        if (minInternal.getText().length() > 3) {
            Toolkit.getDefaultToolkit().beep();
            minInternal.setText(minInternal.getText().substring(0, 3));
        }
        if (minInternal.getText().matches("[0-9][0-9]*")) {
            bad1.setText(" ");
        } else {
            bad1.setText("!");
        }
    }//GEN-LAST:event_minInternalKeyReleased

    private void maxInternalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxInternalKeyReleased
        if (maxInternal.getText().length() > 3) {
            Toolkit.getDefaultToolkit().beep();
            maxInternal.setText(maxInternal.getText().substring(0, 3));
        }
        if (maxInternal.getText().matches("[0-9][0-9]*")) {
            bad2.setText(" ");
        } else {
            bad2.setText("!");
        }
    }//GEN-LAST:event_maxInternalKeyReleased

    private void minExternalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minExternalKeyReleased
        if (minExternal.getText().length() > 3) {
            Toolkit.getDefaultToolkit().beep();
            minExternal.setText(minExternal.getText().substring(0, 3));
        }
        if (minExternal.getText().matches("[0-9][0-9]*")) {
            bad3.setText(" ");
        } else {
            bad3.setText("!");
        }
    }//GEN-LAST:event_minExternalKeyReleased

    private void maxExternalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxExternalKeyReleased
        if (maxExternal.getText().length() > 3) {
            Toolkit.getDefaultToolkit().beep();
            maxExternal.setText(maxExternal.getText().substring(0, 3));
        }
        if (maxExternal.getText().matches("[0-9][0-9]*")) {
            bad4.setText(" ");
        } else {
            bad4.setText("!");
        }
    }//GEN-LAST:event_maxExternalKeyReleased

    private void subjectTypeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectTypeTableMouseClicked
        if (subjectTypeTable.isEnabled()) {
            fillTextArea();
        }
    }//GEN-LAST:event_subjectTypeTableMouseClicked

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        if (subjectTypeTable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a subject type.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (!subjectTypeTable.getModel().getValueAt(subjectTypeTable.convertRowIndexToModel(subjectTypeTable.getSelectedRow()), 0).toString().equals(subType.getText())) {
            JOptionPane.showMessageDialog(null, "Please make sure your selection.", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        subjectTypeTable.setSelectionBackground(new java.awt.Color(255, 0, 0));
        authenticationDialog dialog = new authenticationDialog(new javax.swing.JFrame(), true, "<html>Note : If you delete this subject type then all subject<br>with this subject type will get deleted.</html>");
        dialog.setTitle("Delete ?");
        dialog.setVisible(true);
        int returnStatus = dialog.returnStatus;
        dialog.dispose();
        if (returnStatus == 1) {
            int successful = 0;
            String subjectTypeToDelete = (String) subjectTypeTable.getModel().getValueAt(subjectTypeTable.getSelectedRow(), 0);
            String deleteUserQuery = "delete from submarkslimit where SubType=\"" + subjectTypeToDelete + "\"";

            try {
                successful = dbConnect.getCon().createStatement().executeUpdate(deleteUserQuery);
            } catch (SQLException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

            if (successful == 1) {
                fillsubjectTypeTable();
                JOptionPane.showMessageDialog(this, "Subject type \"" + subjectTypeToDelete + "\" deleted succeessfully.", "Information", JOptionPane.INFORMATION_MESSAGE);
            } else {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, "Subject type \"" + subjectTypeToDelete + "\" not deleted.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            clear.doClick();
        }
        subjectTypeTable.setSelectionBackground(new java.awt.Color(0, 102, 153));
    }//GEN-LAST:event_deleteActionPerformed

    private void subTypeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_subTypeKeyReleased
        if (subType.getText().length() > 20) {
            Toolkit.getDefaultToolkit().beep();
            subType.setText(subType.getText().substring(0, 20));
        }
        try {
            if (evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_LEFT) {
                return;
            }
            subType.setText(subType.getText().toLowerCase());
            subType.setText(subType.getText().replaceFirst(subType.getText(0, 1), subType.getText(0, 1).toUpperCase()));
        } catch (BadLocationException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        if (subType.getText().matches("[a-zA-Z][ a-zA-Z]*")) {
            bad5.setText(" ");
        } else {
            bad5.setText("!");
        }
    }//GEN-LAST:event_subTypeKeyReleased

    private void addFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addFocusGained
        notification.setText("To add new subject type to table.");
    }//GEN-LAST:event_addFocusGained

    private void subjectTypeTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectTypeTableMouseEntered
        notification.setText("Choose subject type from this table.");
    }//GEN-LAST:event_subjectTypeTableMouseEntered

    private void subjectTypeTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_subjectTypeTableKeyReleased
        if (subjectTypeTable.isEnabled()) {
            fillTextArea();
        }
    }//GEN-LAST:event_subjectTypeTableKeyReleased
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JLabel bad1;
    private javax.swing.JLabel bad2;
    private javax.swing.JLabel bad3;
    private javax.swing.JLabel bad4;
    private javax.swing.JLabel bad5;
    private javax.swing.JButton cancel;
    private javax.swing.JButton clear;
    private javax.swing.JButton delete;
    private javax.swing.JButton home;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel markLabel1;
    private javax.swing.JLabel markLabel2;
    private javax.swing.JLabel markLabel3;
    private javax.swing.JLabel markLabel4;
    private javax.swing.JTextField maxExternal;
    private javax.swing.JTextField maxInternal;
    private javax.swing.JTextField minExternal;
    private javax.swing.JTextField minInternal;
    private javax.swing.JButton modify;
    private javax.swing.JLabel notification;
    private javax.swing.JLabel photoLabel;
    private javax.swing.JTextField subType;
    private javax.swing.JPanel subjectTypePanel;
    private javax.swing.JScrollPane subjectTypeScroll;
    private javax.swing.JTable subjectTypeTable;
    // End of variables declaration//GEN-END:variables
}
